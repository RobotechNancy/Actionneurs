
turbine.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026f8  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002884  08002884  00012884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080028c4  080028c4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080028c4  080028c4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080028c4  080028c4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080028c4  080028c4  000128c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080028c8  080028c8  000128c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080028cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  080028d8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  080028d8  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009b48  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001613  00000000  00000000  00029b84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab8  00000000  00000000  0002b198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a00  00000000  00000000  0002bc50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f09b  00000000  00000000  0002c650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000accf  00000000  00000000  0004b6eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c01f5  00000000  00000000  000563ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001165af  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c54  00000000  00000000  00116600  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	0800286c 	.word	0x0800286c

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	0800286c 	.word	0x0800286c

080001cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d0:	f000 fa03 	bl	80005da <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d4:	f000 f810 	bl	80001f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d8:	f000 f900 	bl	80003dc <MX_GPIO_Init>
  MX_TIM1_Init();
 80001dc:	f000 f852 	bl	8000284 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80001e0:	2100      	movs	r1, #0
 80001e2:	4804      	ldr	r0, [pc, #16]	; (80001f4 <main+0x28>)
 80001e4:	f001 fbda 	bl	800199c <HAL_TIM_PWM_Start>
  __HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, 1228);
 80001e8:	4b02      	ldr	r3, [pc, #8]	; (80001f4 <main+0x28>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	f240 42cc 	movw	r2, #1228	; 0x4cc
 80001f0:	635a      	str	r2, [r3, #52]	; 0x34
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001f2:	e7fe      	b.n	80001f2 <main+0x26>
 80001f4:	20000028 	.word	0x20000028

080001f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b096      	sub	sp, #88	; 0x58
 80001fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001fe:	f107 0314 	add.w	r3, r7, #20
 8000202:	2244      	movs	r2, #68	; 0x44
 8000204:	2100      	movs	r1, #0
 8000206:	4618      	mov	r0, r3
 8000208:	f002 fb28 	bl	800285c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800020c:	463b      	mov	r3, r7
 800020e:	2200      	movs	r2, #0
 8000210:	601a      	str	r2, [r3, #0]
 8000212:	605a      	str	r2, [r3, #4]
 8000214:	609a      	str	r2, [r3, #8]
 8000216:	60da      	str	r2, [r3, #12]
 8000218:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800021a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800021e:	f000 fcaf 	bl	8000b80 <HAL_PWREx_ControlVoltageScaling>
 8000222:	4603      	mov	r3, r0
 8000224:	2b00      	cmp	r3, #0
 8000226:	d001      	beq.n	800022c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000228:	f000 f8f0 	bl	800040c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800022c:	2310      	movs	r3, #16
 800022e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000230:	2301      	movs	r3, #1
 8000232:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000234:	2300      	movs	r3, #0
 8000236:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000238:	2360      	movs	r3, #96	; 0x60
 800023a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800023c:	2300      	movs	r3, #0
 800023e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000240:	f107 0314 	add.w	r3, r7, #20
 8000244:	4618      	mov	r0, r3
 8000246:	f000 fcf1 	bl	8000c2c <HAL_RCC_OscConfig>
 800024a:	4603      	mov	r3, r0
 800024c:	2b00      	cmp	r3, #0
 800024e:	d001      	beq.n	8000254 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000250:	f000 f8dc 	bl	800040c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000254:	230f      	movs	r3, #15
 8000256:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000258:	2300      	movs	r3, #0
 800025a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800025c:	2300      	movs	r3, #0
 800025e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000260:	2300      	movs	r3, #0
 8000262:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000264:	2300      	movs	r3, #0
 8000266:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000268:	463b      	mov	r3, r7
 800026a:	2100      	movs	r1, #0
 800026c:	4618      	mov	r0, r3
 800026e:	f001 f8f1 	bl	8001454 <HAL_RCC_ClockConfig>
 8000272:	4603      	mov	r3, r0
 8000274:	2b00      	cmp	r3, #0
 8000276:	d001      	beq.n	800027c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000278:	f000 f8c8 	bl	800040c <Error_Handler>
  }
}
 800027c:	bf00      	nop
 800027e:	3758      	adds	r7, #88	; 0x58
 8000280:	46bd      	mov	sp, r7
 8000282:	bd80      	pop	{r7, pc}

08000284 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b09a      	sub	sp, #104	; 0x68
 8000288:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800028a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800028e:	2200      	movs	r2, #0
 8000290:	601a      	str	r2, [r3, #0]
 8000292:	605a      	str	r2, [r3, #4]
 8000294:	609a      	str	r2, [r3, #8]
 8000296:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000298:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800029c:	2200      	movs	r2, #0
 800029e:	601a      	str	r2, [r3, #0]
 80002a0:	605a      	str	r2, [r3, #4]
 80002a2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80002a8:	2200      	movs	r2, #0
 80002aa:	601a      	str	r2, [r3, #0]
 80002ac:	605a      	str	r2, [r3, #4]
 80002ae:	609a      	str	r2, [r3, #8]
 80002b0:	60da      	str	r2, [r3, #12]
 80002b2:	611a      	str	r2, [r3, #16]
 80002b4:	615a      	str	r2, [r3, #20]
 80002b6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80002b8:	1d3b      	adds	r3, r7, #4
 80002ba:	222c      	movs	r2, #44	; 0x2c
 80002bc:	2100      	movs	r1, #0
 80002be:	4618      	mov	r0, r3
 80002c0:	f002 facc 	bl	800285c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80002c4:	4b43      	ldr	r3, [pc, #268]	; (80003d4 <MX_TIM1_Init+0x150>)
 80002c6:	4a44      	ldr	r2, [pc, #272]	; (80003d8 <MX_TIM1_Init+0x154>)
 80002c8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 20;
 80002ca:	4b42      	ldr	r3, [pc, #264]	; (80003d4 <MX_TIM1_Init+0x150>)
 80002cc:	2214      	movs	r2, #20
 80002ce:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002d0:	4b40      	ldr	r3, [pc, #256]	; (80003d4 <MX_TIM1_Init+0x150>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4096;
 80002d6:	4b3f      	ldr	r3, [pc, #252]	; (80003d4 <MX_TIM1_Init+0x150>)
 80002d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80002dc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002de:	4b3d      	ldr	r3, [pc, #244]	; (80003d4 <MX_TIM1_Init+0x150>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80002e4:	4b3b      	ldr	r3, [pc, #236]	; (80003d4 <MX_TIM1_Init+0x150>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002ea:	4b3a      	ldr	r3, [pc, #232]	; (80003d4 <MX_TIM1_Init+0x150>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80002f0:	4838      	ldr	r0, [pc, #224]	; (80003d4 <MX_TIM1_Init+0x150>)
 80002f2:	f001 fa9b 	bl	800182c <HAL_TIM_Base_Init>
 80002f6:	4603      	mov	r3, r0
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d001      	beq.n	8000300 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80002fc:	f000 f886 	bl	800040c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000300:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000304:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000306:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800030a:	4619      	mov	r1, r3
 800030c:	4831      	ldr	r0, [pc, #196]	; (80003d4 <MX_TIM1_Init+0x150>)
 800030e:	f001 fd37 	bl	8001d80 <HAL_TIM_ConfigClockSource>
 8000312:	4603      	mov	r3, r0
 8000314:	2b00      	cmp	r3, #0
 8000316:	d001      	beq.n	800031c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000318:	f000 f878 	bl	800040c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800031c:	482d      	ldr	r0, [pc, #180]	; (80003d4 <MX_TIM1_Init+0x150>)
 800031e:	f001 fadc 	bl	80018da <HAL_TIM_PWM_Init>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d001      	beq.n	800032c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000328:	f000 f870 	bl	800040c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800032c:	2300      	movs	r3, #0
 800032e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000330:	2300      	movs	r3, #0
 8000332:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000334:	2300      	movs	r3, #0
 8000336:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000338:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800033c:	4619      	mov	r1, r3
 800033e:	4825      	ldr	r0, [pc, #148]	; (80003d4 <MX_TIM1_Init+0x150>)
 8000340:	f002 f98a 	bl	8002658 <HAL_TIMEx_MasterConfigSynchronization>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	d001      	beq.n	800034e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800034a:	f000 f85f 	bl	800040c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800034e:	2360      	movs	r3, #96	; 0x60
 8000350:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000352:	2300      	movs	r3, #0
 8000354:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000356:	2300      	movs	r3, #0
 8000358:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800035a:	2300      	movs	r3, #0
 800035c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800035e:	2300      	movs	r3, #0
 8000360:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000362:	2300      	movs	r3, #0
 8000364:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000366:	2300      	movs	r3, #0
 8000368:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800036a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800036e:	2200      	movs	r2, #0
 8000370:	4619      	mov	r1, r3
 8000372:	4818      	ldr	r0, [pc, #96]	; (80003d4 <MX_TIM1_Init+0x150>)
 8000374:	f001 fbf0 	bl	8001b58 <HAL_TIM_PWM_ConfigChannel>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d001      	beq.n	8000382 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800037e:	f000 f845 	bl	800040c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000382:	2300      	movs	r3, #0
 8000384:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000386:	2300      	movs	r3, #0
 8000388:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800038a:	2300      	movs	r3, #0
 800038c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800038e:	2300      	movs	r3, #0
 8000390:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000392:	2300      	movs	r3, #0
 8000394:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000396:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800039a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800039c:	2300      	movs	r3, #0
 800039e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80003a0:	2300      	movs	r3, #0
 80003a2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80003a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80003a8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80003aa:	2300      	movs	r3, #0
 80003ac:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80003ae:	2300      	movs	r3, #0
 80003b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80003b2:	1d3b      	adds	r3, r7, #4
 80003b4:	4619      	mov	r1, r3
 80003b6:	4807      	ldr	r0, [pc, #28]	; (80003d4 <MX_TIM1_Init+0x150>)
 80003b8:	f002 f9b4 	bl	8002724 <HAL_TIMEx_ConfigBreakDeadTime>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d001      	beq.n	80003c6 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80003c2:	f000 f823 	bl	800040c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80003c6:	4803      	ldr	r0, [pc, #12]	; (80003d4 <MX_TIM1_Init+0x150>)
 80003c8:	f000 f86a 	bl	80004a0 <HAL_TIM_MspPostInit>

}
 80003cc:	bf00      	nop
 80003ce:	3768      	adds	r7, #104	; 0x68
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bd80      	pop	{r7, pc}
 80003d4:	20000028 	.word	0x20000028
 80003d8:	40012c00 	.word	0x40012c00

080003dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003dc:	b480      	push	{r7}
 80003de:	b083      	sub	sp, #12
 80003e0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003e2:	4b09      	ldr	r3, [pc, #36]	; (8000408 <MX_GPIO_Init+0x2c>)
 80003e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003e6:	4a08      	ldr	r2, [pc, #32]	; (8000408 <MX_GPIO_Init+0x2c>)
 80003e8:	f043 0301 	orr.w	r3, r3, #1
 80003ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003ee:	4b06      	ldr	r3, [pc, #24]	; (8000408 <MX_GPIO_Init+0x2c>)
 80003f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003f2:	f003 0301 	and.w	r3, r3, #1
 80003f6:	607b      	str	r3, [r7, #4]
 80003f8:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003fa:	bf00      	nop
 80003fc:	370c      	adds	r7, #12
 80003fe:	46bd      	mov	sp, r7
 8000400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000404:	4770      	bx	lr
 8000406:	bf00      	nop
 8000408:	40021000 	.word	0x40021000

0800040c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000410:	b672      	cpsid	i
}
 8000412:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000414:	e7fe      	b.n	8000414 <Error_Handler+0x8>
	...

08000418 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000418:	b480      	push	{r7}
 800041a:	b083      	sub	sp, #12
 800041c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800041e:	4b0f      	ldr	r3, [pc, #60]	; (800045c <HAL_MspInit+0x44>)
 8000420:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000422:	4a0e      	ldr	r2, [pc, #56]	; (800045c <HAL_MspInit+0x44>)
 8000424:	f043 0301 	orr.w	r3, r3, #1
 8000428:	6613      	str	r3, [r2, #96]	; 0x60
 800042a:	4b0c      	ldr	r3, [pc, #48]	; (800045c <HAL_MspInit+0x44>)
 800042c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800042e:	f003 0301 	and.w	r3, r3, #1
 8000432:	607b      	str	r3, [r7, #4]
 8000434:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000436:	4b09      	ldr	r3, [pc, #36]	; (800045c <HAL_MspInit+0x44>)
 8000438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800043a:	4a08      	ldr	r2, [pc, #32]	; (800045c <HAL_MspInit+0x44>)
 800043c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000440:	6593      	str	r3, [r2, #88]	; 0x58
 8000442:	4b06      	ldr	r3, [pc, #24]	; (800045c <HAL_MspInit+0x44>)
 8000444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800044a:	603b      	str	r3, [r7, #0]
 800044c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800044e:	bf00      	nop
 8000450:	370c      	adds	r7, #12
 8000452:	46bd      	mov	sp, r7
 8000454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000458:	4770      	bx	lr
 800045a:	bf00      	nop
 800045c:	40021000 	.word	0x40021000

08000460 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000460:	b480      	push	{r7}
 8000462:	b085      	sub	sp, #20
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	4a0a      	ldr	r2, [pc, #40]	; (8000498 <HAL_TIM_Base_MspInit+0x38>)
 800046e:	4293      	cmp	r3, r2
 8000470:	d10b      	bne.n	800048a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000472:	4b0a      	ldr	r3, [pc, #40]	; (800049c <HAL_TIM_Base_MspInit+0x3c>)
 8000474:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000476:	4a09      	ldr	r2, [pc, #36]	; (800049c <HAL_TIM_Base_MspInit+0x3c>)
 8000478:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800047c:	6613      	str	r3, [r2, #96]	; 0x60
 800047e:	4b07      	ldr	r3, [pc, #28]	; (800049c <HAL_TIM_Base_MspInit+0x3c>)
 8000480:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000482:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000486:	60fb      	str	r3, [r7, #12]
 8000488:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800048a:	bf00      	nop
 800048c:	3714      	adds	r7, #20
 800048e:	46bd      	mov	sp, r7
 8000490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000494:	4770      	bx	lr
 8000496:	bf00      	nop
 8000498:	40012c00 	.word	0x40012c00
 800049c:	40021000 	.word	0x40021000

080004a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b088      	sub	sp, #32
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004a8:	f107 030c 	add.w	r3, r7, #12
 80004ac:	2200      	movs	r2, #0
 80004ae:	601a      	str	r2, [r3, #0]
 80004b0:	605a      	str	r2, [r3, #4]
 80004b2:	609a      	str	r2, [r3, #8]
 80004b4:	60da      	str	r2, [r3, #12]
 80004b6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	4a12      	ldr	r2, [pc, #72]	; (8000508 <HAL_TIM_MspPostInit+0x68>)
 80004be:	4293      	cmp	r3, r2
 80004c0:	d11d      	bne.n	80004fe <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c2:	4b12      	ldr	r3, [pc, #72]	; (800050c <HAL_TIM_MspPostInit+0x6c>)
 80004c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004c6:	4a11      	ldr	r2, [pc, #68]	; (800050c <HAL_TIM_MspPostInit+0x6c>)
 80004c8:	f043 0301 	orr.w	r3, r3, #1
 80004cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004ce:	4b0f      	ldr	r3, [pc, #60]	; (800050c <HAL_TIM_MspPostInit+0x6c>)
 80004d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004d2:	f003 0301 	and.w	r3, r3, #1
 80004d6:	60bb      	str	r3, [r7, #8]
 80004d8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80004da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80004de:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004e0:	2302      	movs	r3, #2
 80004e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e4:	2300      	movs	r3, #0
 80004e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004e8:	2300      	movs	r3, #0
 80004ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80004ec:	2301      	movs	r3, #1
 80004ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004f0:	f107 030c 	add.w	r3, r7, #12
 80004f4:	4619      	mov	r1, r3
 80004f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004fa:	f000 f9c9 	bl	8000890 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80004fe:	bf00      	nop
 8000500:	3720      	adds	r7, #32
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40012c00 	.word	0x40012c00
 800050c:	40021000 	.word	0x40021000

08000510 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000514:	e7fe      	b.n	8000514 <NMI_Handler+0x4>

08000516 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000516:	b480      	push	{r7}
 8000518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800051a:	e7fe      	b.n	800051a <HardFault_Handler+0x4>

0800051c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000520:	e7fe      	b.n	8000520 <MemManage_Handler+0x4>

08000522 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000522:	b480      	push	{r7}
 8000524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000526:	e7fe      	b.n	8000526 <BusFault_Handler+0x4>

08000528 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800052c:	e7fe      	b.n	800052c <UsageFault_Handler+0x4>

0800052e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800052e:	b480      	push	{r7}
 8000530:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000532:	bf00      	nop
 8000534:	46bd      	mov	sp, r7
 8000536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053a:	4770      	bx	lr

0800053c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000540:	bf00      	nop
 8000542:	46bd      	mov	sp, r7
 8000544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000548:	4770      	bx	lr

0800054a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800054a:	b480      	push	{r7}
 800054c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800054e:	bf00      	nop
 8000550:	46bd      	mov	sp, r7
 8000552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000556:	4770      	bx	lr

08000558 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800055c:	f000 f892 	bl	8000684 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000560:	bf00      	nop
 8000562:	bd80      	pop	{r7, pc}

08000564 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000568:	4b06      	ldr	r3, [pc, #24]	; (8000584 <SystemInit+0x20>)
 800056a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800056e:	4a05      	ldr	r2, [pc, #20]	; (8000584 <SystemInit+0x20>)
 8000570:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000574:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000578:	bf00      	nop
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop
 8000584:	e000ed00 	.word	0xe000ed00

08000588 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000588:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005c0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800058c:	f7ff ffea 	bl	8000564 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000590:	480c      	ldr	r0, [pc, #48]	; (80005c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000592:	490d      	ldr	r1, [pc, #52]	; (80005c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000594:	4a0d      	ldr	r2, [pc, #52]	; (80005cc <LoopForever+0xe>)
  movs r3, #0
 8000596:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000598:	e002      	b.n	80005a0 <LoopCopyDataInit>

0800059a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800059a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800059c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800059e:	3304      	adds	r3, #4

080005a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005a4:	d3f9      	bcc.n	800059a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005a6:	4a0a      	ldr	r2, [pc, #40]	; (80005d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005a8:	4c0a      	ldr	r4, [pc, #40]	; (80005d4 <LoopForever+0x16>)
  movs r3, #0
 80005aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005ac:	e001      	b.n	80005b2 <LoopFillZerobss>

080005ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005b0:	3204      	adds	r2, #4

080005b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005b4:	d3fb      	bcc.n	80005ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005b6:	f002 f92d 	bl	8002814 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005ba:	f7ff fe07 	bl	80001cc <main>

080005be <LoopForever>:

LoopForever:
    b LoopForever
 80005be:	e7fe      	b.n	80005be <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80005c0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80005c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005c8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80005cc:	080028cc 	.word	0x080028cc
  ldr r2, =_sbss
 80005d0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80005d4:	20000078 	.word	0x20000078

080005d8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005d8:	e7fe      	b.n	80005d8 <ADC1_IRQHandler>

080005da <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005da:	b580      	push	{r7, lr}
 80005dc:	b082      	sub	sp, #8
 80005de:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80005e0:	2300      	movs	r3, #0
 80005e2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005e4:	2003      	movs	r0, #3
 80005e6:	f000 f91f 	bl	8000828 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005ea:	200f      	movs	r0, #15
 80005ec:	f000 f80e 	bl	800060c <HAL_InitTick>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d002      	beq.n	80005fc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80005f6:	2301      	movs	r3, #1
 80005f8:	71fb      	strb	r3, [r7, #7]
 80005fa:	e001      	b.n	8000600 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80005fc:	f7ff ff0c 	bl	8000418 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000600:	79fb      	ldrb	r3, [r7, #7]
}
 8000602:	4618      	mov	r0, r3
 8000604:	3708      	adds	r7, #8
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
	...

0800060c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000614:	2300      	movs	r3, #0
 8000616:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000618:	4b17      	ldr	r3, [pc, #92]	; (8000678 <HAL_InitTick+0x6c>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d023      	beq.n	8000668 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000620:	4b16      	ldr	r3, [pc, #88]	; (800067c <HAL_InitTick+0x70>)
 8000622:	681a      	ldr	r2, [r3, #0]
 8000624:	4b14      	ldr	r3, [pc, #80]	; (8000678 <HAL_InitTick+0x6c>)
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	4619      	mov	r1, r3
 800062a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800062e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000632:	fbb2 f3f3 	udiv	r3, r2, r3
 8000636:	4618      	mov	r0, r3
 8000638:	f000 f91d 	bl	8000876 <HAL_SYSTICK_Config>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d10f      	bne.n	8000662 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	2b0f      	cmp	r3, #15
 8000646:	d809      	bhi.n	800065c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000648:	2200      	movs	r2, #0
 800064a:	6879      	ldr	r1, [r7, #4]
 800064c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000650:	f000 f8f5 	bl	800083e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000654:	4a0a      	ldr	r2, [pc, #40]	; (8000680 <HAL_InitTick+0x74>)
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	6013      	str	r3, [r2, #0]
 800065a:	e007      	b.n	800066c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800065c:	2301      	movs	r3, #1
 800065e:	73fb      	strb	r3, [r7, #15]
 8000660:	e004      	b.n	800066c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000662:	2301      	movs	r3, #1
 8000664:	73fb      	strb	r3, [r7, #15]
 8000666:	e001      	b.n	800066c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000668:	2301      	movs	r3, #1
 800066a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800066c:	7bfb      	ldrb	r3, [r7, #15]
}
 800066e:	4618      	mov	r0, r3
 8000670:	3710      	adds	r7, #16
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	20000008 	.word	0x20000008
 800067c:	20000000 	.word	0x20000000
 8000680:	20000004 	.word	0x20000004

08000684 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000688:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <HAL_IncTick+0x20>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	461a      	mov	r2, r3
 800068e:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <HAL_IncTick+0x24>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	4413      	add	r3, r2
 8000694:	4a04      	ldr	r2, [pc, #16]	; (80006a8 <HAL_IncTick+0x24>)
 8000696:	6013      	str	r3, [r2, #0]
}
 8000698:	bf00      	nop
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	20000008 	.word	0x20000008
 80006a8:	20000074 	.word	0x20000074

080006ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  return uwTick;
 80006b0:	4b03      	ldr	r3, [pc, #12]	; (80006c0 <HAL_GetTick+0x14>)
 80006b2:	681b      	ldr	r3, [r3, #0]
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	20000074 	.word	0x20000074

080006c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b085      	sub	sp, #20
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	f003 0307 	and.w	r3, r3, #7
 80006d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006d4:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <__NVIC_SetPriorityGrouping+0x44>)
 80006d6:	68db      	ldr	r3, [r3, #12]
 80006d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006da:	68ba      	ldr	r2, [r7, #8]
 80006dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006e0:	4013      	ands	r3, r2
 80006e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006e8:	68bb      	ldr	r3, [r7, #8]
 80006ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006f6:	4a04      	ldr	r2, [pc, #16]	; (8000708 <__NVIC_SetPriorityGrouping+0x44>)
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	60d3      	str	r3, [r2, #12]
}
 80006fc:	bf00      	nop
 80006fe:	3714      	adds	r7, #20
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr
 8000708:	e000ed00 	.word	0xe000ed00

0800070c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000710:	4b04      	ldr	r3, [pc, #16]	; (8000724 <__NVIC_GetPriorityGrouping+0x18>)
 8000712:	68db      	ldr	r3, [r3, #12]
 8000714:	0a1b      	lsrs	r3, r3, #8
 8000716:	f003 0307 	and.w	r3, r3, #7
}
 800071a:	4618      	mov	r0, r3
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr
 8000724:	e000ed00 	.word	0xe000ed00

08000728 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
 800072e:	4603      	mov	r3, r0
 8000730:	6039      	str	r1, [r7, #0]
 8000732:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000734:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000738:	2b00      	cmp	r3, #0
 800073a:	db0a      	blt.n	8000752 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800073c:	683b      	ldr	r3, [r7, #0]
 800073e:	b2da      	uxtb	r2, r3
 8000740:	490c      	ldr	r1, [pc, #48]	; (8000774 <__NVIC_SetPriority+0x4c>)
 8000742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000746:	0112      	lsls	r2, r2, #4
 8000748:	b2d2      	uxtb	r2, r2
 800074a:	440b      	add	r3, r1
 800074c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000750:	e00a      	b.n	8000768 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	b2da      	uxtb	r2, r3
 8000756:	4908      	ldr	r1, [pc, #32]	; (8000778 <__NVIC_SetPriority+0x50>)
 8000758:	79fb      	ldrb	r3, [r7, #7]
 800075a:	f003 030f 	and.w	r3, r3, #15
 800075e:	3b04      	subs	r3, #4
 8000760:	0112      	lsls	r2, r2, #4
 8000762:	b2d2      	uxtb	r2, r2
 8000764:	440b      	add	r3, r1
 8000766:	761a      	strb	r2, [r3, #24]
}
 8000768:	bf00      	nop
 800076a:	370c      	adds	r7, #12
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr
 8000774:	e000e100 	.word	0xe000e100
 8000778:	e000ed00 	.word	0xe000ed00

0800077c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800077c:	b480      	push	{r7}
 800077e:	b089      	sub	sp, #36	; 0x24
 8000780:	af00      	add	r7, sp, #0
 8000782:	60f8      	str	r0, [r7, #12]
 8000784:	60b9      	str	r1, [r7, #8]
 8000786:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	f003 0307 	and.w	r3, r3, #7
 800078e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000790:	69fb      	ldr	r3, [r7, #28]
 8000792:	f1c3 0307 	rsb	r3, r3, #7
 8000796:	2b04      	cmp	r3, #4
 8000798:	bf28      	it	cs
 800079a:	2304      	movcs	r3, #4
 800079c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800079e:	69fb      	ldr	r3, [r7, #28]
 80007a0:	3304      	adds	r3, #4
 80007a2:	2b06      	cmp	r3, #6
 80007a4:	d902      	bls.n	80007ac <NVIC_EncodePriority+0x30>
 80007a6:	69fb      	ldr	r3, [r7, #28]
 80007a8:	3b03      	subs	r3, #3
 80007aa:	e000      	b.n	80007ae <NVIC_EncodePriority+0x32>
 80007ac:	2300      	movs	r3, #0
 80007ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80007b4:	69bb      	ldr	r3, [r7, #24]
 80007b6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ba:	43da      	mvns	r2, r3
 80007bc:	68bb      	ldr	r3, [r7, #8]
 80007be:	401a      	ands	r2, r3
 80007c0:	697b      	ldr	r3, [r7, #20]
 80007c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80007c8:	697b      	ldr	r3, [r7, #20]
 80007ca:	fa01 f303 	lsl.w	r3, r1, r3
 80007ce:	43d9      	mvns	r1, r3
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007d4:	4313      	orrs	r3, r2
         );
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	3724      	adds	r7, #36	; 0x24
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr
	...

080007e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	3b01      	subs	r3, #1
 80007f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007f4:	d301      	bcc.n	80007fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007f6:	2301      	movs	r3, #1
 80007f8:	e00f      	b.n	800081a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007fa:	4a0a      	ldr	r2, [pc, #40]	; (8000824 <SysTick_Config+0x40>)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	3b01      	subs	r3, #1
 8000800:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000802:	210f      	movs	r1, #15
 8000804:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000808:	f7ff ff8e 	bl	8000728 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800080c:	4b05      	ldr	r3, [pc, #20]	; (8000824 <SysTick_Config+0x40>)
 800080e:	2200      	movs	r2, #0
 8000810:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000812:	4b04      	ldr	r3, [pc, #16]	; (8000824 <SysTick_Config+0x40>)
 8000814:	2207      	movs	r2, #7
 8000816:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000818:	2300      	movs	r3, #0
}
 800081a:	4618      	mov	r0, r3
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	e000e010 	.word	0xe000e010

08000828 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000830:	6878      	ldr	r0, [r7, #4]
 8000832:	f7ff ff47 	bl	80006c4 <__NVIC_SetPriorityGrouping>
}
 8000836:	bf00      	nop
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}

0800083e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800083e:	b580      	push	{r7, lr}
 8000840:	b086      	sub	sp, #24
 8000842:	af00      	add	r7, sp, #0
 8000844:	4603      	mov	r3, r0
 8000846:	60b9      	str	r1, [r7, #8]
 8000848:	607a      	str	r2, [r7, #4]
 800084a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800084c:	2300      	movs	r3, #0
 800084e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000850:	f7ff ff5c 	bl	800070c <__NVIC_GetPriorityGrouping>
 8000854:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000856:	687a      	ldr	r2, [r7, #4]
 8000858:	68b9      	ldr	r1, [r7, #8]
 800085a:	6978      	ldr	r0, [r7, #20]
 800085c:	f7ff ff8e 	bl	800077c <NVIC_EncodePriority>
 8000860:	4602      	mov	r2, r0
 8000862:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000866:	4611      	mov	r1, r2
 8000868:	4618      	mov	r0, r3
 800086a:	f7ff ff5d 	bl	8000728 <__NVIC_SetPriority>
}
 800086e:	bf00      	nop
 8000870:	3718      	adds	r7, #24
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}

08000876 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000876:	b580      	push	{r7, lr}
 8000878:	b082      	sub	sp, #8
 800087a:	af00      	add	r7, sp, #0
 800087c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800087e:	6878      	ldr	r0, [r7, #4]
 8000880:	f7ff ffb0 	bl	80007e4 <SysTick_Config>
 8000884:	4603      	mov	r3, r0
}
 8000886:	4618      	mov	r0, r3
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
	...

08000890 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000890:	b480      	push	{r7}
 8000892:	b087      	sub	sp, #28
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
 8000898:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800089a:	2300      	movs	r3, #0
 800089c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800089e:	e148      	b.n	8000b32 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	681a      	ldr	r2, [r3, #0]
 80008a4:	2101      	movs	r1, #1
 80008a6:	697b      	ldr	r3, [r7, #20]
 80008a8:	fa01 f303 	lsl.w	r3, r1, r3
 80008ac:	4013      	ands	r3, r2
 80008ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	f000 813a 	beq.w	8000b2c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	685b      	ldr	r3, [r3, #4]
 80008bc:	f003 0303 	and.w	r3, r3, #3
 80008c0:	2b01      	cmp	r3, #1
 80008c2:	d005      	beq.n	80008d0 <HAL_GPIO_Init+0x40>
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	685b      	ldr	r3, [r3, #4]
 80008c8:	f003 0303 	and.w	r3, r3, #3
 80008cc:	2b02      	cmp	r3, #2
 80008ce:	d130      	bne.n	8000932 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	689b      	ldr	r3, [r3, #8]
 80008d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80008d6:	697b      	ldr	r3, [r7, #20]
 80008d8:	005b      	lsls	r3, r3, #1
 80008da:	2203      	movs	r2, #3
 80008dc:	fa02 f303 	lsl.w	r3, r2, r3
 80008e0:	43db      	mvns	r3, r3
 80008e2:	693a      	ldr	r2, [r7, #16]
 80008e4:	4013      	ands	r3, r2
 80008e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	68da      	ldr	r2, [r3, #12]
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	005b      	lsls	r3, r3, #1
 80008f0:	fa02 f303 	lsl.w	r3, r2, r3
 80008f4:	693a      	ldr	r2, [r7, #16]
 80008f6:	4313      	orrs	r3, r2
 80008f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	693a      	ldr	r2, [r7, #16]
 80008fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	685b      	ldr	r3, [r3, #4]
 8000904:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000906:	2201      	movs	r2, #1
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	fa02 f303 	lsl.w	r3, r2, r3
 800090e:	43db      	mvns	r3, r3
 8000910:	693a      	ldr	r2, [r7, #16]
 8000912:	4013      	ands	r3, r2
 8000914:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	685b      	ldr	r3, [r3, #4]
 800091a:	091b      	lsrs	r3, r3, #4
 800091c:	f003 0201 	and.w	r2, r3, #1
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	fa02 f303 	lsl.w	r3, r2, r3
 8000926:	693a      	ldr	r2, [r7, #16]
 8000928:	4313      	orrs	r3, r2
 800092a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	693a      	ldr	r2, [r7, #16]
 8000930:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	685b      	ldr	r3, [r3, #4]
 8000936:	f003 0303 	and.w	r3, r3, #3
 800093a:	2b03      	cmp	r3, #3
 800093c:	d017      	beq.n	800096e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	68db      	ldr	r3, [r3, #12]
 8000942:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000944:	697b      	ldr	r3, [r7, #20]
 8000946:	005b      	lsls	r3, r3, #1
 8000948:	2203      	movs	r2, #3
 800094a:	fa02 f303 	lsl.w	r3, r2, r3
 800094e:	43db      	mvns	r3, r3
 8000950:	693a      	ldr	r2, [r7, #16]
 8000952:	4013      	ands	r3, r2
 8000954:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	689a      	ldr	r2, [r3, #8]
 800095a:	697b      	ldr	r3, [r7, #20]
 800095c:	005b      	lsls	r3, r3, #1
 800095e:	fa02 f303 	lsl.w	r3, r2, r3
 8000962:	693a      	ldr	r2, [r7, #16]
 8000964:	4313      	orrs	r3, r2
 8000966:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	693a      	ldr	r2, [r7, #16]
 800096c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	685b      	ldr	r3, [r3, #4]
 8000972:	f003 0303 	and.w	r3, r3, #3
 8000976:	2b02      	cmp	r3, #2
 8000978:	d123      	bne.n	80009c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800097a:	697b      	ldr	r3, [r7, #20]
 800097c:	08da      	lsrs	r2, r3, #3
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	3208      	adds	r2, #8
 8000982:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000986:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000988:	697b      	ldr	r3, [r7, #20]
 800098a:	f003 0307 	and.w	r3, r3, #7
 800098e:	009b      	lsls	r3, r3, #2
 8000990:	220f      	movs	r2, #15
 8000992:	fa02 f303 	lsl.w	r3, r2, r3
 8000996:	43db      	mvns	r3, r3
 8000998:	693a      	ldr	r2, [r7, #16]
 800099a:	4013      	ands	r3, r2
 800099c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	691a      	ldr	r2, [r3, #16]
 80009a2:	697b      	ldr	r3, [r7, #20]
 80009a4:	f003 0307 	and.w	r3, r3, #7
 80009a8:	009b      	lsls	r3, r3, #2
 80009aa:	fa02 f303 	lsl.w	r3, r2, r3
 80009ae:	693a      	ldr	r2, [r7, #16]
 80009b0:	4313      	orrs	r3, r2
 80009b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	08da      	lsrs	r2, r3, #3
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	3208      	adds	r2, #8
 80009bc:	6939      	ldr	r1, [r7, #16]
 80009be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	005b      	lsls	r3, r3, #1
 80009cc:	2203      	movs	r2, #3
 80009ce:	fa02 f303 	lsl.w	r3, r2, r3
 80009d2:	43db      	mvns	r3, r3
 80009d4:	693a      	ldr	r2, [r7, #16]
 80009d6:	4013      	ands	r3, r2
 80009d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	685b      	ldr	r3, [r3, #4]
 80009de:	f003 0203 	and.w	r2, r3, #3
 80009e2:	697b      	ldr	r3, [r7, #20]
 80009e4:	005b      	lsls	r3, r3, #1
 80009e6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ea:	693a      	ldr	r2, [r7, #16]
 80009ec:	4313      	orrs	r3, r2
 80009ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	693a      	ldr	r2, [r7, #16]
 80009f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	685b      	ldr	r3, [r3, #4]
 80009fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	f000 8094 	beq.w	8000b2c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a04:	4b52      	ldr	r3, [pc, #328]	; (8000b50 <HAL_GPIO_Init+0x2c0>)
 8000a06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a08:	4a51      	ldr	r2, [pc, #324]	; (8000b50 <HAL_GPIO_Init+0x2c0>)
 8000a0a:	f043 0301 	orr.w	r3, r3, #1
 8000a0e:	6613      	str	r3, [r2, #96]	; 0x60
 8000a10:	4b4f      	ldr	r3, [pc, #316]	; (8000b50 <HAL_GPIO_Init+0x2c0>)
 8000a12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a14:	f003 0301 	and.w	r3, r3, #1
 8000a18:	60bb      	str	r3, [r7, #8]
 8000a1a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a1c:	4a4d      	ldr	r2, [pc, #308]	; (8000b54 <HAL_GPIO_Init+0x2c4>)
 8000a1e:	697b      	ldr	r3, [r7, #20]
 8000a20:	089b      	lsrs	r3, r3, #2
 8000a22:	3302      	adds	r3, #2
 8000a24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a28:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a2a:	697b      	ldr	r3, [r7, #20]
 8000a2c:	f003 0303 	and.w	r3, r3, #3
 8000a30:	009b      	lsls	r3, r3, #2
 8000a32:	220f      	movs	r2, #15
 8000a34:	fa02 f303 	lsl.w	r3, r2, r3
 8000a38:	43db      	mvns	r3, r3
 8000a3a:	693a      	ldr	r2, [r7, #16]
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000a46:	d00d      	beq.n	8000a64 <HAL_GPIO_Init+0x1d4>
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	4a43      	ldr	r2, [pc, #268]	; (8000b58 <HAL_GPIO_Init+0x2c8>)
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	d007      	beq.n	8000a60 <HAL_GPIO_Init+0x1d0>
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	4a42      	ldr	r2, [pc, #264]	; (8000b5c <HAL_GPIO_Init+0x2cc>)
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d101      	bne.n	8000a5c <HAL_GPIO_Init+0x1cc>
 8000a58:	2302      	movs	r3, #2
 8000a5a:	e004      	b.n	8000a66 <HAL_GPIO_Init+0x1d6>
 8000a5c:	2307      	movs	r3, #7
 8000a5e:	e002      	b.n	8000a66 <HAL_GPIO_Init+0x1d6>
 8000a60:	2301      	movs	r3, #1
 8000a62:	e000      	b.n	8000a66 <HAL_GPIO_Init+0x1d6>
 8000a64:	2300      	movs	r3, #0
 8000a66:	697a      	ldr	r2, [r7, #20]
 8000a68:	f002 0203 	and.w	r2, r2, #3
 8000a6c:	0092      	lsls	r2, r2, #2
 8000a6e:	4093      	lsls	r3, r2
 8000a70:	693a      	ldr	r2, [r7, #16]
 8000a72:	4313      	orrs	r3, r2
 8000a74:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a76:	4937      	ldr	r1, [pc, #220]	; (8000b54 <HAL_GPIO_Init+0x2c4>)
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	089b      	lsrs	r3, r3, #2
 8000a7c:	3302      	adds	r3, #2
 8000a7e:	693a      	ldr	r2, [r7, #16]
 8000a80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000a84:	4b36      	ldr	r3, [pc, #216]	; (8000b60 <HAL_GPIO_Init+0x2d0>)
 8000a86:	689b      	ldr	r3, [r3, #8]
 8000a88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	43db      	mvns	r3, r3
 8000a8e:	693a      	ldr	r2, [r7, #16]
 8000a90:	4013      	ands	r3, r2
 8000a92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d003      	beq.n	8000aa8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000aa0:	693a      	ldr	r2, [r7, #16]
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000aa8:	4a2d      	ldr	r2, [pc, #180]	; (8000b60 <HAL_GPIO_Init+0x2d0>)
 8000aaa:	693b      	ldr	r3, [r7, #16]
 8000aac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000aae:	4b2c      	ldr	r3, [pc, #176]	; (8000b60 <HAL_GPIO_Init+0x2d0>)
 8000ab0:	68db      	ldr	r3, [r3, #12]
 8000ab2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	43db      	mvns	r3, r3
 8000ab8:	693a      	ldr	r2, [r7, #16]
 8000aba:	4013      	ands	r3, r2
 8000abc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d003      	beq.n	8000ad2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000aca:	693a      	ldr	r2, [r7, #16]
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	4313      	orrs	r3, r2
 8000ad0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000ad2:	4a23      	ldr	r2, [pc, #140]	; (8000b60 <HAL_GPIO_Init+0x2d0>)
 8000ad4:	693b      	ldr	r3, [r7, #16]
 8000ad6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000ad8:	4b21      	ldr	r3, [pc, #132]	; (8000b60 <HAL_GPIO_Init+0x2d0>)
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	43db      	mvns	r3, r3
 8000ae2:	693a      	ldr	r2, [r7, #16]
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d003      	beq.n	8000afc <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8000af4:	693a      	ldr	r2, [r7, #16]
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	4313      	orrs	r3, r2
 8000afa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000afc:	4a18      	ldr	r2, [pc, #96]	; (8000b60 <HAL_GPIO_Init+0x2d0>)
 8000afe:	693b      	ldr	r3, [r7, #16]
 8000b00:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000b02:	4b17      	ldr	r3, [pc, #92]	; (8000b60 <HAL_GPIO_Init+0x2d0>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	43db      	mvns	r3, r3
 8000b0c:	693a      	ldr	r2, [r7, #16]
 8000b0e:	4013      	ands	r3, r2
 8000b10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d003      	beq.n	8000b26 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8000b1e:	693a      	ldr	r2, [r7, #16]
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	4313      	orrs	r3, r2
 8000b24:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000b26:	4a0e      	ldr	r2, [pc, #56]	; (8000b60 <HAL_GPIO_Init+0x2d0>)
 8000b28:	693b      	ldr	r3, [r7, #16]
 8000b2a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	3301      	adds	r3, #1
 8000b30:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	681a      	ldr	r2, [r3, #0]
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	fa22 f303 	lsr.w	r3, r2, r3
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	f47f aeaf 	bne.w	80008a0 <HAL_GPIO_Init+0x10>
  }
}
 8000b42:	bf00      	nop
 8000b44:	bf00      	nop
 8000b46:	371c      	adds	r7, #28
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr
 8000b50:	40021000 	.word	0x40021000
 8000b54:	40010000 	.word	0x40010000
 8000b58:	48000400 	.word	0x48000400
 8000b5c:	48000800 	.word	0x48000800
 8000b60:	40010400 	.word	0x40010400

08000b64 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000b68:	4b04      	ldr	r3, [pc, #16]	; (8000b7c <HAL_PWREx_GetVoltageRange+0x18>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	40007000 	.word	0x40007000

08000b80 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b085      	sub	sp, #20
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b8e:	d130      	bne.n	8000bf2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000b90:	4b23      	ldr	r3, [pc, #140]	; (8000c20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000b98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b9c:	d038      	beq.n	8000c10 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b9e:	4b20      	ldr	r3, [pc, #128]	; (8000c20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000ba6:	4a1e      	ldr	r2, [pc, #120]	; (8000c20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ba8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bac:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000bae:	4b1d      	ldr	r3, [pc, #116]	; (8000c24 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	2232      	movs	r2, #50	; 0x32
 8000bb4:	fb02 f303 	mul.w	r3, r2, r3
 8000bb8:	4a1b      	ldr	r2, [pc, #108]	; (8000c28 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000bba:	fba2 2303 	umull	r2, r3, r2, r3
 8000bbe:	0c9b      	lsrs	r3, r3, #18
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000bc4:	e002      	b.n	8000bcc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	3b01      	subs	r3, #1
 8000bca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000bcc:	4b14      	ldr	r3, [pc, #80]	; (8000c20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bce:	695b      	ldr	r3, [r3, #20]
 8000bd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000bd8:	d102      	bne.n	8000be0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d1f2      	bne.n	8000bc6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000be0:	4b0f      	ldr	r3, [pc, #60]	; (8000c20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000be2:	695b      	ldr	r3, [r3, #20]
 8000be4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000be8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000bec:	d110      	bne.n	8000c10 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000bee:	2303      	movs	r3, #3
 8000bf0:	e00f      	b.n	8000c12 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000bf2:	4b0b      	ldr	r3, [pc, #44]	; (8000c20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000bfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000bfe:	d007      	beq.n	8000c10 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c00:	4b07      	ldr	r3, [pc, #28]	; (8000c20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000c08:	4a05      	ldr	r2, [pc, #20]	; (8000c20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c0e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000c10:	2300      	movs	r3, #0
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3714      	adds	r7, #20
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	40007000 	.word	0x40007000
 8000c24:	20000000 	.word	0x20000000
 8000c28:	431bde83 	.word	0x431bde83

08000c2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b088      	sub	sp, #32
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d102      	bne.n	8000c40 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	f000 bc02 	b.w	8001444 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000c40:	4b96      	ldr	r3, [pc, #600]	; (8000e9c <HAL_RCC_OscConfig+0x270>)
 8000c42:	689b      	ldr	r3, [r3, #8]
 8000c44:	f003 030c 	and.w	r3, r3, #12
 8000c48:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000c4a:	4b94      	ldr	r3, [pc, #592]	; (8000e9c <HAL_RCC_OscConfig+0x270>)
 8000c4c:	68db      	ldr	r3, [r3, #12]
 8000c4e:	f003 0303 	and.w	r3, r3, #3
 8000c52:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f003 0310 	and.w	r3, r3, #16
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	f000 80e4 	beq.w	8000e2a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000c62:	69bb      	ldr	r3, [r7, #24]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d007      	beq.n	8000c78 <HAL_RCC_OscConfig+0x4c>
 8000c68:	69bb      	ldr	r3, [r7, #24]
 8000c6a:	2b0c      	cmp	r3, #12
 8000c6c:	f040 808b 	bne.w	8000d86 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	f040 8087 	bne.w	8000d86 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000c78:	4b88      	ldr	r3, [pc, #544]	; (8000e9c <HAL_RCC_OscConfig+0x270>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f003 0302 	and.w	r3, r3, #2
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d005      	beq.n	8000c90 <HAL_RCC_OscConfig+0x64>
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	699b      	ldr	r3, [r3, #24]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d101      	bne.n	8000c90 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	e3d9      	b.n	8001444 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	6a1a      	ldr	r2, [r3, #32]
 8000c94:	4b81      	ldr	r3, [pc, #516]	; (8000e9c <HAL_RCC_OscConfig+0x270>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f003 0308 	and.w	r3, r3, #8
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d004      	beq.n	8000caa <HAL_RCC_OscConfig+0x7e>
 8000ca0:	4b7e      	ldr	r3, [pc, #504]	; (8000e9c <HAL_RCC_OscConfig+0x270>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000ca8:	e005      	b.n	8000cb6 <HAL_RCC_OscConfig+0x8a>
 8000caa:	4b7c      	ldr	r3, [pc, #496]	; (8000e9c <HAL_RCC_OscConfig+0x270>)
 8000cac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000cb0:	091b      	lsrs	r3, r3, #4
 8000cb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d223      	bcs.n	8000d02 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6a1b      	ldr	r3, [r3, #32]
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f000 fd54 	bl	800176c <RCC_SetFlashLatencyFromMSIRange>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e3ba      	b.n	8001444 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000cce:	4b73      	ldr	r3, [pc, #460]	; (8000e9c <HAL_RCC_OscConfig+0x270>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4a72      	ldr	r2, [pc, #456]	; (8000e9c <HAL_RCC_OscConfig+0x270>)
 8000cd4:	f043 0308 	orr.w	r3, r3, #8
 8000cd8:	6013      	str	r3, [r2, #0]
 8000cda:	4b70      	ldr	r3, [pc, #448]	; (8000e9c <HAL_RCC_OscConfig+0x270>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6a1b      	ldr	r3, [r3, #32]
 8000ce6:	496d      	ldr	r1, [pc, #436]	; (8000e9c <HAL_RCC_OscConfig+0x270>)
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000cec:	4b6b      	ldr	r3, [pc, #428]	; (8000e9c <HAL_RCC_OscConfig+0x270>)
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	69db      	ldr	r3, [r3, #28]
 8000cf8:	021b      	lsls	r3, r3, #8
 8000cfa:	4968      	ldr	r1, [pc, #416]	; (8000e9c <HAL_RCC_OscConfig+0x270>)
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	604b      	str	r3, [r1, #4]
 8000d00:	e025      	b.n	8000d4e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d02:	4b66      	ldr	r3, [pc, #408]	; (8000e9c <HAL_RCC_OscConfig+0x270>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4a65      	ldr	r2, [pc, #404]	; (8000e9c <HAL_RCC_OscConfig+0x270>)
 8000d08:	f043 0308 	orr.w	r3, r3, #8
 8000d0c:	6013      	str	r3, [r2, #0]
 8000d0e:	4b63      	ldr	r3, [pc, #396]	; (8000e9c <HAL_RCC_OscConfig+0x270>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	6a1b      	ldr	r3, [r3, #32]
 8000d1a:	4960      	ldr	r1, [pc, #384]	; (8000e9c <HAL_RCC_OscConfig+0x270>)
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d20:	4b5e      	ldr	r3, [pc, #376]	; (8000e9c <HAL_RCC_OscConfig+0x270>)
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	69db      	ldr	r3, [r3, #28]
 8000d2c:	021b      	lsls	r3, r3, #8
 8000d2e:	495b      	ldr	r1, [pc, #364]	; (8000e9c <HAL_RCC_OscConfig+0x270>)
 8000d30:	4313      	orrs	r3, r2
 8000d32:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000d34:	69bb      	ldr	r3, [r7, #24]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d109      	bne.n	8000d4e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6a1b      	ldr	r3, [r3, #32]
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f000 fd14 	bl	800176c <RCC_SetFlashLatencyFromMSIRange>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	e37a      	b.n	8001444 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000d4e:	f000 fc81 	bl	8001654 <HAL_RCC_GetSysClockFreq>
 8000d52:	4602      	mov	r2, r0
 8000d54:	4b51      	ldr	r3, [pc, #324]	; (8000e9c <HAL_RCC_OscConfig+0x270>)
 8000d56:	689b      	ldr	r3, [r3, #8]
 8000d58:	091b      	lsrs	r3, r3, #4
 8000d5a:	f003 030f 	and.w	r3, r3, #15
 8000d5e:	4950      	ldr	r1, [pc, #320]	; (8000ea0 <HAL_RCC_OscConfig+0x274>)
 8000d60:	5ccb      	ldrb	r3, [r1, r3]
 8000d62:	f003 031f 	and.w	r3, r3, #31
 8000d66:	fa22 f303 	lsr.w	r3, r2, r3
 8000d6a:	4a4e      	ldr	r2, [pc, #312]	; (8000ea4 <HAL_RCC_OscConfig+0x278>)
 8000d6c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000d6e:	4b4e      	ldr	r3, [pc, #312]	; (8000ea8 <HAL_RCC_OscConfig+0x27c>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4618      	mov	r0, r3
 8000d74:	f7ff fc4a 	bl	800060c <HAL_InitTick>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000d7c:	7bfb      	ldrb	r3, [r7, #15]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d052      	beq.n	8000e28 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8000d82:	7bfb      	ldrb	r3, [r7, #15]
 8000d84:	e35e      	b.n	8001444 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	699b      	ldr	r3, [r3, #24]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d032      	beq.n	8000df4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000d8e:	4b43      	ldr	r3, [pc, #268]	; (8000e9c <HAL_RCC_OscConfig+0x270>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a42      	ldr	r2, [pc, #264]	; (8000e9c <HAL_RCC_OscConfig+0x270>)
 8000d94:	f043 0301 	orr.w	r3, r3, #1
 8000d98:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000d9a:	f7ff fc87 	bl	80006ac <HAL_GetTick>
 8000d9e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000da0:	e008      	b.n	8000db4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000da2:	f7ff fc83 	bl	80006ac <HAL_GetTick>
 8000da6:	4602      	mov	r2, r0
 8000da8:	693b      	ldr	r3, [r7, #16]
 8000daa:	1ad3      	subs	r3, r2, r3
 8000dac:	2b02      	cmp	r3, #2
 8000dae:	d901      	bls.n	8000db4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8000db0:	2303      	movs	r3, #3
 8000db2:	e347      	b.n	8001444 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000db4:	4b39      	ldr	r3, [pc, #228]	; (8000e9c <HAL_RCC_OscConfig+0x270>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f003 0302 	and.w	r3, r3, #2
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d0f0      	beq.n	8000da2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000dc0:	4b36      	ldr	r3, [pc, #216]	; (8000e9c <HAL_RCC_OscConfig+0x270>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a35      	ldr	r2, [pc, #212]	; (8000e9c <HAL_RCC_OscConfig+0x270>)
 8000dc6:	f043 0308 	orr.w	r3, r3, #8
 8000dca:	6013      	str	r3, [r2, #0]
 8000dcc:	4b33      	ldr	r3, [pc, #204]	; (8000e9c <HAL_RCC_OscConfig+0x270>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6a1b      	ldr	r3, [r3, #32]
 8000dd8:	4930      	ldr	r1, [pc, #192]	; (8000e9c <HAL_RCC_OscConfig+0x270>)
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000dde:	4b2f      	ldr	r3, [pc, #188]	; (8000e9c <HAL_RCC_OscConfig+0x270>)
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	69db      	ldr	r3, [r3, #28]
 8000dea:	021b      	lsls	r3, r3, #8
 8000dec:	492b      	ldr	r1, [pc, #172]	; (8000e9c <HAL_RCC_OscConfig+0x270>)
 8000dee:	4313      	orrs	r3, r2
 8000df0:	604b      	str	r3, [r1, #4]
 8000df2:	e01a      	b.n	8000e2a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000df4:	4b29      	ldr	r3, [pc, #164]	; (8000e9c <HAL_RCC_OscConfig+0x270>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a28      	ldr	r2, [pc, #160]	; (8000e9c <HAL_RCC_OscConfig+0x270>)
 8000dfa:	f023 0301 	bic.w	r3, r3, #1
 8000dfe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000e00:	f7ff fc54 	bl	80006ac <HAL_GetTick>
 8000e04:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000e06:	e008      	b.n	8000e1a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e08:	f7ff fc50 	bl	80006ac <HAL_GetTick>
 8000e0c:	4602      	mov	r2, r0
 8000e0e:	693b      	ldr	r3, [r7, #16]
 8000e10:	1ad3      	subs	r3, r2, r3
 8000e12:	2b02      	cmp	r3, #2
 8000e14:	d901      	bls.n	8000e1a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8000e16:	2303      	movs	r3, #3
 8000e18:	e314      	b.n	8001444 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000e1a:	4b20      	ldr	r3, [pc, #128]	; (8000e9c <HAL_RCC_OscConfig+0x270>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f003 0302 	and.w	r3, r3, #2
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d1f0      	bne.n	8000e08 <HAL_RCC_OscConfig+0x1dc>
 8000e26:	e000      	b.n	8000e2a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e28:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f003 0301 	and.w	r3, r3, #1
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d073      	beq.n	8000f1e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000e36:	69bb      	ldr	r3, [r7, #24]
 8000e38:	2b08      	cmp	r3, #8
 8000e3a:	d005      	beq.n	8000e48 <HAL_RCC_OscConfig+0x21c>
 8000e3c:	69bb      	ldr	r3, [r7, #24]
 8000e3e:	2b0c      	cmp	r3, #12
 8000e40:	d10e      	bne.n	8000e60 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	2b03      	cmp	r3, #3
 8000e46:	d10b      	bne.n	8000e60 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e48:	4b14      	ldr	r3, [pc, #80]	; (8000e9c <HAL_RCC_OscConfig+0x270>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d063      	beq.n	8000f1c <HAL_RCC_OscConfig+0x2f0>
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d15f      	bne.n	8000f1c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	e2f1      	b.n	8001444 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e68:	d106      	bne.n	8000e78 <HAL_RCC_OscConfig+0x24c>
 8000e6a:	4b0c      	ldr	r3, [pc, #48]	; (8000e9c <HAL_RCC_OscConfig+0x270>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a0b      	ldr	r2, [pc, #44]	; (8000e9c <HAL_RCC_OscConfig+0x270>)
 8000e70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e74:	6013      	str	r3, [r2, #0]
 8000e76:	e025      	b.n	8000ec4 <HAL_RCC_OscConfig+0x298>
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e80:	d114      	bne.n	8000eac <HAL_RCC_OscConfig+0x280>
 8000e82:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <HAL_RCC_OscConfig+0x270>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a05      	ldr	r2, [pc, #20]	; (8000e9c <HAL_RCC_OscConfig+0x270>)
 8000e88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e8c:	6013      	str	r3, [r2, #0]
 8000e8e:	4b03      	ldr	r3, [pc, #12]	; (8000e9c <HAL_RCC_OscConfig+0x270>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a02      	ldr	r2, [pc, #8]	; (8000e9c <HAL_RCC_OscConfig+0x270>)
 8000e94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e98:	6013      	str	r3, [r2, #0]
 8000e9a:	e013      	b.n	8000ec4 <HAL_RCC_OscConfig+0x298>
 8000e9c:	40021000 	.word	0x40021000
 8000ea0:	08002884 	.word	0x08002884
 8000ea4:	20000000 	.word	0x20000000
 8000ea8:	20000004 	.word	0x20000004
 8000eac:	4ba0      	ldr	r3, [pc, #640]	; (8001130 <HAL_RCC_OscConfig+0x504>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a9f      	ldr	r2, [pc, #636]	; (8001130 <HAL_RCC_OscConfig+0x504>)
 8000eb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000eb6:	6013      	str	r3, [r2, #0]
 8000eb8:	4b9d      	ldr	r3, [pc, #628]	; (8001130 <HAL_RCC_OscConfig+0x504>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a9c      	ldr	r2, [pc, #624]	; (8001130 <HAL_RCC_OscConfig+0x504>)
 8000ebe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ec2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d013      	beq.n	8000ef4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ecc:	f7ff fbee 	bl	80006ac <HAL_GetTick>
 8000ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000ed2:	e008      	b.n	8000ee6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ed4:	f7ff fbea 	bl	80006ac <HAL_GetTick>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	1ad3      	subs	r3, r2, r3
 8000ede:	2b64      	cmp	r3, #100	; 0x64
 8000ee0:	d901      	bls.n	8000ee6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	e2ae      	b.n	8001444 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000ee6:	4b92      	ldr	r3, [pc, #584]	; (8001130 <HAL_RCC_OscConfig+0x504>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d0f0      	beq.n	8000ed4 <HAL_RCC_OscConfig+0x2a8>
 8000ef2:	e014      	b.n	8000f1e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ef4:	f7ff fbda 	bl	80006ac <HAL_GetTick>
 8000ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000efa:	e008      	b.n	8000f0e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000efc:	f7ff fbd6 	bl	80006ac <HAL_GetTick>
 8000f00:	4602      	mov	r2, r0
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	1ad3      	subs	r3, r2, r3
 8000f06:	2b64      	cmp	r3, #100	; 0x64
 8000f08:	d901      	bls.n	8000f0e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	e29a      	b.n	8001444 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f0e:	4b88      	ldr	r3, [pc, #544]	; (8001130 <HAL_RCC_OscConfig+0x504>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d1f0      	bne.n	8000efc <HAL_RCC_OscConfig+0x2d0>
 8000f1a:	e000      	b.n	8000f1e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f003 0302 	and.w	r3, r3, #2
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d060      	beq.n	8000fec <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000f2a:	69bb      	ldr	r3, [r7, #24]
 8000f2c:	2b04      	cmp	r3, #4
 8000f2e:	d005      	beq.n	8000f3c <HAL_RCC_OscConfig+0x310>
 8000f30:	69bb      	ldr	r3, [r7, #24]
 8000f32:	2b0c      	cmp	r3, #12
 8000f34:	d119      	bne.n	8000f6a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	2b02      	cmp	r3, #2
 8000f3a:	d116      	bne.n	8000f6a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f3c:	4b7c      	ldr	r3, [pc, #496]	; (8001130 <HAL_RCC_OscConfig+0x504>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d005      	beq.n	8000f54 <HAL_RCC_OscConfig+0x328>
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d101      	bne.n	8000f54 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8000f50:	2301      	movs	r3, #1
 8000f52:	e277      	b.n	8001444 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f54:	4b76      	ldr	r3, [pc, #472]	; (8001130 <HAL_RCC_OscConfig+0x504>)
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	691b      	ldr	r3, [r3, #16]
 8000f60:	061b      	lsls	r3, r3, #24
 8000f62:	4973      	ldr	r1, [pc, #460]	; (8001130 <HAL_RCC_OscConfig+0x504>)
 8000f64:	4313      	orrs	r3, r2
 8000f66:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f68:	e040      	b.n	8000fec <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	68db      	ldr	r3, [r3, #12]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d023      	beq.n	8000fba <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f72:	4b6f      	ldr	r3, [pc, #444]	; (8001130 <HAL_RCC_OscConfig+0x504>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4a6e      	ldr	r2, [pc, #440]	; (8001130 <HAL_RCC_OscConfig+0x504>)
 8000f78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f7e:	f7ff fb95 	bl	80006ac <HAL_GetTick>
 8000f82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f84:	e008      	b.n	8000f98 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f86:	f7ff fb91 	bl	80006ac <HAL_GetTick>
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	1ad3      	subs	r3, r2, r3
 8000f90:	2b02      	cmp	r3, #2
 8000f92:	d901      	bls.n	8000f98 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8000f94:	2303      	movs	r3, #3
 8000f96:	e255      	b.n	8001444 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f98:	4b65      	ldr	r3, [pc, #404]	; (8001130 <HAL_RCC_OscConfig+0x504>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d0f0      	beq.n	8000f86 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fa4:	4b62      	ldr	r3, [pc, #392]	; (8001130 <HAL_RCC_OscConfig+0x504>)
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	691b      	ldr	r3, [r3, #16]
 8000fb0:	061b      	lsls	r3, r3, #24
 8000fb2:	495f      	ldr	r1, [pc, #380]	; (8001130 <HAL_RCC_OscConfig+0x504>)
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	604b      	str	r3, [r1, #4]
 8000fb8:	e018      	b.n	8000fec <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fba:	4b5d      	ldr	r3, [pc, #372]	; (8001130 <HAL_RCC_OscConfig+0x504>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a5c      	ldr	r2, [pc, #368]	; (8001130 <HAL_RCC_OscConfig+0x504>)
 8000fc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000fc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fc6:	f7ff fb71 	bl	80006ac <HAL_GetTick>
 8000fca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000fcc:	e008      	b.n	8000fe0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fce:	f7ff fb6d 	bl	80006ac <HAL_GetTick>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	1ad3      	subs	r3, r2, r3
 8000fd8:	2b02      	cmp	r3, #2
 8000fda:	d901      	bls.n	8000fe0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8000fdc:	2303      	movs	r3, #3
 8000fde:	e231      	b.n	8001444 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000fe0:	4b53      	ldr	r3, [pc, #332]	; (8001130 <HAL_RCC_OscConfig+0x504>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d1f0      	bne.n	8000fce <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f003 0308 	and.w	r3, r3, #8
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d03c      	beq.n	8001072 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	695b      	ldr	r3, [r3, #20]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d01c      	beq.n	800103a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001000:	4b4b      	ldr	r3, [pc, #300]	; (8001130 <HAL_RCC_OscConfig+0x504>)
 8001002:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001006:	4a4a      	ldr	r2, [pc, #296]	; (8001130 <HAL_RCC_OscConfig+0x504>)
 8001008:	f043 0301 	orr.w	r3, r3, #1
 800100c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001010:	f7ff fb4c 	bl	80006ac <HAL_GetTick>
 8001014:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001016:	e008      	b.n	800102a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001018:	f7ff fb48 	bl	80006ac <HAL_GetTick>
 800101c:	4602      	mov	r2, r0
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	2b02      	cmp	r3, #2
 8001024:	d901      	bls.n	800102a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001026:	2303      	movs	r3, #3
 8001028:	e20c      	b.n	8001444 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800102a:	4b41      	ldr	r3, [pc, #260]	; (8001130 <HAL_RCC_OscConfig+0x504>)
 800102c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001030:	f003 0302 	and.w	r3, r3, #2
 8001034:	2b00      	cmp	r3, #0
 8001036:	d0ef      	beq.n	8001018 <HAL_RCC_OscConfig+0x3ec>
 8001038:	e01b      	b.n	8001072 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800103a:	4b3d      	ldr	r3, [pc, #244]	; (8001130 <HAL_RCC_OscConfig+0x504>)
 800103c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001040:	4a3b      	ldr	r2, [pc, #236]	; (8001130 <HAL_RCC_OscConfig+0x504>)
 8001042:	f023 0301 	bic.w	r3, r3, #1
 8001046:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800104a:	f7ff fb2f 	bl	80006ac <HAL_GetTick>
 800104e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001050:	e008      	b.n	8001064 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001052:	f7ff fb2b 	bl	80006ac <HAL_GetTick>
 8001056:	4602      	mov	r2, r0
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	1ad3      	subs	r3, r2, r3
 800105c:	2b02      	cmp	r3, #2
 800105e:	d901      	bls.n	8001064 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001060:	2303      	movs	r3, #3
 8001062:	e1ef      	b.n	8001444 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001064:	4b32      	ldr	r3, [pc, #200]	; (8001130 <HAL_RCC_OscConfig+0x504>)
 8001066:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800106a:	f003 0302 	and.w	r3, r3, #2
 800106e:	2b00      	cmp	r3, #0
 8001070:	d1ef      	bne.n	8001052 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f003 0304 	and.w	r3, r3, #4
 800107a:	2b00      	cmp	r3, #0
 800107c:	f000 80a6 	beq.w	80011cc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001080:	2300      	movs	r3, #0
 8001082:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001084:	4b2a      	ldr	r3, [pc, #168]	; (8001130 <HAL_RCC_OscConfig+0x504>)
 8001086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001088:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800108c:	2b00      	cmp	r3, #0
 800108e:	d10d      	bne.n	80010ac <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001090:	4b27      	ldr	r3, [pc, #156]	; (8001130 <HAL_RCC_OscConfig+0x504>)
 8001092:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001094:	4a26      	ldr	r2, [pc, #152]	; (8001130 <HAL_RCC_OscConfig+0x504>)
 8001096:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800109a:	6593      	str	r3, [r2, #88]	; 0x58
 800109c:	4b24      	ldr	r3, [pc, #144]	; (8001130 <HAL_RCC_OscConfig+0x504>)
 800109e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010a4:	60bb      	str	r3, [r7, #8]
 80010a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80010a8:	2301      	movs	r3, #1
 80010aa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010ac:	4b21      	ldr	r3, [pc, #132]	; (8001134 <HAL_RCC_OscConfig+0x508>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d118      	bne.n	80010ea <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80010b8:	4b1e      	ldr	r3, [pc, #120]	; (8001134 <HAL_RCC_OscConfig+0x508>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a1d      	ldr	r2, [pc, #116]	; (8001134 <HAL_RCC_OscConfig+0x508>)
 80010be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010c4:	f7ff faf2 	bl	80006ac <HAL_GetTick>
 80010c8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010ca:	e008      	b.n	80010de <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010cc:	f7ff faee 	bl	80006ac <HAL_GetTick>
 80010d0:	4602      	mov	r2, r0
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	2b02      	cmp	r3, #2
 80010d8:	d901      	bls.n	80010de <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80010da:	2303      	movs	r3, #3
 80010dc:	e1b2      	b.n	8001444 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010de:	4b15      	ldr	r3, [pc, #84]	; (8001134 <HAL_RCC_OscConfig+0x508>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d0f0      	beq.n	80010cc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d108      	bne.n	8001104 <HAL_RCC_OscConfig+0x4d8>
 80010f2:	4b0f      	ldr	r3, [pc, #60]	; (8001130 <HAL_RCC_OscConfig+0x504>)
 80010f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010f8:	4a0d      	ldr	r2, [pc, #52]	; (8001130 <HAL_RCC_OscConfig+0x504>)
 80010fa:	f043 0301 	orr.w	r3, r3, #1
 80010fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001102:	e029      	b.n	8001158 <HAL_RCC_OscConfig+0x52c>
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	2b05      	cmp	r3, #5
 800110a:	d115      	bne.n	8001138 <HAL_RCC_OscConfig+0x50c>
 800110c:	4b08      	ldr	r3, [pc, #32]	; (8001130 <HAL_RCC_OscConfig+0x504>)
 800110e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001112:	4a07      	ldr	r2, [pc, #28]	; (8001130 <HAL_RCC_OscConfig+0x504>)
 8001114:	f043 0304 	orr.w	r3, r3, #4
 8001118:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800111c:	4b04      	ldr	r3, [pc, #16]	; (8001130 <HAL_RCC_OscConfig+0x504>)
 800111e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001122:	4a03      	ldr	r2, [pc, #12]	; (8001130 <HAL_RCC_OscConfig+0x504>)
 8001124:	f043 0301 	orr.w	r3, r3, #1
 8001128:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800112c:	e014      	b.n	8001158 <HAL_RCC_OscConfig+0x52c>
 800112e:	bf00      	nop
 8001130:	40021000 	.word	0x40021000
 8001134:	40007000 	.word	0x40007000
 8001138:	4b9a      	ldr	r3, [pc, #616]	; (80013a4 <HAL_RCC_OscConfig+0x778>)
 800113a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800113e:	4a99      	ldr	r2, [pc, #612]	; (80013a4 <HAL_RCC_OscConfig+0x778>)
 8001140:	f023 0301 	bic.w	r3, r3, #1
 8001144:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001148:	4b96      	ldr	r3, [pc, #600]	; (80013a4 <HAL_RCC_OscConfig+0x778>)
 800114a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800114e:	4a95      	ldr	r2, [pc, #596]	; (80013a4 <HAL_RCC_OscConfig+0x778>)
 8001150:	f023 0304 	bic.w	r3, r3, #4
 8001154:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d016      	beq.n	800118e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001160:	f7ff faa4 	bl	80006ac <HAL_GetTick>
 8001164:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001166:	e00a      	b.n	800117e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001168:	f7ff faa0 	bl	80006ac <HAL_GetTick>
 800116c:	4602      	mov	r2, r0
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	f241 3288 	movw	r2, #5000	; 0x1388
 8001176:	4293      	cmp	r3, r2
 8001178:	d901      	bls.n	800117e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800117a:	2303      	movs	r3, #3
 800117c:	e162      	b.n	8001444 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800117e:	4b89      	ldr	r3, [pc, #548]	; (80013a4 <HAL_RCC_OscConfig+0x778>)
 8001180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001184:	f003 0302 	and.w	r3, r3, #2
 8001188:	2b00      	cmp	r3, #0
 800118a:	d0ed      	beq.n	8001168 <HAL_RCC_OscConfig+0x53c>
 800118c:	e015      	b.n	80011ba <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800118e:	f7ff fa8d 	bl	80006ac <HAL_GetTick>
 8001192:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001194:	e00a      	b.n	80011ac <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001196:	f7ff fa89 	bl	80006ac <HAL_GetTick>
 800119a:	4602      	mov	r2, r0
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	1ad3      	subs	r3, r2, r3
 80011a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d901      	bls.n	80011ac <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80011a8:	2303      	movs	r3, #3
 80011aa:	e14b      	b.n	8001444 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80011ac:	4b7d      	ldr	r3, [pc, #500]	; (80013a4 <HAL_RCC_OscConfig+0x778>)
 80011ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011b2:	f003 0302 	and.w	r3, r3, #2
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d1ed      	bne.n	8001196 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80011ba:	7ffb      	ldrb	r3, [r7, #31]
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d105      	bne.n	80011cc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011c0:	4b78      	ldr	r3, [pc, #480]	; (80013a4 <HAL_RCC_OscConfig+0x778>)
 80011c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011c4:	4a77      	ldr	r2, [pc, #476]	; (80013a4 <HAL_RCC_OscConfig+0x778>)
 80011c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011ca:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f003 0320 	and.w	r3, r3, #32
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d03c      	beq.n	8001252 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d01c      	beq.n	800121a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80011e0:	4b70      	ldr	r3, [pc, #448]	; (80013a4 <HAL_RCC_OscConfig+0x778>)
 80011e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80011e6:	4a6f      	ldr	r2, [pc, #444]	; (80013a4 <HAL_RCC_OscConfig+0x778>)
 80011e8:	f043 0301 	orr.w	r3, r3, #1
 80011ec:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011f0:	f7ff fa5c 	bl	80006ac <HAL_GetTick>
 80011f4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80011f6:	e008      	b.n	800120a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80011f8:	f7ff fa58 	bl	80006ac <HAL_GetTick>
 80011fc:	4602      	mov	r2, r0
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	2b02      	cmp	r3, #2
 8001204:	d901      	bls.n	800120a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001206:	2303      	movs	r3, #3
 8001208:	e11c      	b.n	8001444 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800120a:	4b66      	ldr	r3, [pc, #408]	; (80013a4 <HAL_RCC_OscConfig+0x778>)
 800120c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001210:	f003 0302 	and.w	r3, r3, #2
 8001214:	2b00      	cmp	r3, #0
 8001216:	d0ef      	beq.n	80011f8 <HAL_RCC_OscConfig+0x5cc>
 8001218:	e01b      	b.n	8001252 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800121a:	4b62      	ldr	r3, [pc, #392]	; (80013a4 <HAL_RCC_OscConfig+0x778>)
 800121c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001220:	4a60      	ldr	r2, [pc, #384]	; (80013a4 <HAL_RCC_OscConfig+0x778>)
 8001222:	f023 0301 	bic.w	r3, r3, #1
 8001226:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800122a:	f7ff fa3f 	bl	80006ac <HAL_GetTick>
 800122e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001230:	e008      	b.n	8001244 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001232:	f7ff fa3b 	bl	80006ac <HAL_GetTick>
 8001236:	4602      	mov	r2, r0
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	1ad3      	subs	r3, r2, r3
 800123c:	2b02      	cmp	r3, #2
 800123e:	d901      	bls.n	8001244 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001240:	2303      	movs	r3, #3
 8001242:	e0ff      	b.n	8001444 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001244:	4b57      	ldr	r3, [pc, #348]	; (80013a4 <HAL_RCC_OscConfig+0x778>)
 8001246:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800124a:	f003 0302 	and.w	r3, r3, #2
 800124e:	2b00      	cmp	r3, #0
 8001250:	d1ef      	bne.n	8001232 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001256:	2b00      	cmp	r3, #0
 8001258:	f000 80f3 	beq.w	8001442 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001260:	2b02      	cmp	r3, #2
 8001262:	f040 80c9 	bne.w	80013f8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001266:	4b4f      	ldr	r3, [pc, #316]	; (80013a4 <HAL_RCC_OscConfig+0x778>)
 8001268:	68db      	ldr	r3, [r3, #12]
 800126a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	f003 0203 	and.w	r2, r3, #3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001276:	429a      	cmp	r2, r3
 8001278:	d12c      	bne.n	80012d4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001284:	3b01      	subs	r3, #1
 8001286:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001288:	429a      	cmp	r2, r3
 800128a:	d123      	bne.n	80012d4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001296:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001298:	429a      	cmp	r2, r3
 800129a:	d11b      	bne.n	80012d4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012a6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d113      	bne.n	80012d4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012b6:	085b      	lsrs	r3, r3, #1
 80012b8:	3b01      	subs	r3, #1
 80012ba:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80012bc:	429a      	cmp	r2, r3
 80012be:	d109      	bne.n	80012d4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ca:	085b      	lsrs	r3, r3, #1
 80012cc:	3b01      	subs	r3, #1
 80012ce:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d06b      	beq.n	80013ac <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	2b0c      	cmp	r3, #12
 80012d8:	d062      	beq.n	80013a0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80012da:	4b32      	ldr	r3, [pc, #200]	; (80013a4 <HAL_RCC_OscConfig+0x778>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e0ac      	b.n	8001444 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80012ea:	4b2e      	ldr	r3, [pc, #184]	; (80013a4 <HAL_RCC_OscConfig+0x778>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a2d      	ldr	r2, [pc, #180]	; (80013a4 <HAL_RCC_OscConfig+0x778>)
 80012f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80012f4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80012f6:	f7ff f9d9 	bl	80006ac <HAL_GetTick>
 80012fa:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012fc:	e008      	b.n	8001310 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012fe:	f7ff f9d5 	bl	80006ac <HAL_GetTick>
 8001302:	4602      	mov	r2, r0
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	1ad3      	subs	r3, r2, r3
 8001308:	2b02      	cmp	r3, #2
 800130a:	d901      	bls.n	8001310 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800130c:	2303      	movs	r3, #3
 800130e:	e099      	b.n	8001444 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001310:	4b24      	ldr	r3, [pc, #144]	; (80013a4 <HAL_RCC_OscConfig+0x778>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001318:	2b00      	cmp	r3, #0
 800131a:	d1f0      	bne.n	80012fe <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800131c:	4b21      	ldr	r3, [pc, #132]	; (80013a4 <HAL_RCC_OscConfig+0x778>)
 800131e:	68da      	ldr	r2, [r3, #12]
 8001320:	4b21      	ldr	r3, [pc, #132]	; (80013a8 <HAL_RCC_OscConfig+0x77c>)
 8001322:	4013      	ands	r3, r2
 8001324:	687a      	ldr	r2, [r7, #4]
 8001326:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001328:	687a      	ldr	r2, [r7, #4]
 800132a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800132c:	3a01      	subs	r2, #1
 800132e:	0112      	lsls	r2, r2, #4
 8001330:	4311      	orrs	r1, r2
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001336:	0212      	lsls	r2, r2, #8
 8001338:	4311      	orrs	r1, r2
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800133e:	0852      	lsrs	r2, r2, #1
 8001340:	3a01      	subs	r2, #1
 8001342:	0552      	lsls	r2, r2, #21
 8001344:	4311      	orrs	r1, r2
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800134a:	0852      	lsrs	r2, r2, #1
 800134c:	3a01      	subs	r2, #1
 800134e:	0652      	lsls	r2, r2, #25
 8001350:	4311      	orrs	r1, r2
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001356:	06d2      	lsls	r2, r2, #27
 8001358:	430a      	orrs	r2, r1
 800135a:	4912      	ldr	r1, [pc, #72]	; (80013a4 <HAL_RCC_OscConfig+0x778>)
 800135c:	4313      	orrs	r3, r2
 800135e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001360:	4b10      	ldr	r3, [pc, #64]	; (80013a4 <HAL_RCC_OscConfig+0x778>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a0f      	ldr	r2, [pc, #60]	; (80013a4 <HAL_RCC_OscConfig+0x778>)
 8001366:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800136a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800136c:	4b0d      	ldr	r3, [pc, #52]	; (80013a4 <HAL_RCC_OscConfig+0x778>)
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	4a0c      	ldr	r2, [pc, #48]	; (80013a4 <HAL_RCC_OscConfig+0x778>)
 8001372:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001376:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001378:	f7ff f998 	bl	80006ac <HAL_GetTick>
 800137c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800137e:	e008      	b.n	8001392 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001380:	f7ff f994 	bl	80006ac <HAL_GetTick>
 8001384:	4602      	mov	r2, r0
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	2b02      	cmp	r3, #2
 800138c:	d901      	bls.n	8001392 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800138e:	2303      	movs	r3, #3
 8001390:	e058      	b.n	8001444 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001392:	4b04      	ldr	r3, [pc, #16]	; (80013a4 <HAL_RCC_OscConfig+0x778>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d0f0      	beq.n	8001380 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800139e:	e050      	b.n	8001442 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	e04f      	b.n	8001444 <HAL_RCC_OscConfig+0x818>
 80013a4:	40021000 	.word	0x40021000
 80013a8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013ac:	4b27      	ldr	r3, [pc, #156]	; (800144c <HAL_RCC_OscConfig+0x820>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d144      	bne.n	8001442 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80013b8:	4b24      	ldr	r3, [pc, #144]	; (800144c <HAL_RCC_OscConfig+0x820>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a23      	ldr	r2, [pc, #140]	; (800144c <HAL_RCC_OscConfig+0x820>)
 80013be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013c2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80013c4:	4b21      	ldr	r3, [pc, #132]	; (800144c <HAL_RCC_OscConfig+0x820>)
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	4a20      	ldr	r2, [pc, #128]	; (800144c <HAL_RCC_OscConfig+0x820>)
 80013ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013ce:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80013d0:	f7ff f96c 	bl	80006ac <HAL_GetTick>
 80013d4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013d6:	e008      	b.n	80013ea <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013d8:	f7ff f968 	bl	80006ac <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d901      	bls.n	80013ea <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80013e6:	2303      	movs	r3, #3
 80013e8:	e02c      	b.n	8001444 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013ea:	4b18      	ldr	r3, [pc, #96]	; (800144c <HAL_RCC_OscConfig+0x820>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d0f0      	beq.n	80013d8 <HAL_RCC_OscConfig+0x7ac>
 80013f6:	e024      	b.n	8001442 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	2b0c      	cmp	r3, #12
 80013fc:	d01f      	beq.n	800143e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013fe:	4b13      	ldr	r3, [pc, #76]	; (800144c <HAL_RCC_OscConfig+0x820>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a12      	ldr	r2, [pc, #72]	; (800144c <HAL_RCC_OscConfig+0x820>)
 8001404:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001408:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800140a:	f7ff f94f 	bl	80006ac <HAL_GetTick>
 800140e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001410:	e008      	b.n	8001424 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001412:	f7ff f94b 	bl	80006ac <HAL_GetTick>
 8001416:	4602      	mov	r2, r0
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	2b02      	cmp	r3, #2
 800141e:	d901      	bls.n	8001424 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001420:	2303      	movs	r3, #3
 8001422:	e00f      	b.n	8001444 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001424:	4b09      	ldr	r3, [pc, #36]	; (800144c <HAL_RCC_OscConfig+0x820>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800142c:	2b00      	cmp	r3, #0
 800142e:	d1f0      	bne.n	8001412 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001430:	4b06      	ldr	r3, [pc, #24]	; (800144c <HAL_RCC_OscConfig+0x820>)
 8001432:	68da      	ldr	r2, [r3, #12]
 8001434:	4905      	ldr	r1, [pc, #20]	; (800144c <HAL_RCC_OscConfig+0x820>)
 8001436:	4b06      	ldr	r3, [pc, #24]	; (8001450 <HAL_RCC_OscConfig+0x824>)
 8001438:	4013      	ands	r3, r2
 800143a:	60cb      	str	r3, [r1, #12]
 800143c:	e001      	b.n	8001442 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e000      	b.n	8001444 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001442:	2300      	movs	r3, #0
}
 8001444:	4618      	mov	r0, r3
 8001446:	3720      	adds	r7, #32
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40021000 	.word	0x40021000
 8001450:	feeefffc 	.word	0xfeeefffc

08001454 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d101      	bne.n	8001468 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e0e7      	b.n	8001638 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001468:	4b75      	ldr	r3, [pc, #468]	; (8001640 <HAL_RCC_ClockConfig+0x1ec>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f003 0307 	and.w	r3, r3, #7
 8001470:	683a      	ldr	r2, [r7, #0]
 8001472:	429a      	cmp	r2, r3
 8001474:	d910      	bls.n	8001498 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001476:	4b72      	ldr	r3, [pc, #456]	; (8001640 <HAL_RCC_ClockConfig+0x1ec>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f023 0207 	bic.w	r2, r3, #7
 800147e:	4970      	ldr	r1, [pc, #448]	; (8001640 <HAL_RCC_ClockConfig+0x1ec>)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	4313      	orrs	r3, r2
 8001484:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001486:	4b6e      	ldr	r3, [pc, #440]	; (8001640 <HAL_RCC_ClockConfig+0x1ec>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0307 	and.w	r3, r3, #7
 800148e:	683a      	ldr	r2, [r7, #0]
 8001490:	429a      	cmp	r2, r3
 8001492:	d001      	beq.n	8001498 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	e0cf      	b.n	8001638 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 0302 	and.w	r3, r3, #2
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d010      	beq.n	80014c6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	689a      	ldr	r2, [r3, #8]
 80014a8:	4b66      	ldr	r3, [pc, #408]	; (8001644 <HAL_RCC_ClockConfig+0x1f0>)
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d908      	bls.n	80014c6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014b4:	4b63      	ldr	r3, [pc, #396]	; (8001644 <HAL_RCC_ClockConfig+0x1f0>)
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	4960      	ldr	r1, [pc, #384]	; (8001644 <HAL_RCC_ClockConfig+0x1f0>)
 80014c2:	4313      	orrs	r3, r2
 80014c4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d04c      	beq.n	800156c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	2b03      	cmp	r3, #3
 80014d8:	d107      	bne.n	80014ea <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014da:	4b5a      	ldr	r3, [pc, #360]	; (8001644 <HAL_RCC_ClockConfig+0x1f0>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d121      	bne.n	800152a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e0a6      	b.n	8001638 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d107      	bne.n	8001502 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014f2:	4b54      	ldr	r3, [pc, #336]	; (8001644 <HAL_RCC_ClockConfig+0x1f0>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d115      	bne.n	800152a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e09a      	b.n	8001638 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d107      	bne.n	800151a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800150a:	4b4e      	ldr	r3, [pc, #312]	; (8001644 <HAL_RCC_ClockConfig+0x1f0>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0302 	and.w	r3, r3, #2
 8001512:	2b00      	cmp	r3, #0
 8001514:	d109      	bne.n	800152a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e08e      	b.n	8001638 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800151a:	4b4a      	ldr	r3, [pc, #296]	; (8001644 <HAL_RCC_ClockConfig+0x1f0>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001522:	2b00      	cmp	r3, #0
 8001524:	d101      	bne.n	800152a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e086      	b.n	8001638 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800152a:	4b46      	ldr	r3, [pc, #280]	; (8001644 <HAL_RCC_ClockConfig+0x1f0>)
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	f023 0203 	bic.w	r2, r3, #3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	4943      	ldr	r1, [pc, #268]	; (8001644 <HAL_RCC_ClockConfig+0x1f0>)
 8001538:	4313      	orrs	r3, r2
 800153a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800153c:	f7ff f8b6 	bl	80006ac <HAL_GetTick>
 8001540:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001542:	e00a      	b.n	800155a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001544:	f7ff f8b2 	bl	80006ac <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001552:	4293      	cmp	r3, r2
 8001554:	d901      	bls.n	800155a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e06e      	b.n	8001638 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800155a:	4b3a      	ldr	r3, [pc, #232]	; (8001644 <HAL_RCC_ClockConfig+0x1f0>)
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	f003 020c 	and.w	r2, r3, #12
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	429a      	cmp	r2, r3
 800156a:	d1eb      	bne.n	8001544 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 0302 	and.w	r3, r3, #2
 8001574:	2b00      	cmp	r3, #0
 8001576:	d010      	beq.n	800159a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	689a      	ldr	r2, [r3, #8]
 800157c:	4b31      	ldr	r3, [pc, #196]	; (8001644 <HAL_RCC_ClockConfig+0x1f0>)
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001584:	429a      	cmp	r2, r3
 8001586:	d208      	bcs.n	800159a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001588:	4b2e      	ldr	r3, [pc, #184]	; (8001644 <HAL_RCC_ClockConfig+0x1f0>)
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	492b      	ldr	r1, [pc, #172]	; (8001644 <HAL_RCC_ClockConfig+0x1f0>)
 8001596:	4313      	orrs	r3, r2
 8001598:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800159a:	4b29      	ldr	r3, [pc, #164]	; (8001640 <HAL_RCC_ClockConfig+0x1ec>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0307 	and.w	r3, r3, #7
 80015a2:	683a      	ldr	r2, [r7, #0]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d210      	bcs.n	80015ca <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015a8:	4b25      	ldr	r3, [pc, #148]	; (8001640 <HAL_RCC_ClockConfig+0x1ec>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f023 0207 	bic.w	r2, r3, #7
 80015b0:	4923      	ldr	r1, [pc, #140]	; (8001640 <HAL_RCC_ClockConfig+0x1ec>)
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015b8:	4b21      	ldr	r3, [pc, #132]	; (8001640 <HAL_RCC_ClockConfig+0x1ec>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0307 	and.w	r3, r3, #7
 80015c0:	683a      	ldr	r2, [r7, #0]
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d001      	beq.n	80015ca <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e036      	b.n	8001638 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0304 	and.w	r3, r3, #4
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d008      	beq.n	80015e8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015d6:	4b1b      	ldr	r3, [pc, #108]	; (8001644 <HAL_RCC_ClockConfig+0x1f0>)
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	68db      	ldr	r3, [r3, #12]
 80015e2:	4918      	ldr	r1, [pc, #96]	; (8001644 <HAL_RCC_ClockConfig+0x1f0>)
 80015e4:	4313      	orrs	r3, r2
 80015e6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0308 	and.w	r3, r3, #8
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d009      	beq.n	8001608 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015f4:	4b13      	ldr	r3, [pc, #76]	; (8001644 <HAL_RCC_ClockConfig+0x1f0>)
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	691b      	ldr	r3, [r3, #16]
 8001600:	00db      	lsls	r3, r3, #3
 8001602:	4910      	ldr	r1, [pc, #64]	; (8001644 <HAL_RCC_ClockConfig+0x1f0>)
 8001604:	4313      	orrs	r3, r2
 8001606:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001608:	f000 f824 	bl	8001654 <HAL_RCC_GetSysClockFreq>
 800160c:	4602      	mov	r2, r0
 800160e:	4b0d      	ldr	r3, [pc, #52]	; (8001644 <HAL_RCC_ClockConfig+0x1f0>)
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	091b      	lsrs	r3, r3, #4
 8001614:	f003 030f 	and.w	r3, r3, #15
 8001618:	490b      	ldr	r1, [pc, #44]	; (8001648 <HAL_RCC_ClockConfig+0x1f4>)
 800161a:	5ccb      	ldrb	r3, [r1, r3]
 800161c:	f003 031f 	and.w	r3, r3, #31
 8001620:	fa22 f303 	lsr.w	r3, r2, r3
 8001624:	4a09      	ldr	r2, [pc, #36]	; (800164c <HAL_RCC_ClockConfig+0x1f8>)
 8001626:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001628:	4b09      	ldr	r3, [pc, #36]	; (8001650 <HAL_RCC_ClockConfig+0x1fc>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4618      	mov	r0, r3
 800162e:	f7fe ffed 	bl	800060c <HAL_InitTick>
 8001632:	4603      	mov	r3, r0
 8001634:	72fb      	strb	r3, [r7, #11]

  return status;
 8001636:	7afb      	ldrb	r3, [r7, #11]
}
 8001638:	4618      	mov	r0, r3
 800163a:	3710      	adds	r7, #16
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	40022000 	.word	0x40022000
 8001644:	40021000 	.word	0x40021000
 8001648:	08002884 	.word	0x08002884
 800164c:	20000000 	.word	0x20000000
 8001650:	20000004 	.word	0x20000004

08001654 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001654:	b480      	push	{r7}
 8001656:	b089      	sub	sp, #36	; 0x24
 8001658:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800165a:	2300      	movs	r3, #0
 800165c:	61fb      	str	r3, [r7, #28]
 800165e:	2300      	movs	r3, #0
 8001660:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001662:	4b3e      	ldr	r3, [pc, #248]	; (800175c <HAL_RCC_GetSysClockFreq+0x108>)
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	f003 030c 	and.w	r3, r3, #12
 800166a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800166c:	4b3b      	ldr	r3, [pc, #236]	; (800175c <HAL_RCC_GetSysClockFreq+0x108>)
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	f003 0303 	and.w	r3, r3, #3
 8001674:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d005      	beq.n	8001688 <HAL_RCC_GetSysClockFreq+0x34>
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	2b0c      	cmp	r3, #12
 8001680:	d121      	bne.n	80016c6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	2b01      	cmp	r3, #1
 8001686:	d11e      	bne.n	80016c6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001688:	4b34      	ldr	r3, [pc, #208]	; (800175c <HAL_RCC_GetSysClockFreq+0x108>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0308 	and.w	r3, r3, #8
 8001690:	2b00      	cmp	r3, #0
 8001692:	d107      	bne.n	80016a4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001694:	4b31      	ldr	r3, [pc, #196]	; (800175c <HAL_RCC_GetSysClockFreq+0x108>)
 8001696:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800169a:	0a1b      	lsrs	r3, r3, #8
 800169c:	f003 030f 	and.w	r3, r3, #15
 80016a0:	61fb      	str	r3, [r7, #28]
 80016a2:	e005      	b.n	80016b0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80016a4:	4b2d      	ldr	r3, [pc, #180]	; (800175c <HAL_RCC_GetSysClockFreq+0x108>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	091b      	lsrs	r3, r3, #4
 80016aa:	f003 030f 	and.w	r3, r3, #15
 80016ae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80016b0:	4a2b      	ldr	r2, [pc, #172]	; (8001760 <HAL_RCC_GetSysClockFreq+0x10c>)
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016b8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d10d      	bne.n	80016dc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016c4:	e00a      	b.n	80016dc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	2b04      	cmp	r3, #4
 80016ca:	d102      	bne.n	80016d2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80016cc:	4b25      	ldr	r3, [pc, #148]	; (8001764 <HAL_RCC_GetSysClockFreq+0x110>)
 80016ce:	61bb      	str	r3, [r7, #24]
 80016d0:	e004      	b.n	80016dc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	2b08      	cmp	r3, #8
 80016d6:	d101      	bne.n	80016dc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80016d8:	4b23      	ldr	r3, [pc, #140]	; (8001768 <HAL_RCC_GetSysClockFreq+0x114>)
 80016da:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	2b0c      	cmp	r3, #12
 80016e0:	d134      	bne.n	800174c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80016e2:	4b1e      	ldr	r3, [pc, #120]	; (800175c <HAL_RCC_GetSysClockFreq+0x108>)
 80016e4:	68db      	ldr	r3, [r3, #12]
 80016e6:	f003 0303 	and.w	r3, r3, #3
 80016ea:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d003      	beq.n	80016fa <HAL_RCC_GetSysClockFreq+0xa6>
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	2b03      	cmp	r3, #3
 80016f6:	d003      	beq.n	8001700 <HAL_RCC_GetSysClockFreq+0xac>
 80016f8:	e005      	b.n	8001706 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80016fa:	4b1a      	ldr	r3, [pc, #104]	; (8001764 <HAL_RCC_GetSysClockFreq+0x110>)
 80016fc:	617b      	str	r3, [r7, #20]
      break;
 80016fe:	e005      	b.n	800170c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001700:	4b19      	ldr	r3, [pc, #100]	; (8001768 <HAL_RCC_GetSysClockFreq+0x114>)
 8001702:	617b      	str	r3, [r7, #20]
      break;
 8001704:	e002      	b.n	800170c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	617b      	str	r3, [r7, #20]
      break;
 800170a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800170c:	4b13      	ldr	r3, [pc, #76]	; (800175c <HAL_RCC_GetSysClockFreq+0x108>)
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	091b      	lsrs	r3, r3, #4
 8001712:	f003 0307 	and.w	r3, r3, #7
 8001716:	3301      	adds	r3, #1
 8001718:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800171a:	4b10      	ldr	r3, [pc, #64]	; (800175c <HAL_RCC_GetSysClockFreq+0x108>)
 800171c:	68db      	ldr	r3, [r3, #12]
 800171e:	0a1b      	lsrs	r3, r3, #8
 8001720:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001724:	697a      	ldr	r2, [r7, #20]
 8001726:	fb03 f202 	mul.w	r2, r3, r2
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001730:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001732:	4b0a      	ldr	r3, [pc, #40]	; (800175c <HAL_RCC_GetSysClockFreq+0x108>)
 8001734:	68db      	ldr	r3, [r3, #12]
 8001736:	0e5b      	lsrs	r3, r3, #25
 8001738:	f003 0303 	and.w	r3, r3, #3
 800173c:	3301      	adds	r3, #1
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001742:	697a      	ldr	r2, [r7, #20]
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	fbb2 f3f3 	udiv	r3, r2, r3
 800174a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800174c:	69bb      	ldr	r3, [r7, #24]
}
 800174e:	4618      	mov	r0, r3
 8001750:	3724      	adds	r7, #36	; 0x24
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	40021000 	.word	0x40021000
 8001760:	08002894 	.word	0x08002894
 8001764:	00f42400 	.word	0x00f42400
 8001768:	007a1200 	.word	0x007a1200

0800176c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b086      	sub	sp, #24
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001774:	2300      	movs	r3, #0
 8001776:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001778:	4b2a      	ldr	r3, [pc, #168]	; (8001824 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800177a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800177c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001780:	2b00      	cmp	r3, #0
 8001782:	d003      	beq.n	800178c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001784:	f7ff f9ee 	bl	8000b64 <HAL_PWREx_GetVoltageRange>
 8001788:	6178      	str	r0, [r7, #20]
 800178a:	e014      	b.n	80017b6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800178c:	4b25      	ldr	r3, [pc, #148]	; (8001824 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800178e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001790:	4a24      	ldr	r2, [pc, #144]	; (8001824 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001792:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001796:	6593      	str	r3, [r2, #88]	; 0x58
 8001798:	4b22      	ldr	r3, [pc, #136]	; (8001824 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800179a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800179c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a0:	60fb      	str	r3, [r7, #12]
 80017a2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80017a4:	f7ff f9de 	bl	8000b64 <HAL_PWREx_GetVoltageRange>
 80017a8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80017aa:	4b1e      	ldr	r3, [pc, #120]	; (8001824 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ae:	4a1d      	ldr	r2, [pc, #116]	; (8001824 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017b4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017bc:	d10b      	bne.n	80017d6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2b80      	cmp	r3, #128	; 0x80
 80017c2:	d919      	bls.n	80017f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2ba0      	cmp	r3, #160	; 0xa0
 80017c8:	d902      	bls.n	80017d0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80017ca:	2302      	movs	r3, #2
 80017cc:	613b      	str	r3, [r7, #16]
 80017ce:	e013      	b.n	80017f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80017d0:	2301      	movs	r3, #1
 80017d2:	613b      	str	r3, [r7, #16]
 80017d4:	e010      	b.n	80017f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2b80      	cmp	r3, #128	; 0x80
 80017da:	d902      	bls.n	80017e2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80017dc:	2303      	movs	r3, #3
 80017de:	613b      	str	r3, [r7, #16]
 80017e0:	e00a      	b.n	80017f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2b80      	cmp	r3, #128	; 0x80
 80017e6:	d102      	bne.n	80017ee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80017e8:	2302      	movs	r3, #2
 80017ea:	613b      	str	r3, [r7, #16]
 80017ec:	e004      	b.n	80017f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2b70      	cmp	r3, #112	; 0x70
 80017f2:	d101      	bne.n	80017f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80017f4:	2301      	movs	r3, #1
 80017f6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80017f8:	4b0b      	ldr	r3, [pc, #44]	; (8001828 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f023 0207 	bic.w	r2, r3, #7
 8001800:	4909      	ldr	r1, [pc, #36]	; (8001828 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	4313      	orrs	r3, r2
 8001806:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001808:	4b07      	ldr	r3, [pc, #28]	; (8001828 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0307 	and.w	r3, r3, #7
 8001810:	693a      	ldr	r2, [r7, #16]
 8001812:	429a      	cmp	r2, r3
 8001814:	d001      	beq.n	800181a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e000      	b.n	800181c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800181a:	2300      	movs	r3, #0
}
 800181c:	4618      	mov	r0, r3
 800181e:	3718      	adds	r7, #24
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	40021000 	.word	0x40021000
 8001828:	40022000 	.word	0x40022000

0800182c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d101      	bne.n	800183e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e049      	b.n	80018d2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001844:	b2db      	uxtb	r3, r3
 8001846:	2b00      	cmp	r3, #0
 8001848:	d106      	bne.n	8001858 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2200      	movs	r2, #0
 800184e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f7fe fe04 	bl	8000460 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2202      	movs	r2, #2
 800185c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	3304      	adds	r3, #4
 8001868:	4619      	mov	r1, r3
 800186a:	4610      	mov	r0, r2
 800186c:	f000 fb52 	bl	8001f14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2201      	movs	r2, #1
 8001874:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2201      	movs	r2, #1
 800187c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2201      	movs	r2, #1
 8001884:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2201      	movs	r2, #1
 800188c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2201      	movs	r2, #1
 8001894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2201      	movs	r2, #1
 800189c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2201      	movs	r2, #1
 80018a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2201      	movs	r2, #1
 80018ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2201      	movs	r2, #1
 80018b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2201      	movs	r2, #1
 80018bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2201      	movs	r2, #1
 80018c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2201      	movs	r2, #1
 80018cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80018da:	b580      	push	{r7, lr}
 80018dc:	b082      	sub	sp, #8
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d101      	bne.n	80018ec <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e049      	b.n	8001980 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d106      	bne.n	8001906 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2200      	movs	r2, #0
 80018fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f000 f841 	bl	8001988 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2202      	movs	r2, #2
 800190a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	3304      	adds	r3, #4
 8001916:	4619      	mov	r1, r3
 8001918:	4610      	mov	r0, r2
 800191a:	f000 fafb 	bl	8001f14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2201      	movs	r2, #1
 8001922:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2201      	movs	r2, #1
 800192a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2201      	movs	r2, #1
 8001932:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2201      	movs	r2, #1
 800193a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2201      	movs	r2, #1
 8001942:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2201      	movs	r2, #1
 800194a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2201      	movs	r2, #1
 8001952:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2201      	movs	r2, #1
 800195a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2201      	movs	r2, #1
 8001962:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2201      	movs	r2, #1
 800196a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2201      	movs	r2, #1
 8001972:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2201      	movs	r2, #1
 800197a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800197e:	2300      	movs	r3, #0
}
 8001980:	4618      	mov	r0, r3
 8001982:	3708      	adds	r7, #8
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}

08001988 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001990:	bf00      	nop
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d109      	bne.n	80019c0 <HAL_TIM_PWM_Start+0x24>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	bf14      	ite	ne
 80019b8:	2301      	movne	r3, #1
 80019ba:	2300      	moveq	r3, #0
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	e03c      	b.n	8001a3a <HAL_TIM_PWM_Start+0x9e>
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	2b04      	cmp	r3, #4
 80019c4:	d109      	bne.n	80019da <HAL_TIM_PWM_Start+0x3e>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	bf14      	ite	ne
 80019d2:	2301      	movne	r3, #1
 80019d4:	2300      	moveq	r3, #0
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	e02f      	b.n	8001a3a <HAL_TIM_PWM_Start+0x9e>
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	2b08      	cmp	r3, #8
 80019de:	d109      	bne.n	80019f4 <HAL_TIM_PWM_Start+0x58>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	bf14      	ite	ne
 80019ec:	2301      	movne	r3, #1
 80019ee:	2300      	moveq	r3, #0
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	e022      	b.n	8001a3a <HAL_TIM_PWM_Start+0x9e>
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	2b0c      	cmp	r3, #12
 80019f8:	d109      	bne.n	8001a0e <HAL_TIM_PWM_Start+0x72>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	bf14      	ite	ne
 8001a06:	2301      	movne	r3, #1
 8001a08:	2300      	moveq	r3, #0
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	e015      	b.n	8001a3a <HAL_TIM_PWM_Start+0x9e>
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	2b10      	cmp	r3, #16
 8001a12:	d109      	bne.n	8001a28 <HAL_TIM_PWM_Start+0x8c>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	bf14      	ite	ne
 8001a20:	2301      	movne	r3, #1
 8001a22:	2300      	moveq	r3, #0
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	e008      	b.n	8001a3a <HAL_TIM_PWM_Start+0x9e>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	bf14      	ite	ne
 8001a34:	2301      	movne	r3, #1
 8001a36:	2300      	moveq	r3, #0
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e07e      	b.n	8001b40 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d104      	bne.n	8001a52 <HAL_TIM_PWM_Start+0xb6>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2202      	movs	r2, #2
 8001a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a50:	e023      	b.n	8001a9a <HAL_TIM_PWM_Start+0xfe>
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	2b04      	cmp	r3, #4
 8001a56:	d104      	bne.n	8001a62 <HAL_TIM_PWM_Start+0xc6>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2202      	movs	r2, #2
 8001a5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a60:	e01b      	b.n	8001a9a <HAL_TIM_PWM_Start+0xfe>
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	2b08      	cmp	r3, #8
 8001a66:	d104      	bne.n	8001a72 <HAL_TIM_PWM_Start+0xd6>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2202      	movs	r2, #2
 8001a6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a70:	e013      	b.n	8001a9a <HAL_TIM_PWM_Start+0xfe>
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	2b0c      	cmp	r3, #12
 8001a76:	d104      	bne.n	8001a82 <HAL_TIM_PWM_Start+0xe6>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2202      	movs	r2, #2
 8001a7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001a80:	e00b      	b.n	8001a9a <HAL_TIM_PWM_Start+0xfe>
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	2b10      	cmp	r3, #16
 8001a86:	d104      	bne.n	8001a92 <HAL_TIM_PWM_Start+0xf6>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2202      	movs	r2, #2
 8001a8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a90:	e003      	b.n	8001a9a <HAL_TIM_PWM_Start+0xfe>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2202      	movs	r2, #2
 8001a96:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	6839      	ldr	r1, [r7, #0]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f000 fdb2 	bl	800260c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a26      	ldr	r2, [pc, #152]	; (8001b48 <HAL_TIM_PWM_Start+0x1ac>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d009      	beq.n	8001ac6 <HAL_TIM_PWM_Start+0x12a>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a25      	ldr	r2, [pc, #148]	; (8001b4c <HAL_TIM_PWM_Start+0x1b0>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d004      	beq.n	8001ac6 <HAL_TIM_PWM_Start+0x12a>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a23      	ldr	r2, [pc, #140]	; (8001b50 <HAL_TIM_PWM_Start+0x1b4>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d101      	bne.n	8001aca <HAL_TIM_PWM_Start+0x12e>
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e000      	b.n	8001acc <HAL_TIM_PWM_Start+0x130>
 8001aca:	2300      	movs	r3, #0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d007      	beq.n	8001ae0 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ade:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a18      	ldr	r2, [pc, #96]	; (8001b48 <HAL_TIM_PWM_Start+0x1ac>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d009      	beq.n	8001afe <HAL_TIM_PWM_Start+0x162>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001af2:	d004      	beq.n	8001afe <HAL_TIM_PWM_Start+0x162>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a14      	ldr	r2, [pc, #80]	; (8001b4c <HAL_TIM_PWM_Start+0x1b0>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d115      	bne.n	8001b2a <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	689a      	ldr	r2, [r3, #8]
 8001b04:	4b13      	ldr	r3, [pc, #76]	; (8001b54 <HAL_TIM_PWM_Start+0x1b8>)
 8001b06:	4013      	ands	r3, r2
 8001b08:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	2b06      	cmp	r3, #6
 8001b0e:	d015      	beq.n	8001b3c <HAL_TIM_PWM_Start+0x1a0>
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b16:	d011      	beq.n	8001b3c <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f042 0201 	orr.w	r2, r2, #1
 8001b26:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b28:	e008      	b.n	8001b3c <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f042 0201 	orr.w	r2, r2, #1
 8001b38:	601a      	str	r2, [r3, #0]
 8001b3a:	e000      	b.n	8001b3e <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b3c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001b3e:	2300      	movs	r3, #0
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3710      	adds	r7, #16
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	40012c00 	.word	0x40012c00
 8001b4c:	40014000 	.word	0x40014000
 8001b50:	40014400 	.word	0x40014400
 8001b54:	00010007 	.word	0x00010007

08001b58 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b086      	sub	sp, #24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	60b9      	str	r1, [r7, #8]
 8001b62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b64:	2300      	movs	r3, #0
 8001b66:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d101      	bne.n	8001b76 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001b72:	2302      	movs	r3, #2
 8001b74:	e0ff      	b.n	8001d76 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2201      	movs	r2, #1
 8001b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2b14      	cmp	r3, #20
 8001b82:	f200 80f0 	bhi.w	8001d66 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8001b86:	a201      	add	r2, pc, #4	; (adr r2, 8001b8c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b8c:	08001be1 	.word	0x08001be1
 8001b90:	08001d67 	.word	0x08001d67
 8001b94:	08001d67 	.word	0x08001d67
 8001b98:	08001d67 	.word	0x08001d67
 8001b9c:	08001c21 	.word	0x08001c21
 8001ba0:	08001d67 	.word	0x08001d67
 8001ba4:	08001d67 	.word	0x08001d67
 8001ba8:	08001d67 	.word	0x08001d67
 8001bac:	08001c63 	.word	0x08001c63
 8001bb0:	08001d67 	.word	0x08001d67
 8001bb4:	08001d67 	.word	0x08001d67
 8001bb8:	08001d67 	.word	0x08001d67
 8001bbc:	08001ca3 	.word	0x08001ca3
 8001bc0:	08001d67 	.word	0x08001d67
 8001bc4:	08001d67 	.word	0x08001d67
 8001bc8:	08001d67 	.word	0x08001d67
 8001bcc:	08001ce5 	.word	0x08001ce5
 8001bd0:	08001d67 	.word	0x08001d67
 8001bd4:	08001d67 	.word	0x08001d67
 8001bd8:	08001d67 	.word	0x08001d67
 8001bdc:	08001d25 	.word	0x08001d25
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	68b9      	ldr	r1, [r7, #8]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f000 f9f8 	bl	8001fdc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	699a      	ldr	r2, [r3, #24]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f042 0208 	orr.w	r2, r2, #8
 8001bfa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	699a      	ldr	r2, [r3, #24]
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f022 0204 	bic.w	r2, r2, #4
 8001c0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	6999      	ldr	r1, [r3, #24]
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	691a      	ldr	r2, [r3, #16]
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	430a      	orrs	r2, r1
 8001c1c:	619a      	str	r2, [r3, #24]
      break;
 8001c1e:	e0a5      	b.n	8001d6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	68b9      	ldr	r1, [r7, #8]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f000 fa54 	bl	80020d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	699a      	ldr	r2, [r3, #24]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	699a      	ldr	r2, [r3, #24]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	6999      	ldr	r1, [r3, #24]
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	691b      	ldr	r3, [r3, #16]
 8001c56:	021a      	lsls	r2, r3, #8
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	430a      	orrs	r2, r1
 8001c5e:	619a      	str	r2, [r3, #24]
      break;
 8001c60:	e084      	b.n	8001d6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	68b9      	ldr	r1, [r7, #8]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f000 faad 	bl	80021c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	69da      	ldr	r2, [r3, #28]
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f042 0208 	orr.w	r2, r2, #8
 8001c7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	69da      	ldr	r2, [r3, #28]
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f022 0204 	bic.w	r2, r2, #4
 8001c8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	69d9      	ldr	r1, [r3, #28]
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	691a      	ldr	r2, [r3, #16]
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	61da      	str	r2, [r3, #28]
      break;
 8001ca0:	e064      	b.n	8001d6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	68b9      	ldr	r1, [r7, #8]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f000 fb05 	bl	80022b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	69da      	ldr	r2, [r3, #28]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001cbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	69da      	ldr	r2, [r3, #28]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ccc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	69d9      	ldr	r1, [r3, #28]
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	691b      	ldr	r3, [r3, #16]
 8001cd8:	021a      	lsls	r2, r3, #8
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	430a      	orrs	r2, r1
 8001ce0:	61da      	str	r2, [r3, #28]
      break;
 8001ce2:	e043      	b.n	8001d6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	68b9      	ldr	r1, [r7, #8]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f000 fb42 	bl	8002374 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f042 0208 	orr.w	r2, r2, #8
 8001cfe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f022 0204 	bic.w	r2, r2, #4
 8001d0e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	691a      	ldr	r2, [r3, #16]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	430a      	orrs	r2, r1
 8001d20:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8001d22:	e023      	b.n	8001d6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	68b9      	ldr	r1, [r7, #8]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f000 fb7a 	bl	8002424 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d3e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d4e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	691b      	ldr	r3, [r3, #16]
 8001d5a:	021a      	lsls	r2, r3, #8
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	430a      	orrs	r2, r1
 8001d62:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8001d64:	e002      	b.n	8001d6c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	75fb      	strb	r3, [r7, #23]
      break;
 8001d6a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001d74:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3718      	adds	r7, #24
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop

08001d80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d101      	bne.n	8001d9c <HAL_TIM_ConfigClockSource+0x1c>
 8001d98:	2302      	movs	r3, #2
 8001d9a:	e0b6      	b.n	8001f0a <HAL_TIM_ConfigClockSource+0x18a>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2202      	movs	r2, #2
 8001da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001dbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001dc6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	68ba      	ldr	r2, [r7, #8]
 8001dce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001dd8:	d03e      	beq.n	8001e58 <HAL_TIM_ConfigClockSource+0xd8>
 8001dda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001dde:	f200 8087 	bhi.w	8001ef0 <HAL_TIM_ConfigClockSource+0x170>
 8001de2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001de6:	f000 8086 	beq.w	8001ef6 <HAL_TIM_ConfigClockSource+0x176>
 8001dea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dee:	d87f      	bhi.n	8001ef0 <HAL_TIM_ConfigClockSource+0x170>
 8001df0:	2b70      	cmp	r3, #112	; 0x70
 8001df2:	d01a      	beq.n	8001e2a <HAL_TIM_ConfigClockSource+0xaa>
 8001df4:	2b70      	cmp	r3, #112	; 0x70
 8001df6:	d87b      	bhi.n	8001ef0 <HAL_TIM_ConfigClockSource+0x170>
 8001df8:	2b60      	cmp	r3, #96	; 0x60
 8001dfa:	d050      	beq.n	8001e9e <HAL_TIM_ConfigClockSource+0x11e>
 8001dfc:	2b60      	cmp	r3, #96	; 0x60
 8001dfe:	d877      	bhi.n	8001ef0 <HAL_TIM_ConfigClockSource+0x170>
 8001e00:	2b50      	cmp	r3, #80	; 0x50
 8001e02:	d03c      	beq.n	8001e7e <HAL_TIM_ConfigClockSource+0xfe>
 8001e04:	2b50      	cmp	r3, #80	; 0x50
 8001e06:	d873      	bhi.n	8001ef0 <HAL_TIM_ConfigClockSource+0x170>
 8001e08:	2b40      	cmp	r3, #64	; 0x40
 8001e0a:	d058      	beq.n	8001ebe <HAL_TIM_ConfigClockSource+0x13e>
 8001e0c:	2b40      	cmp	r3, #64	; 0x40
 8001e0e:	d86f      	bhi.n	8001ef0 <HAL_TIM_ConfigClockSource+0x170>
 8001e10:	2b30      	cmp	r3, #48	; 0x30
 8001e12:	d064      	beq.n	8001ede <HAL_TIM_ConfigClockSource+0x15e>
 8001e14:	2b30      	cmp	r3, #48	; 0x30
 8001e16:	d86b      	bhi.n	8001ef0 <HAL_TIM_ConfigClockSource+0x170>
 8001e18:	2b20      	cmp	r3, #32
 8001e1a:	d060      	beq.n	8001ede <HAL_TIM_ConfigClockSource+0x15e>
 8001e1c:	2b20      	cmp	r3, #32
 8001e1e:	d867      	bhi.n	8001ef0 <HAL_TIM_ConfigClockSource+0x170>
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d05c      	beq.n	8001ede <HAL_TIM_ConfigClockSource+0x15e>
 8001e24:	2b10      	cmp	r3, #16
 8001e26:	d05a      	beq.n	8001ede <HAL_TIM_ConfigClockSource+0x15e>
 8001e28:	e062      	b.n	8001ef0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6818      	ldr	r0, [r3, #0]
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	6899      	ldr	r1, [r3, #8]
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	685a      	ldr	r2, [r3, #4]
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	68db      	ldr	r3, [r3, #12]
 8001e3a:	f000 fbc7 	bl	80025cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001e4c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	68ba      	ldr	r2, [r7, #8]
 8001e54:	609a      	str	r2, [r3, #8]
      break;
 8001e56:	e04f      	b.n	8001ef8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6818      	ldr	r0, [r3, #0]
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	6899      	ldr	r1, [r3, #8]
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685a      	ldr	r2, [r3, #4]
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	f000 fbb0 	bl	80025cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	689a      	ldr	r2, [r3, #8]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e7a:	609a      	str	r2, [r3, #8]
      break;
 8001e7c:	e03c      	b.n	8001ef8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6818      	ldr	r0, [r3, #0]
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	6859      	ldr	r1, [r3, #4]
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	f000 fb24 	bl	80024d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2150      	movs	r1, #80	; 0x50
 8001e96:	4618      	mov	r0, r3
 8001e98:	f000 fb7d 	bl	8002596 <TIM_ITRx_SetConfig>
      break;
 8001e9c:	e02c      	b.n	8001ef8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6818      	ldr	r0, [r3, #0]
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	6859      	ldr	r1, [r3, #4]
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	461a      	mov	r2, r3
 8001eac:	f000 fb43 	bl	8002536 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2160      	movs	r1, #96	; 0x60
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f000 fb6d 	bl	8002596 <TIM_ITRx_SetConfig>
      break;
 8001ebc:	e01c      	b.n	8001ef8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6818      	ldr	r0, [r3, #0]
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	6859      	ldr	r1, [r3, #4]
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	461a      	mov	r2, r3
 8001ecc:	f000 fb04 	bl	80024d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2140      	movs	r1, #64	; 0x40
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f000 fb5d 	bl	8002596 <TIM_ITRx_SetConfig>
      break;
 8001edc:	e00c      	b.n	8001ef8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	4610      	mov	r0, r2
 8001eea:	f000 fb54 	bl	8002596 <TIM_ITRx_SetConfig>
      break;
 8001eee:	e003      	b.n	8001ef8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	73fb      	strb	r3, [r7, #15]
      break;
 8001ef4:	e000      	b.n	8001ef8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8001ef6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2201      	movs	r2, #1
 8001efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2200      	movs	r2, #0
 8001f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3710      	adds	r7, #16
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
	...

08001f14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b085      	sub	sp, #20
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	4a2a      	ldr	r2, [pc, #168]	; (8001fd0 <TIM_Base_SetConfig+0xbc>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d003      	beq.n	8001f34 <TIM_Base_SetConfig+0x20>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f32:	d108      	bne.n	8001f46 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	68fa      	ldr	r2, [r7, #12]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a21      	ldr	r2, [pc, #132]	; (8001fd0 <TIM_Base_SetConfig+0xbc>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d00b      	beq.n	8001f66 <TIM_Base_SetConfig+0x52>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f54:	d007      	beq.n	8001f66 <TIM_Base_SetConfig+0x52>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a1e      	ldr	r2, [pc, #120]	; (8001fd4 <TIM_Base_SetConfig+0xc0>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d003      	beq.n	8001f66 <TIM_Base_SetConfig+0x52>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a1d      	ldr	r2, [pc, #116]	; (8001fd8 <TIM_Base_SetConfig+0xc4>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d108      	bne.n	8001f78 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	68fa      	ldr	r2, [r7, #12]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	695b      	ldr	r3, [r3, #20]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	68fa      	ldr	r2, [r7, #12]
 8001f8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	689a      	ldr	r2, [r3, #8]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4a0c      	ldr	r2, [pc, #48]	; (8001fd0 <TIM_Base_SetConfig+0xbc>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d007      	beq.n	8001fb4 <TIM_Base_SetConfig+0xa0>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4a0b      	ldr	r2, [pc, #44]	; (8001fd4 <TIM_Base_SetConfig+0xc0>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d003      	beq.n	8001fb4 <TIM_Base_SetConfig+0xa0>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4a0a      	ldr	r2, [pc, #40]	; (8001fd8 <TIM_Base_SetConfig+0xc4>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d103      	bne.n	8001fbc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	691a      	ldr	r2, [r3, #16]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	615a      	str	r2, [r3, #20]
}
 8001fc2:	bf00      	nop
 8001fc4:	3714      	adds	r7, #20
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	40012c00 	.word	0x40012c00
 8001fd4:	40014000 	.word	0x40014000
 8001fd8:	40014400 	.word	0x40014400

08001fdc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b087      	sub	sp, #28
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6a1b      	ldr	r3, [r3, #32]
 8001fea:	f023 0201 	bic.w	r2, r3, #1
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6a1b      	ldr	r3, [r3, #32]
 8001ff6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	699b      	ldr	r3, [r3, #24]
 8002002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800200a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800200e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f023 0303 	bic.w	r3, r3, #3
 8002016:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	68fa      	ldr	r2, [r7, #12]
 800201e:	4313      	orrs	r3, r2
 8002020:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	f023 0302 	bic.w	r3, r3, #2
 8002028:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	697a      	ldr	r2, [r7, #20]
 8002030:	4313      	orrs	r3, r2
 8002032:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4a24      	ldr	r2, [pc, #144]	; (80020c8 <TIM_OC1_SetConfig+0xec>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d007      	beq.n	800204c <TIM_OC1_SetConfig+0x70>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4a23      	ldr	r2, [pc, #140]	; (80020cc <TIM_OC1_SetConfig+0xf0>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d003      	beq.n	800204c <TIM_OC1_SetConfig+0x70>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4a22      	ldr	r2, [pc, #136]	; (80020d0 <TIM_OC1_SetConfig+0xf4>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d10c      	bne.n	8002066 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	f023 0308 	bic.w	r3, r3, #8
 8002052:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	697a      	ldr	r2, [r7, #20]
 800205a:	4313      	orrs	r3, r2
 800205c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	f023 0304 	bic.w	r3, r3, #4
 8002064:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a17      	ldr	r2, [pc, #92]	; (80020c8 <TIM_OC1_SetConfig+0xec>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d007      	beq.n	800207e <TIM_OC1_SetConfig+0xa2>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a16      	ldr	r2, [pc, #88]	; (80020cc <TIM_OC1_SetConfig+0xf0>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d003      	beq.n	800207e <TIM_OC1_SetConfig+0xa2>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a15      	ldr	r2, [pc, #84]	; (80020d0 <TIM_OC1_SetConfig+0xf4>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d111      	bne.n	80020a2 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002084:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800208c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	695b      	ldr	r3, [r3, #20]
 8002092:	693a      	ldr	r2, [r7, #16]
 8002094:	4313      	orrs	r3, r2
 8002096:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	699b      	ldr	r3, [r3, #24]
 800209c:	693a      	ldr	r2, [r7, #16]
 800209e:	4313      	orrs	r3, r2
 80020a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	68fa      	ldr	r2, [r7, #12]
 80020ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685a      	ldr	r2, [r3, #4]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	697a      	ldr	r2, [r7, #20]
 80020ba:	621a      	str	r2, [r3, #32]
}
 80020bc:	bf00      	nop
 80020be:	371c      	adds	r7, #28
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr
 80020c8:	40012c00 	.word	0x40012c00
 80020cc:	40014000 	.word	0x40014000
 80020d0:	40014400 	.word	0x40014400

080020d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b087      	sub	sp, #28
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a1b      	ldr	r3, [r3, #32]
 80020e2:	f023 0210 	bic.w	r2, r3, #16
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6a1b      	ldr	r3, [r3, #32]
 80020ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	699b      	ldr	r3, [r3, #24]
 80020fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002102:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002106:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800210e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	021b      	lsls	r3, r3, #8
 8002116:	68fa      	ldr	r2, [r7, #12]
 8002118:	4313      	orrs	r3, r2
 800211a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	f023 0320 	bic.w	r3, r3, #32
 8002122:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	011b      	lsls	r3, r3, #4
 800212a:	697a      	ldr	r2, [r7, #20]
 800212c:	4313      	orrs	r3, r2
 800212e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4a22      	ldr	r2, [pc, #136]	; (80021bc <TIM_OC2_SetConfig+0xe8>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d10d      	bne.n	8002154 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800213e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	011b      	lsls	r3, r3, #4
 8002146:	697a      	ldr	r2, [r7, #20]
 8002148:	4313      	orrs	r3, r2
 800214a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002152:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4a19      	ldr	r2, [pc, #100]	; (80021bc <TIM_OC2_SetConfig+0xe8>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d007      	beq.n	800216c <TIM_OC2_SetConfig+0x98>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	4a18      	ldr	r2, [pc, #96]	; (80021c0 <TIM_OC2_SetConfig+0xec>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d003      	beq.n	800216c <TIM_OC2_SetConfig+0x98>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	4a17      	ldr	r2, [pc, #92]	; (80021c4 <TIM_OC2_SetConfig+0xf0>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d113      	bne.n	8002194 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002172:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800217a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	695b      	ldr	r3, [r3, #20]
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	693a      	ldr	r2, [r7, #16]
 8002184:	4313      	orrs	r3, r2
 8002186:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	699b      	ldr	r3, [r3, #24]
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	693a      	ldr	r2, [r7, #16]
 8002190:	4313      	orrs	r3, r2
 8002192:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	693a      	ldr	r2, [r7, #16]
 8002198:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	68fa      	ldr	r2, [r7, #12]
 800219e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685a      	ldr	r2, [r3, #4]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	697a      	ldr	r2, [r7, #20]
 80021ac:	621a      	str	r2, [r3, #32]
}
 80021ae:	bf00      	nop
 80021b0:	371c      	adds	r7, #28
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	40012c00 	.word	0x40012c00
 80021c0:	40014000 	.word	0x40014000
 80021c4:	40014400 	.word	0x40014400

080021c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b087      	sub	sp, #28
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a1b      	ldr	r3, [r3, #32]
 80021d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6a1b      	ldr	r3, [r3, #32]
 80021e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	69db      	ldr	r3, [r3, #28]
 80021ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f023 0303 	bic.w	r3, r3, #3
 8002202:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	68fa      	ldr	r2, [r7, #12]
 800220a:	4313      	orrs	r3, r2
 800220c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002214:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	021b      	lsls	r3, r3, #8
 800221c:	697a      	ldr	r2, [r7, #20]
 800221e:	4313      	orrs	r3, r2
 8002220:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a21      	ldr	r2, [pc, #132]	; (80022ac <TIM_OC3_SetConfig+0xe4>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d10d      	bne.n	8002246 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002230:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	021b      	lsls	r3, r3, #8
 8002238:	697a      	ldr	r2, [r7, #20]
 800223a:	4313      	orrs	r3, r2
 800223c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002244:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a18      	ldr	r2, [pc, #96]	; (80022ac <TIM_OC3_SetConfig+0xe4>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d007      	beq.n	800225e <TIM_OC3_SetConfig+0x96>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a17      	ldr	r2, [pc, #92]	; (80022b0 <TIM_OC3_SetConfig+0xe8>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d003      	beq.n	800225e <TIM_OC3_SetConfig+0x96>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a16      	ldr	r2, [pc, #88]	; (80022b4 <TIM_OC3_SetConfig+0xec>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d113      	bne.n	8002286 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002264:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800226c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	011b      	lsls	r3, r3, #4
 8002274:	693a      	ldr	r2, [r7, #16]
 8002276:	4313      	orrs	r3, r2
 8002278:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	699b      	ldr	r3, [r3, #24]
 800227e:	011b      	lsls	r3, r3, #4
 8002280:	693a      	ldr	r2, [r7, #16]
 8002282:	4313      	orrs	r3, r2
 8002284:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	693a      	ldr	r2, [r7, #16]
 800228a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	68fa      	ldr	r2, [r7, #12]
 8002290:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	685a      	ldr	r2, [r3, #4]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	697a      	ldr	r2, [r7, #20]
 800229e:	621a      	str	r2, [r3, #32]
}
 80022a0:	bf00      	nop
 80022a2:	371c      	adds	r7, #28
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr
 80022ac:	40012c00 	.word	0x40012c00
 80022b0:	40014000 	.word	0x40014000
 80022b4:	40014400 	.word	0x40014400

080022b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b087      	sub	sp, #28
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6a1b      	ldr	r3, [r3, #32]
 80022c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6a1b      	ldr	r3, [r3, #32]
 80022d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	69db      	ldr	r3, [r3, #28]
 80022de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	021b      	lsls	r3, r3, #8
 80022fa:	68fa      	ldr	r2, [r7, #12]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002306:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	031b      	lsls	r3, r3, #12
 800230e:	693a      	ldr	r2, [r7, #16]
 8002310:	4313      	orrs	r3, r2
 8002312:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	4a14      	ldr	r2, [pc, #80]	; (8002368 <TIM_OC4_SetConfig+0xb0>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d007      	beq.n	800232c <TIM_OC4_SetConfig+0x74>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	4a13      	ldr	r2, [pc, #76]	; (800236c <TIM_OC4_SetConfig+0xb4>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d003      	beq.n	800232c <TIM_OC4_SetConfig+0x74>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	4a12      	ldr	r2, [pc, #72]	; (8002370 <TIM_OC4_SetConfig+0xb8>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d109      	bne.n	8002340 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002332:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	695b      	ldr	r3, [r3, #20]
 8002338:	019b      	lsls	r3, r3, #6
 800233a:	697a      	ldr	r2, [r7, #20]
 800233c:	4313      	orrs	r3, r2
 800233e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	697a      	ldr	r2, [r7, #20]
 8002344:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	68fa      	ldr	r2, [r7, #12]
 800234a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685a      	ldr	r2, [r3, #4]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	693a      	ldr	r2, [r7, #16]
 8002358:	621a      	str	r2, [r3, #32]
}
 800235a:	bf00      	nop
 800235c:	371c      	adds	r7, #28
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	40012c00 	.word	0x40012c00
 800236c:	40014000 	.word	0x40014000
 8002370:	40014400 	.word	0x40014400

08002374 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002374:	b480      	push	{r7}
 8002376:	b087      	sub	sp, #28
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6a1b      	ldr	r3, [r3, #32]
 8002382:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6a1b      	ldr	r3, [r3, #32]
 800238e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800239a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	68fa      	ldr	r2, [r7, #12]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80023b8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	041b      	lsls	r3, r3, #16
 80023c0:	693a      	ldr	r2, [r7, #16]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a13      	ldr	r2, [pc, #76]	; (8002418 <TIM_OC5_SetConfig+0xa4>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d007      	beq.n	80023de <TIM_OC5_SetConfig+0x6a>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a12      	ldr	r2, [pc, #72]	; (800241c <TIM_OC5_SetConfig+0xa8>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d003      	beq.n	80023de <TIM_OC5_SetConfig+0x6a>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a11      	ldr	r2, [pc, #68]	; (8002420 <TIM_OC5_SetConfig+0xac>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d109      	bne.n	80023f2 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023e4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	695b      	ldr	r3, [r3, #20]
 80023ea:	021b      	lsls	r3, r3, #8
 80023ec:	697a      	ldr	r2, [r7, #20]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	697a      	ldr	r2, [r7, #20]
 80023f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	68fa      	ldr	r2, [r7, #12]
 80023fc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	685a      	ldr	r2, [r3, #4]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	693a      	ldr	r2, [r7, #16]
 800240a:	621a      	str	r2, [r3, #32]
}
 800240c:	bf00      	nop
 800240e:	371c      	adds	r7, #28
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr
 8002418:	40012c00 	.word	0x40012c00
 800241c:	40014000 	.word	0x40014000
 8002420:	40014400 	.word	0x40014400

08002424 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002424:	b480      	push	{r7}
 8002426:	b087      	sub	sp, #28
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a1b      	ldr	r3, [r3, #32]
 8002432:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a1b      	ldr	r3, [r3, #32]
 800243e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800244a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002452:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002456:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	021b      	lsls	r3, r3, #8
 800245e:	68fa      	ldr	r2, [r7, #12]
 8002460:	4313      	orrs	r3, r2
 8002462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800246a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	051b      	lsls	r3, r3, #20
 8002472:	693a      	ldr	r2, [r7, #16]
 8002474:	4313      	orrs	r3, r2
 8002476:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	4a14      	ldr	r2, [pc, #80]	; (80024cc <TIM_OC6_SetConfig+0xa8>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d007      	beq.n	8002490 <TIM_OC6_SetConfig+0x6c>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	4a13      	ldr	r2, [pc, #76]	; (80024d0 <TIM_OC6_SetConfig+0xac>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d003      	beq.n	8002490 <TIM_OC6_SetConfig+0x6c>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	4a12      	ldr	r2, [pc, #72]	; (80024d4 <TIM_OC6_SetConfig+0xb0>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d109      	bne.n	80024a4 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002496:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	695b      	ldr	r3, [r3, #20]
 800249c:	029b      	lsls	r3, r3, #10
 800249e:	697a      	ldr	r2, [r7, #20]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	697a      	ldr	r2, [r7, #20]
 80024a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	68fa      	ldr	r2, [r7, #12]
 80024ae:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685a      	ldr	r2, [r3, #4]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	621a      	str	r2, [r3, #32]
}
 80024be:	bf00      	nop
 80024c0:	371c      	adds	r7, #28
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	40012c00 	.word	0x40012c00
 80024d0:	40014000 	.word	0x40014000
 80024d4:	40014400 	.word	0x40014400

080024d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80024d8:	b480      	push	{r7}
 80024da:	b087      	sub	sp, #28
 80024dc:	af00      	add	r7, sp, #0
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	6a1b      	ldr	r3, [r3, #32]
 80024e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6a1b      	ldr	r3, [r3, #32]
 80024ee:	f023 0201 	bic.w	r2, r3, #1
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	699b      	ldr	r3, [r3, #24]
 80024fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002502:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	011b      	lsls	r3, r3, #4
 8002508:	693a      	ldr	r2, [r7, #16]
 800250a:	4313      	orrs	r3, r2
 800250c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	f023 030a 	bic.w	r3, r3, #10
 8002514:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002516:	697a      	ldr	r2, [r7, #20]
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	4313      	orrs	r3, r2
 800251c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	693a      	ldr	r2, [r7, #16]
 8002522:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	697a      	ldr	r2, [r7, #20]
 8002528:	621a      	str	r2, [r3, #32]
}
 800252a:	bf00      	nop
 800252c:	371c      	adds	r7, #28
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr

08002536 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002536:	b480      	push	{r7}
 8002538:	b087      	sub	sp, #28
 800253a:	af00      	add	r7, sp, #0
 800253c:	60f8      	str	r0, [r7, #12]
 800253e:	60b9      	str	r1, [r7, #8]
 8002540:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	6a1b      	ldr	r3, [r3, #32]
 8002546:	f023 0210 	bic.w	r2, r3, #16
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	699b      	ldr	r3, [r3, #24]
 8002552:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6a1b      	ldr	r3, [r3, #32]
 8002558:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002560:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	031b      	lsls	r3, r3, #12
 8002566:	697a      	ldr	r2, [r7, #20]
 8002568:	4313      	orrs	r3, r2
 800256a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002572:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	011b      	lsls	r3, r3, #4
 8002578:	693a      	ldr	r2, [r7, #16]
 800257a:	4313      	orrs	r3, r2
 800257c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	697a      	ldr	r2, [r7, #20]
 8002582:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	693a      	ldr	r2, [r7, #16]
 8002588:	621a      	str	r2, [r3, #32]
}
 800258a:	bf00      	nop
 800258c:	371c      	adds	r7, #28
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr

08002596 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002596:	b480      	push	{r7}
 8002598:	b085      	sub	sp, #20
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
 800259e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80025ae:	683a      	ldr	r2, [r7, #0]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	f043 0307 	orr.w	r3, r3, #7
 80025b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	68fa      	ldr	r2, [r7, #12]
 80025be:	609a      	str	r2, [r3, #8]
}
 80025c0:	bf00      	nop
 80025c2:	3714      	adds	r7, #20
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr

080025cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b087      	sub	sp, #28
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	60b9      	str	r1, [r7, #8]
 80025d6:	607a      	str	r2, [r7, #4]
 80025d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80025e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	021a      	lsls	r2, r3, #8
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	431a      	orrs	r2, r3
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	697a      	ldr	r2, [r7, #20]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	697a      	ldr	r2, [r7, #20]
 80025fe:	609a      	str	r2, [r3, #8]
}
 8002600:	bf00      	nop
 8002602:	371c      	adds	r7, #28
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800260c:	b480      	push	{r7}
 800260e:	b087      	sub	sp, #28
 8002610:	af00      	add	r7, sp, #0
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	60b9      	str	r1, [r7, #8]
 8002616:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	f003 031f 	and.w	r3, r3, #31
 800261e:	2201      	movs	r2, #1
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6a1a      	ldr	r2, [r3, #32]
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	43db      	mvns	r3, r3
 800262e:	401a      	ands	r2, r3
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6a1a      	ldr	r2, [r3, #32]
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	f003 031f 	and.w	r3, r3, #31
 800263e:	6879      	ldr	r1, [r7, #4]
 8002640:	fa01 f303 	lsl.w	r3, r1, r3
 8002644:	431a      	orrs	r2, r3
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	621a      	str	r2, [r3, #32]
}
 800264a:	bf00      	nop
 800264c:	371c      	adds	r7, #28
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
	...

08002658 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002658:	b480      	push	{r7}
 800265a:	b085      	sub	sp, #20
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002668:	2b01      	cmp	r3, #1
 800266a:	d101      	bne.n	8002670 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800266c:	2302      	movs	r3, #2
 800266e:	e04f      	b.n	8002710 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2202      	movs	r2, #2
 800267c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a21      	ldr	r2, [pc, #132]	; (800271c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d108      	bne.n	80026ac <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80026a0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	68fa      	ldr	r2, [r7, #12]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	68fa      	ldr	r2, [r7, #12]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	68fa      	ldr	r2, [r7, #12]
 80026c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a14      	ldr	r2, [pc, #80]	; (800271c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d009      	beq.n	80026e4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026d8:	d004      	beq.n	80026e4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a10      	ldr	r2, [pc, #64]	; (8002720 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d10c      	bne.n	80026fe <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026ea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	68ba      	ldr	r2, [r7, #8]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	68ba      	ldr	r2, [r7, #8]
 80026fc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2201      	movs	r2, #1
 8002702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800270e:	2300      	movs	r3, #0
}
 8002710:	4618      	mov	r0, r3
 8002712:	3714      	adds	r7, #20
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr
 800271c:	40012c00 	.word	0x40012c00
 8002720:	40014000 	.word	0x40014000

08002724 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002724:	b480      	push	{r7}
 8002726:	b085      	sub	sp, #20
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800272e:	2300      	movs	r3, #0
 8002730:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002738:	2b01      	cmp	r3, #1
 800273a:	d101      	bne.n	8002740 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800273c:	2302      	movs	r3, #2
 800273e:	e060      	b.n	8002802 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	4313      	orrs	r3, r2
 8002754:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	4313      	orrs	r3, r2
 8002762:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	4313      	orrs	r3, r2
 8002770:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4313      	orrs	r3, r2
 800277e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	4313      	orrs	r3, r2
 800278c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	695b      	ldr	r3, [r3, #20]
 8002798:	4313      	orrs	r3, r2
 800279a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a6:	4313      	orrs	r3, r2
 80027a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	699b      	ldr	r3, [r3, #24]
 80027b4:	041b      	lsls	r3, r3, #16
 80027b6:	4313      	orrs	r3, r2
 80027b8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a14      	ldr	r2, [pc, #80]	; (8002810 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d115      	bne.n	80027f0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ce:	051b      	lsls	r3, r3, #20
 80027d0:	4313      	orrs	r3, r2
 80027d2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	69db      	ldr	r3, [r3, #28]
 80027de:	4313      	orrs	r3, r2
 80027e0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	6a1b      	ldr	r3, [r3, #32]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	68fa      	ldr	r2, [r7, #12]
 80027f6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	3714      	adds	r7, #20
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	40012c00 	.word	0x40012c00

08002814 <__libc_init_array>:
 8002814:	b570      	push	{r4, r5, r6, lr}
 8002816:	4d0d      	ldr	r5, [pc, #52]	; (800284c <__libc_init_array+0x38>)
 8002818:	4c0d      	ldr	r4, [pc, #52]	; (8002850 <__libc_init_array+0x3c>)
 800281a:	1b64      	subs	r4, r4, r5
 800281c:	10a4      	asrs	r4, r4, #2
 800281e:	2600      	movs	r6, #0
 8002820:	42a6      	cmp	r6, r4
 8002822:	d109      	bne.n	8002838 <__libc_init_array+0x24>
 8002824:	4d0b      	ldr	r5, [pc, #44]	; (8002854 <__libc_init_array+0x40>)
 8002826:	4c0c      	ldr	r4, [pc, #48]	; (8002858 <__libc_init_array+0x44>)
 8002828:	f000 f820 	bl	800286c <_init>
 800282c:	1b64      	subs	r4, r4, r5
 800282e:	10a4      	asrs	r4, r4, #2
 8002830:	2600      	movs	r6, #0
 8002832:	42a6      	cmp	r6, r4
 8002834:	d105      	bne.n	8002842 <__libc_init_array+0x2e>
 8002836:	bd70      	pop	{r4, r5, r6, pc}
 8002838:	f855 3b04 	ldr.w	r3, [r5], #4
 800283c:	4798      	blx	r3
 800283e:	3601      	adds	r6, #1
 8002840:	e7ee      	b.n	8002820 <__libc_init_array+0xc>
 8002842:	f855 3b04 	ldr.w	r3, [r5], #4
 8002846:	4798      	blx	r3
 8002848:	3601      	adds	r6, #1
 800284a:	e7f2      	b.n	8002832 <__libc_init_array+0x1e>
 800284c:	080028c4 	.word	0x080028c4
 8002850:	080028c4 	.word	0x080028c4
 8002854:	080028c4 	.word	0x080028c4
 8002858:	080028c8 	.word	0x080028c8

0800285c <memset>:
 800285c:	4402      	add	r2, r0
 800285e:	4603      	mov	r3, r0
 8002860:	4293      	cmp	r3, r2
 8002862:	d100      	bne.n	8002866 <memset+0xa>
 8002864:	4770      	bx	lr
 8002866:	f803 1b01 	strb.w	r1, [r3], #1
 800286a:	e7f9      	b.n	8002860 <memset+0x4>

0800286c <_init>:
 800286c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800286e:	bf00      	nop
 8002870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002872:	bc08      	pop	{r3}
 8002874:	469e      	mov	lr, r3
 8002876:	4770      	bx	lr

08002878 <_fini>:
 8002878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800287a:	bf00      	nop
 800287c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800287e:	bc08      	pop	{r3}
 8002880:	469e      	mov	lr, r3
 8002882:	4770      	bx	lr
