
actionneurs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002854  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080029e0  080029e0  000129e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a20  08002a20  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002a20  08002a20  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a20  08002a20  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a20  08002a20  00012a20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a24  08002a24  00012a24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002a28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  2000000c  08002a34  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  08002a34  00020080  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009b81  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019b9  00000000  00000000  00029bbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000978  00000000  00000000  0002b578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008a0  00000000  00000000  0002bef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f8f6  00000000  00000000  0002c790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b15c  00000000  00000000  0004c086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bcbb8  00000000  00000000  000571e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00113d9a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025a4  00000000  00000000  00113dec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080029c8 	.word	0x080029c8

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	080029c8 	.word	0x080029c8

080001cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b082      	sub	sp, #8
 80001d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d2:	f000 fb58 	bl	8000886 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d6:	f000 f84f 	bl	8000278 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001da:	f000 f8d1 	bl	8000380 <MX_GPIO_Init>
  MX_I2C1_Init();
 80001de:	f000 f891 	bl	8000304 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(1);
 80001e2:	2001      	movs	r0, #1
 80001e4:	f000 fbc4 	bl	8000970 <HAL_Delay>

  // Synchro externe pour le trigger de l'oscillo
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80001e8:	2201      	movs	r2, #1
 80001ea:	2120      	movs	r1, #32
 80001ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001f0:	f000 fe32 	bl	8000e58 <HAL_GPIO_WritePin>

  // Initialisation et envoi d'un signal PWM
  PCA9685_init(&hi2c1);
 80001f4:	481e      	ldr	r0, [pc, #120]	; (8000270 <main+0xa4>)
 80001f6:	f000 f999 	bl	800052c <PCA9685_init>
  PCA9685_set_cycle(&hi2c1, 0, 1.0f);
 80001fa:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80001fe:	2100      	movs	r1, #0
 8000200:	481b      	ldr	r0, [pc, #108]	; (8000270 <main+0xa4>)
 8000202:	f000 fa1f 	bl	8000644 <PCA9685_set_cycle>

  // Fin du trigger
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000206:	2200      	movs	r2, #0
 8000208:	2120      	movs	r1, #32
 800020a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800020e:	f000 fe23 	bl	8000e58 <HAL_GPIO_WritePin>

  float i = 0.0f;
 8000212:	f04f 0300 	mov.w	r3, #0
 8000216:	607b      	str	r3, [r7, #4]
  float increment = 4.0f;
 8000218:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 800021c:	603b      	str	r3, [r7, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
    PCA9685_set_pwm(&hi2c1, 0, i);
 800021e:	ed97 0a01 	vldr	s0, [r7, #4]
 8000222:	2100      	movs	r1, #0
 8000224:	4812      	ldr	r0, [pc, #72]	; (8000270 <main+0xa4>)
 8000226:	f000 f9c7 	bl	80005b8 <PCA9685_set_pwm>
    i += increment;
 800022a:	ed97 7a01 	vldr	s14, [r7, #4]
 800022e:	edd7 7a00 	vldr	s15, [r7]
 8000232:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000236:	edc7 7a01 	vstr	s15, [r7, #4]

    if (i > PCA_PWM_RANGE || i < 0)
 800023a:	edd7 7a01 	vldr	s15, [r7, #4]
 800023e:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8000274 <main+0xa8>
 8000242:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800024a:	dc06      	bgt.n	800025a <main+0x8e>
 800024c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000250:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000258:	d505      	bpl.n	8000266 <main+0x9a>
      increment *= -1;
 800025a:	edd7 7a00 	vldr	s15, [r7]
 800025e:	eef1 7a67 	vneg.f32	s15, s15
 8000262:	edc7 7a00 	vstr	s15, [r7]

    HAL_Delay(20);
 8000266:	2014      	movs	r0, #20
 8000268:	f000 fb82 	bl	8000970 <HAL_Delay>
    PCA9685_set_pwm(&hi2c1, 0, i);
 800026c:	e7d7      	b.n	800021e <main+0x52>
 800026e:	bf00      	nop
 8000270:	20000028 	.word	0x20000028
 8000274:	438f8000 	.word	0x438f8000

08000278 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b096      	sub	sp, #88	; 0x58
 800027c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800027e:	f107 0314 	add.w	r3, r7, #20
 8000282:	2244      	movs	r2, #68	; 0x44
 8000284:	2100      	movs	r1, #0
 8000286:	4618      	mov	r0, r3
 8000288:	f002 fb96 	bl	80029b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800028c:	463b      	mov	r3, r7
 800028e:	2200      	movs	r2, #0
 8000290:	601a      	str	r2, [r3, #0]
 8000292:	605a      	str	r2, [r3, #4]
 8000294:	609a      	str	r2, [r3, #8]
 8000296:	60da      	str	r2, [r3, #12]
 8000298:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800029a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800029e:	f001 fa1b 	bl	80016d8 <HAL_PWREx_ControlVoltageScaling>
 80002a2:	4603      	mov	r3, r0
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d001      	beq.n	80002ac <SystemClock_Config+0x34>
  {
    Error_Handler();
 80002a8:	f000 f89a 	bl	80003e0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80002ac:	2310      	movs	r3, #16
 80002ae:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002b0:	2301      	movs	r3, #1
 80002b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80002b4:	2300      	movs	r3, #0
 80002b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80002b8:	2360      	movs	r3, #96	; 0x60
 80002ba:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002bc:	2300      	movs	r3, #0
 80002be:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002c0:	f107 0314 	add.w	r3, r7, #20
 80002c4:	4618      	mov	r0, r3
 80002c6:	f001 fa5d 	bl	8001784 <HAL_RCC_OscConfig>
 80002ca:	4603      	mov	r3, r0
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d001      	beq.n	80002d4 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80002d0:	f000 f886 	bl	80003e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002d4:	230f      	movs	r3, #15
 80002d6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80002d8:	2300      	movs	r3, #0
 80002da:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002dc:	2300      	movs	r3, #0
 80002de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002e0:	2300      	movs	r3, #0
 80002e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002e4:	2300      	movs	r3, #0
 80002e6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002e8:	463b      	mov	r3, r7
 80002ea:	2100      	movs	r1, #0
 80002ec:	4618      	mov	r0, r3
 80002ee:	f001 fe5d 	bl	8001fac <HAL_RCC_ClockConfig>
 80002f2:	4603      	mov	r3, r0
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d001      	beq.n	80002fc <SystemClock_Config+0x84>
  {
    Error_Handler();
 80002f8:	f000 f872 	bl	80003e0 <Error_Handler>
  }
}
 80002fc:	bf00      	nop
 80002fe:	3758      	adds	r7, #88	; 0x58
 8000300:	46bd      	mov	sp, r7
 8000302:	bd80      	pop	{r7, pc}

08000304 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000308:	4b1b      	ldr	r3, [pc, #108]	; (8000378 <MX_I2C1_Init+0x74>)
 800030a:	4a1c      	ldr	r2, [pc, #112]	; (800037c <MX_I2C1_Init+0x78>)
 800030c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 800030e:	4b1a      	ldr	r3, [pc, #104]	; (8000378 <MX_I2C1_Init+0x74>)
 8000310:	f640 6214 	movw	r2, #3604	; 0xe14
 8000314:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000316:	4b18      	ldr	r3, [pc, #96]	; (8000378 <MX_I2C1_Init+0x74>)
 8000318:	2200      	movs	r2, #0
 800031a:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800031c:	4b16      	ldr	r3, [pc, #88]	; (8000378 <MX_I2C1_Init+0x74>)
 800031e:	2201      	movs	r2, #1
 8000320:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000322:	4b15      	ldr	r3, [pc, #84]	; (8000378 <MX_I2C1_Init+0x74>)
 8000324:	2200      	movs	r2, #0
 8000326:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000328:	4b13      	ldr	r3, [pc, #76]	; (8000378 <MX_I2C1_Init+0x74>)
 800032a:	2200      	movs	r2, #0
 800032c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800032e:	4b12      	ldr	r3, [pc, #72]	; (8000378 <MX_I2C1_Init+0x74>)
 8000330:	2200      	movs	r2, #0
 8000332:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000334:	4b10      	ldr	r3, [pc, #64]	; (8000378 <MX_I2C1_Init+0x74>)
 8000336:	2200      	movs	r2, #0
 8000338:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800033a:	4b0f      	ldr	r3, [pc, #60]	; (8000378 <MX_I2C1_Init+0x74>)
 800033c:	2200      	movs	r2, #0
 800033e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000340:	480d      	ldr	r0, [pc, #52]	; (8000378 <MX_I2C1_Init+0x74>)
 8000342:	f000 fda1 	bl	8000e88 <HAL_I2C_Init>
 8000346:	4603      	mov	r3, r0
 8000348:	2b00      	cmp	r3, #0
 800034a:	d001      	beq.n	8000350 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800034c:	f000 f848 	bl	80003e0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000350:	2100      	movs	r1, #0
 8000352:	4809      	ldr	r0, [pc, #36]	; (8000378 <MX_I2C1_Init+0x74>)
 8000354:	f001 f91a 	bl	800158c <HAL_I2CEx_ConfigAnalogFilter>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800035e:	f000 f83f 	bl	80003e0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000362:	2100      	movs	r1, #0
 8000364:	4804      	ldr	r0, [pc, #16]	; (8000378 <MX_I2C1_Init+0x74>)
 8000366:	f001 f95c 	bl	8001622 <HAL_I2CEx_ConfigDigitalFilter>
 800036a:	4603      	mov	r3, r0
 800036c:	2b00      	cmp	r3, #0
 800036e:	d001      	beq.n	8000374 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000370:	f000 f836 	bl	80003e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000374:	bf00      	nop
 8000376:	bd80      	pop	{r7, pc}
 8000378:	20000028 	.word	0x20000028
 800037c:	40005400 	.word	0x40005400

08000380 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b086      	sub	sp, #24
 8000384:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000386:	1d3b      	adds	r3, r7, #4
 8000388:	2200      	movs	r2, #0
 800038a:	601a      	str	r2, [r3, #0]
 800038c:	605a      	str	r2, [r3, #4]
 800038e:	609a      	str	r2, [r3, #8]
 8000390:	60da      	str	r2, [r3, #12]
 8000392:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000394:	4b11      	ldr	r3, [pc, #68]	; (80003dc <MX_GPIO_Init+0x5c>)
 8000396:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000398:	4a10      	ldr	r2, [pc, #64]	; (80003dc <MX_GPIO_Init+0x5c>)
 800039a:	f043 0301 	orr.w	r3, r3, #1
 800039e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003a0:	4b0e      	ldr	r3, [pc, #56]	; (80003dc <MX_GPIO_Init+0x5c>)
 80003a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003a4:	f003 0301 	and.w	r3, r3, #1
 80003a8:	603b      	str	r3, [r7, #0]
 80003aa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80003ac:	2200      	movs	r2, #0
 80003ae:	2120      	movs	r1, #32
 80003b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003b4:	f000 fd50 	bl	8000e58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80003b8:	2320      	movs	r3, #32
 80003ba:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003bc:	2301      	movs	r3, #1
 80003be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c0:	2300      	movs	r3, #0
 80003c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003c4:	2300      	movs	r3, #0
 80003c6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003c8:	1d3b      	adds	r3, r7, #4
 80003ca:	4619      	mov	r1, r3
 80003cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003d0:	f000 fbd8 	bl	8000b84 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003d4:	bf00      	nop
 80003d6:	3718      	adds	r7, #24
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd80      	pop	{r7, pc}
 80003dc:	40021000 	.word	0x40021000

080003e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003e0:	b480      	push	{r7}
 80003e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003e4:	b672      	cpsid	i
}
 80003e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003e8:	e7fe      	b.n	80003e8 <Error_Handler+0x8>

080003ea <map>:
#include <string.h>
#include "pca9685.h"


// Identique à Arduino : https://www.arduino.cc/reference/en/language/functions/math/map/
uint16_t map(float x, float in_min, float in_max, float out_min, float out_max) {
 80003ea:	b480      	push	{r7}
 80003ec:	b087      	sub	sp, #28
 80003ee:	af00      	add	r7, sp, #0
 80003f0:	ed87 0a05 	vstr	s0, [r7, #20]
 80003f4:	edc7 0a04 	vstr	s1, [r7, #16]
 80003f8:	ed87 1a03 	vstr	s2, [r7, #12]
 80003fc:	edc7 1a02 	vstr	s3, [r7, #8]
 8000400:	ed87 2a01 	vstr	s4, [r7, #4]
  return (uint16_t) ((x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min);
 8000404:	ed97 7a05 	vldr	s14, [r7, #20]
 8000408:	edd7 7a04 	vldr	s15, [r7, #16]
 800040c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000410:	edd7 6a01 	vldr	s13, [r7, #4]
 8000414:	edd7 7a02 	vldr	s15, [r7, #8]
 8000418:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800041c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000420:	ed97 7a03 	vldr	s14, [r7, #12]
 8000424:	edd7 7a04 	vldr	s15, [r7, #16]
 8000428:	ee77 7a67 	vsub.f32	s15, s14, s15
 800042c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000430:	edd7 7a02 	vldr	s15, [r7, #8]
 8000434:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000438:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800043c:	ee17 3a90 	vmov	r3, s15
 8000440:	b29b      	uxth	r3, r3
}
 8000442:	4618      	mov	r0, r3
 8000444:	371c      	adds	r7, #28
 8000446:	46bd      	mov	sp, r7
 8000448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044c:	4770      	bx	lr

0800044e <PCA9685_write>:
 *  @param i2c Généralement &hi2c1 (structure d'STM pour gérer l'I2C)
 *  @param reg L'adresse du registre sur lequel écrire
 *  @param val La valeur à écrire sur le registre
 *  @return Status HAL
 */
int PCA9685_write(I2C_HandleTypeDef *i2c, uint8_t reg, uint8_t val) {
 800044e:	b580      	push	{r7, lr}
 8000450:	b086      	sub	sp, #24
 8000452:	af02      	add	r7, sp, #8
 8000454:	6078      	str	r0, [r7, #4]
 8000456:	460b      	mov	r3, r1
 8000458:	70fb      	strb	r3, [r7, #3]
 800045a:	4613      	mov	r3, r2
 800045c:	70bb      	strb	r3, [r7, #2]
	uint8_t data[2] = {reg, val};
 800045e:	78fb      	ldrb	r3, [r7, #3]
 8000460:	733b      	strb	r3, [r7, #12]
 8000462:	78bb      	ldrb	r3, [r7, #2]
 8000464:	737b      	strb	r3, [r7, #13]
	return HAL_I2C_Master_Transmit(i2c, PCA_I2C_ADDR, data, 2, PCA_I2C_TIMEOUT);
 8000466:	f107 020c 	add.w	r2, r7, #12
 800046a:	2301      	movs	r3, #1
 800046c:	9300      	str	r3, [sp, #0]
 800046e:	2302      	movs	r3, #2
 8000470:	2180      	movs	r1, #128	; 0x80
 8000472:	6878      	ldr	r0, [r7, #4]
 8000474:	f000 fd98 	bl	8000fa8 <HAL_I2C_Master_Transmit>
 8000478:	4603      	mov	r3, r0
}
 800047a:	4618      	mov	r0, r3
 800047c:	3710      	adds	r7, #16
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}

08000482 <PCA9685_write_data>:
 *  @param reg L'adresse du premier registre sur lequel écrire
 *  @param data Les valeurs (octets) à écrire
 *  @param data_len Le nombre d'octets à écrire
 *  @return Status HAL ou code d'erreur
 */
int PCA9685_write_data(I2C_HandleTypeDef *i2c, uint8_t reg, uint8_t *data, uint8_t data_len) {
 8000482:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000486:	b089      	sub	sp, #36	; 0x24
 8000488:	af02      	add	r7, sp, #8
 800048a:	60f8      	str	r0, [r7, #12]
 800048c:	607a      	str	r2, [r7, #4]
 800048e:	461a      	mov	r2, r3
 8000490:	460b      	mov	r3, r1
 8000492:	72fb      	strb	r3, [r7, #11]
 8000494:	4613      	mov	r3, r2
 8000496:	72bb      	strb	r3, [r7, #10]
 8000498:	466b      	mov	r3, sp
 800049a:	461e      	mov	r6, r3
	if (data_len < 0) return PCA_ERR_DATA_TOO_SMALL;
	if( data_len > 4) return PCA_ERR_DATA_TOO_BIG;
 800049c:	7abb      	ldrb	r3, [r7, #10]
 800049e:	2b04      	cmp	r3, #4
 80004a0:	d901      	bls.n	80004a6 <PCA9685_write_data+0x24>
 80004a2:	2313      	movs	r3, #19
 80004a4:	e03c      	b.n	8000520 <PCA9685_write_data+0x9e>

	//for (uint8_t i=0; i < data_len; i++)
	//	if ((status = PCA9685_write(i2c, reg+i, data[i])) != HAL_OK)
	//		return status;

	uint8_t i2c_data[data_len+1];
 80004a6:	7abb      	ldrb	r3, [r7, #10]
 80004a8:	1c59      	adds	r1, r3, #1
 80004aa:	1e4b      	subs	r3, r1, #1
 80004ac:	617b      	str	r3, [r7, #20]
 80004ae:	460a      	mov	r2, r1
 80004b0:	2300      	movs	r3, #0
 80004b2:	4690      	mov	r8, r2
 80004b4:	4699      	mov	r9, r3
 80004b6:	f04f 0200 	mov.w	r2, #0
 80004ba:	f04f 0300 	mov.w	r3, #0
 80004be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80004c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80004c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80004ca:	460a      	mov	r2, r1
 80004cc:	2300      	movs	r3, #0
 80004ce:	4614      	mov	r4, r2
 80004d0:	461d      	mov	r5, r3
 80004d2:	f04f 0200 	mov.w	r2, #0
 80004d6:	f04f 0300 	mov.w	r3, #0
 80004da:	00eb      	lsls	r3, r5, #3
 80004dc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80004e0:	00e2      	lsls	r2, r4, #3
 80004e2:	460b      	mov	r3, r1
 80004e4:	3307      	adds	r3, #7
 80004e6:	08db      	lsrs	r3, r3, #3
 80004e8:	00db      	lsls	r3, r3, #3
 80004ea:	ebad 0d03 	sub.w	sp, sp, r3
 80004ee:	ab02      	add	r3, sp, #8
 80004f0:	3300      	adds	r3, #0
 80004f2:	613b      	str	r3, [r7, #16]
	i2c_data[0] = reg;
 80004f4:	693b      	ldr	r3, [r7, #16]
 80004f6:	7afa      	ldrb	r2, [r7, #11]
 80004f8:	701a      	strb	r2, [r3, #0]
	memcpy(&i2c_data[1], data, data_len);
 80004fa:	693b      	ldr	r3, [r7, #16]
 80004fc:	3301      	adds	r3, #1
 80004fe:	7aba      	ldrb	r2, [r7, #10]
 8000500:	6879      	ldr	r1, [r7, #4]
 8000502:	4618      	mov	r0, r3
 8000504:	f002 fa4a 	bl	800299c <memcpy>

	return HAL_I2C_Master_Transmit(i2c, PCA_I2C_ADDR, i2c_data, data_len+1, PCA_I2C_TIMEOUT);
 8000508:	7abb      	ldrb	r3, [r7, #10]
 800050a:	b29b      	uxth	r3, r3
 800050c:	3301      	adds	r3, #1
 800050e:	b29b      	uxth	r3, r3
 8000510:	2201      	movs	r2, #1
 8000512:	9200      	str	r2, [sp, #0]
 8000514:	693a      	ldr	r2, [r7, #16]
 8000516:	2180      	movs	r1, #128	; 0x80
 8000518:	68f8      	ldr	r0, [r7, #12]
 800051a:	f000 fd45 	bl	8000fa8 <HAL_I2C_Master_Transmit>
 800051e:	4603      	mov	r3, r0
 8000520:	46b5      	mov	sp, r6
}
 8000522:	4618      	mov	r0, r3
 8000524:	371c      	adds	r7, #28
 8000526:	46bd      	mov	sp, r7
 8000528:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800052c <PCA9685_init>:
/*!
 *  @brief Initialisation de la carte
 *  @param i2c Généralement &hi2c1 (structure d'STM pour gérer l'I2C)
 *  @return Si il y a eu une erreur pour l'écriture
 */
int PCA9685_init(I2C_HandleTypeDef *i2c) {
 800052c:	b580      	push	{r7, lr}
 800052e:	b084      	sub	sp, #16
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
	// On active le sleep mode pour modifier le diviseur (cf. pages 13 et 14)
	// et l'auto-increment pour modifier plusieurs registres en une écriture
	if (PCA9685_write(i2c, PCA_REG_MODE1, 0b00110000) != HAL_OK)
 8000534:	2230      	movs	r2, #48	; 0x30
 8000536:	2100      	movs	r1, #0
 8000538:	6878      	ldr	r0, [r7, #4]
 800053a:	f7ff ff88 	bl	800044e <PCA9685_write>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <PCA9685_init+0x1c>
		return PCA_ERR_INIT_SLEEP;
 8000544:	2302      	movs	r3, #2
 8000546:	e033      	b.n	80005b0 <PCA9685_init+0x84>

	// Cf. page 16
	if (PCA9685_write(i2c, PCA_REG_MODE2, 0b00000000) != HAL_OK)
 8000548:	2200      	movs	r2, #0
 800054a:	2101      	movs	r1, #1
 800054c:	6878      	ldr	r0, [r7, #4]
 800054e:	f7ff ff7e 	bl	800044e <PCA9685_write>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d001      	beq.n	800055c <PCA9685_init+0x30>
		return PCA_ERR_INIT_MODE2;
 8000558:	2303      	movs	r3, #3
 800055a:	e029      	b.n	80005b0 <PCA9685_init+0x84>

	// On désactive tous les channels (cf. page 25 registre FDh)
    uint8_t data[4] = {0x00, 0x00, 0x00, 0x10};
 800055c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000560:	60bb      	str	r3, [r7, #8]
    if (PCA9685_write_data(i2c, PCA_REG_ALL_ON_L, data, 4) != HAL_OK)
 8000562:	f107 0208 	add.w	r2, r7, #8
 8000566:	2304      	movs	r3, #4
 8000568:	21fa      	movs	r1, #250	; 0xfa
 800056a:	6878      	ldr	r0, [r7, #4]
 800056c:	f7ff ff89 	bl	8000482 <PCA9685_write_data>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d001      	beq.n	800057a <PCA9685_init+0x4e>
        return PCA_ERR_INIT_RESET;
 8000576:	2301      	movs	r3, #1
 8000578:	e01a      	b.n	80005b0 <PCA9685_init+0x84>

	// Calcul du diviseur pour avoir la fréquence voulue (cf. page 25)
	uint8_t prescaler_val = (uint8_t) roundf(25000000.0f / (4096 * PCA_PRESCALER_FREQ)) - 1;
 800057a:	2384      	movs	r3, #132	; 0x84
 800057c:	73fb      	strb	r3, [r7, #15]
	if (PCA9685_write(i2c, PCA_REG_PRESCALER, prescaler_val) != HAL_OK)
 800057e:	7bfb      	ldrb	r3, [r7, #15]
 8000580:	461a      	mov	r2, r3
 8000582:	21fe      	movs	r1, #254	; 0xfe
 8000584:	6878      	ldr	r0, [r7, #4]
 8000586:	f7ff ff62 	bl	800044e <PCA9685_write>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <PCA9685_init+0x68>
		return PCA_ERR_INIT_PRESCALER;
 8000590:	2304      	movs	r3, #4
 8000592:	e00d      	b.n	80005b0 <PCA9685_init+0x84>

	// On désactive le sleep mode pour pouvoir piloter les servos (cf. page 14)
	if (PCA9685_write(i2c, PCA_REG_MODE1, 0b00100000) != HAL_OK)
 8000594:	2220      	movs	r2, #32
 8000596:	2100      	movs	r1, #0
 8000598:	6878      	ldr	r0, [r7, #4]
 800059a:	f7ff ff58 	bl	800044e <PCA9685_write>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <PCA9685_init+0x7c>
		return PCA_ERR_INIT_WAKEUP;
 80005a4:	2305      	movs	r3, #5
 80005a6:	e003      	b.n	80005b0 <PCA9685_init+0x84>

    // On attend au moins 500us pour que l'oscillateur se stabilise
	HAL_Delay(1);
 80005a8:	2001      	movs	r0, #1
 80005aa:	f000 f9e1 	bl	8000970 <HAL_Delay>
	return 0;
 80005ae:	2300      	movs	r3, #0
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	3710      	adds	r7, #16
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}

080005b8 <PCA9685_set_pwm>:
 *  @param i2c Généralement &hi2c1 (structure d'STM pour gérer l'I2C)
 *  @param channel Le servomoteur à contrôler (0 à 15)
 *  @param points Le nombre de points ON (0 à PCA_PWM_RANGE)
 *  @return Un code d'erreur
 */
int PCA9685_set_pwm(I2C_HandleTypeDef *i2c, uint8_t channel, float points) {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b086      	sub	sp, #24
 80005bc:	af00      	add	r7, sp, #0
 80005be:	60f8      	str	r0, [r7, #12]
 80005c0:	460b      	mov	r3, r1
 80005c2:	ed87 0a01 	vstr	s0, [r7, #4]
 80005c6:	72fb      	strb	r3, [r7, #11]
	if (channel < 0) return PCA_ERR_CHAN_TOO_SMALL;
	if (channel > 16) return PCA_ERR_CHAN_TOO_BIG;
 80005c8:	7afb      	ldrb	r3, [r7, #11]
 80005ca:	2b10      	cmp	r3, #16
 80005cc:	d901      	bls.n	80005d2 <PCA9685_set_pwm+0x1a>
 80005ce:	2307      	movs	r3, #7
 80005d0:	e02c      	b.n	800062c <PCA9685_set_pwm+0x74>

	uint16_t on_count = map(points, 0, PCA_PWM_RANGE, PCA_PWM_MIN, PCA_PWM_MAX);
 80005d2:	ed9f 2a18 	vldr	s4, [pc, #96]	; 8000634 <PCA9685_set_pwm+0x7c>
 80005d6:	eddf 1a18 	vldr	s3, [pc, #96]	; 8000638 <PCA9685_set_pwm+0x80>
 80005da:	ed9f 1a18 	vldr	s2, [pc, #96]	; 800063c <PCA9685_set_pwm+0x84>
 80005de:	eddf 0a18 	vldr	s1, [pc, #96]	; 8000640 <PCA9685_set_pwm+0x88>
 80005e2:	ed97 0a01 	vldr	s0, [r7, #4]
 80005e6:	f7ff ff00 	bl	80003ea <map>
 80005ea:	4603      	mov	r3, r0
 80005ec:	82fb      	strh	r3, [r7, #22]

	if (on_count > PCA_PWM_MAX) return PCA_ERR_COUNT_TOO_BIG;
 80005ee:	8afb      	ldrh	r3, [r7, #22]
 80005f0:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 80005f4:	d901      	bls.n	80005fa <PCA9685_set_pwm+0x42>
 80005f6:	2309      	movs	r3, #9
 80005f8:	e018      	b.n	800062c <PCA9685_set_pwm+0x74>
	if (on_count < PCA_PWM_MIN) return PCA_ERR_COUNT_TOO_SMALL;
 80005fa:	8afb      	ldrh	r3, [r7, #22]
 80005fc:	2ba2      	cmp	r3, #162	; 0xa2
 80005fe:	d801      	bhi.n	8000604 <PCA9685_set_pwm+0x4c>
 8000600:	2308      	movs	r3, #8
 8000602:	e013      	b.n	800062c <PCA9685_set_pwm+0x74>

	uint8_t data[2] = {on_count & 0xff, (on_count >> 8) & 0xff};
 8000604:	8afb      	ldrh	r3, [r7, #22]
 8000606:	b2db      	uxtb	r3, r3
 8000608:	753b      	strb	r3, [r7, #20]
 800060a:	8afb      	ldrh	r3, [r7, #22]
 800060c:	0a1b      	lsrs	r3, r3, #8
 800060e:	b29b      	uxth	r3, r3
 8000610:	b2db      	uxtb	r3, r3
 8000612:	757b      	strb	r3, [r7, #21]
	return PCA9685_write_data(i2c, PCA_REG_CHAN0_OFF_L + channel*4, data, 2);
 8000614:	7afb      	ldrb	r3, [r7, #11]
 8000616:	3302      	adds	r3, #2
 8000618:	b2db      	uxtb	r3, r3
 800061a:	009b      	lsls	r3, r3, #2
 800061c:	b2d9      	uxtb	r1, r3
 800061e:	f107 0214 	add.w	r2, r7, #20
 8000622:	2302      	movs	r3, #2
 8000624:	68f8      	ldr	r0, [r7, #12]
 8000626:	f7ff ff2c 	bl	8000482 <PCA9685_write_data>
 800062a:	4603      	mov	r3, r0
}
 800062c:	4618      	mov	r0, r3
 800062e:	3718      	adds	r7, #24
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	43e10000 	.word	0x43e10000
 8000638:	43230000 	.word	0x43230000
 800063c:	438f8000 	.word	0x438f8000
 8000640:	00000000 	.word	0x00000000

08000644 <PCA9685_set_cycle>:
 *  @param i2c Généralement &hi2c1 (structure d'STM pour gérer l'I2C)
 *  @param channel Le servomoteur à contrôler (0 à 15)
 *  @param duty_cycle La valeur du cycle (0 à 1)
 *  @return Un code d'erreur
 */
int PCA9685_set_cycle(I2C_HandleTypeDef *i2c, uint8_t channel, float duty_cycle) {
 8000644:	b580      	push	{r7, lr}
 8000646:	b086      	sub	sp, #24
 8000648:	af00      	add	r7, sp, #0
 800064a:	60f8      	str	r0, [r7, #12]
 800064c:	460b      	mov	r3, r1
 800064e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000652:	72fb      	strb	r3, [r7, #11]
	if (channel < 0) return PCA_ERR_CHAN_TOO_SMALL;
	if (channel > 16) return PCA_ERR_CHAN_TOO_BIG;
 8000654:	7afb      	ldrb	r3, [r7, #11]
 8000656:	2b10      	cmp	r3, #16
 8000658:	d901      	bls.n	800065e <PCA9685_set_cycle+0x1a>
 800065a:	2307      	movs	r3, #7
 800065c:	e02b      	b.n	80006b6 <PCA9685_set_cycle+0x72>

	if (duty_cycle < 0) return PCA_ERR_CYCLE_TOO_SMALL;
 800065e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000662:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800066a:	d501      	bpl.n	8000670 <PCA9685_set_cycle+0x2c>
 800066c:	2310      	movs	r3, #16
 800066e:	e022      	b.n	80006b6 <PCA9685_set_cycle+0x72>
	if (duty_cycle > 1) return PCA_ERR_CYCLE_TOO_BIG;
 8000670:	edd7 7a01 	vldr	s15, [r7, #4]
 8000674:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000678:	eef4 7ac7 	vcmpe.f32	s15, s14
 800067c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000680:	dd01      	ble.n	8000686 <PCA9685_set_cycle+0x42>
 8000682:	2311      	movs	r3, #17
 8000684:	e017      	b.n	80006b6 <PCA9685_set_cycle+0x72>

	uint16_t points = (uint16_t) (duty_cycle*PCA_PWM_RANGE);
 8000686:	edd7 7a01 	vldr	s15, [r7, #4]
 800068a:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80006c0 <PCA9685_set_cycle+0x7c>
 800068e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000692:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000696:	ee17 3a90 	vmov	r3, s15
 800069a:	82fb      	strh	r3, [r7, #22]
	return PCA9685_set_pwm(i2c, channel, points);
 800069c:	8afb      	ldrh	r3, [r7, #22]
 800069e:	ee07 3a90 	vmov	s15, r3
 80006a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80006a6:	7afb      	ldrb	r3, [r7, #11]
 80006a8:	eeb0 0a67 	vmov.f32	s0, s15
 80006ac:	4619      	mov	r1, r3
 80006ae:	68f8      	ldr	r0, [r7, #12]
 80006b0:	f7ff ff82 	bl	80005b8 <PCA9685_set_pwm>
 80006b4:	4603      	mov	r3, r0
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	3718      	adds	r7, #24
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	438f8000 	.word	0x438f8000

080006c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ca:	4b0f      	ldr	r3, [pc, #60]	; (8000708 <HAL_MspInit+0x44>)
 80006cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006ce:	4a0e      	ldr	r2, [pc, #56]	; (8000708 <HAL_MspInit+0x44>)
 80006d0:	f043 0301 	orr.w	r3, r3, #1
 80006d4:	6613      	str	r3, [r2, #96]	; 0x60
 80006d6:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <HAL_MspInit+0x44>)
 80006d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006da:	f003 0301 	and.w	r3, r3, #1
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e2:	4b09      	ldr	r3, [pc, #36]	; (8000708 <HAL_MspInit+0x44>)
 80006e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006e6:	4a08      	ldr	r2, [pc, #32]	; (8000708 <HAL_MspInit+0x44>)
 80006e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ec:	6593      	str	r3, [r2, #88]	; 0x58
 80006ee:	4b06      	ldr	r3, [pc, #24]	; (8000708 <HAL_MspInit+0x44>)
 80006f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f6:	603b      	str	r3, [r7, #0]
 80006f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006fa:	bf00      	nop
 80006fc:	370c      	adds	r7, #12
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	40021000 	.word	0x40021000

0800070c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b09e      	sub	sp, #120	; 0x78
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000714:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
 800071e:	609a      	str	r2, [r3, #8]
 8000720:	60da      	str	r2, [r3, #12]
 8000722:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000724:	f107 0310 	add.w	r3, r7, #16
 8000728:	2254      	movs	r2, #84	; 0x54
 800072a:	2100      	movs	r1, #0
 800072c:	4618      	mov	r0, r3
 800072e:	f002 f943 	bl	80029b8 <memset>
  if(hi2c->Instance==I2C1)
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	4a1f      	ldr	r2, [pc, #124]	; (80007b4 <HAL_I2C_MspInit+0xa8>)
 8000738:	4293      	cmp	r3, r2
 800073a:	d137      	bne.n	80007ac <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800073c:	2340      	movs	r3, #64	; 0x40
 800073e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000740:	2300      	movs	r3, #0
 8000742:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000744:	f107 0310 	add.w	r3, r7, #16
 8000748:	4618      	mov	r0, r3
 800074a:	f001 fe1b 	bl	8002384 <HAL_RCCEx_PeriphCLKConfig>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000754:	f7ff fe44 	bl	80003e0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000758:	4b17      	ldr	r3, [pc, #92]	; (80007b8 <HAL_I2C_MspInit+0xac>)
 800075a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075c:	4a16      	ldr	r2, [pc, #88]	; (80007b8 <HAL_I2C_MspInit+0xac>)
 800075e:	f043 0301 	orr.w	r3, r3, #1
 8000762:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000764:	4b14      	ldr	r3, [pc, #80]	; (80007b8 <HAL_I2C_MspInit+0xac>)
 8000766:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000768:	f003 0301 	and.w	r3, r3, #1
 800076c:	60fb      	str	r3, [r7, #12]
 800076e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000770:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000774:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000776:	2312      	movs	r3, #18
 8000778:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077a:	2300      	movs	r3, #0
 800077c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800077e:	2303      	movs	r3, #3
 8000780:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000782:	2304      	movs	r3, #4
 8000784:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000786:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800078a:	4619      	mov	r1, r3
 800078c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000790:	f000 f9f8 	bl	8000b84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000794:	4b08      	ldr	r3, [pc, #32]	; (80007b8 <HAL_I2C_MspInit+0xac>)
 8000796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000798:	4a07      	ldr	r2, [pc, #28]	; (80007b8 <HAL_I2C_MspInit+0xac>)
 800079a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800079e:	6593      	str	r3, [r2, #88]	; 0x58
 80007a0:	4b05      	ldr	r3, [pc, #20]	; (80007b8 <HAL_I2C_MspInit+0xac>)
 80007a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007a8:	60bb      	str	r3, [r7, #8]
 80007aa:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80007ac:	bf00      	nop
 80007ae:	3778      	adds	r7, #120	; 0x78
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	40005400 	.word	0x40005400
 80007b8:	40021000 	.word	0x40021000

080007bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007c0:	e7fe      	b.n	80007c0 <NMI_Handler+0x4>

080007c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007c2:	b480      	push	{r7}
 80007c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007c6:	e7fe      	b.n	80007c6 <HardFault_Handler+0x4>

080007c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007cc:	e7fe      	b.n	80007cc <MemManage_Handler+0x4>

080007ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ce:	b480      	push	{r7}
 80007d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007d2:	e7fe      	b.n	80007d2 <BusFault_Handler+0x4>

080007d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007d8:	e7fe      	b.n	80007d8 <UsageFault_Handler+0x4>

080007da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007da:	b480      	push	{r7}
 80007dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007de:	bf00      	nop
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr

080007e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007ec:	bf00      	nop
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr

080007f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007f6:	b480      	push	{r7}
 80007f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007fa:	bf00      	nop
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr

08000804 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000808:	f000 f892 	bl	8000930 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800080c:	bf00      	nop
 800080e:	bd80      	pop	{r7, pc}

08000810 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000814:	4b06      	ldr	r3, [pc, #24]	; (8000830 <SystemInit+0x20>)
 8000816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800081a:	4a05      	ldr	r2, [pc, #20]	; (8000830 <SystemInit+0x20>)
 800081c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000820:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000824:	bf00      	nop
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	e000ed00 	.word	0xe000ed00

08000834 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000834:	f8df d034 	ldr.w	sp, [pc, #52]	; 800086c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000838:	f7ff ffea 	bl	8000810 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800083c:	480c      	ldr	r0, [pc, #48]	; (8000870 <LoopForever+0x6>)
  ldr r1, =_edata
 800083e:	490d      	ldr	r1, [pc, #52]	; (8000874 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000840:	4a0d      	ldr	r2, [pc, #52]	; (8000878 <LoopForever+0xe>)
  movs r3, #0
 8000842:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000844:	e002      	b.n	800084c <LoopCopyDataInit>

08000846 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000846:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000848:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800084a:	3304      	adds	r3, #4

0800084c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800084c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800084e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000850:	d3f9      	bcc.n	8000846 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000852:	4a0a      	ldr	r2, [pc, #40]	; (800087c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000854:	4c0a      	ldr	r4, [pc, #40]	; (8000880 <LoopForever+0x16>)
  movs r3, #0
 8000856:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000858:	e001      	b.n	800085e <LoopFillZerobss>

0800085a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800085a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800085c:	3204      	adds	r2, #4

0800085e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800085e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000860:	d3fb      	bcc.n	800085a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000862:	f002 f877 	bl	8002954 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000866:	f7ff fcb1 	bl	80001cc <main>

0800086a <LoopForever>:

LoopForever:
    b LoopForever
 800086a:	e7fe      	b.n	800086a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800086c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000870:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000874:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000878:	08002a28 	.word	0x08002a28
  ldr r2, =_sbss
 800087c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000880:	20000080 	.word	0x20000080

08000884 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000884:	e7fe      	b.n	8000884 <ADC1_IRQHandler>

08000886 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000886:	b580      	push	{r7, lr}
 8000888:	b082      	sub	sp, #8
 800088a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800088c:	2300      	movs	r3, #0
 800088e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000890:	2003      	movs	r0, #3
 8000892:	f000 f943 	bl	8000b1c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000896:	200f      	movs	r0, #15
 8000898:	f000 f80e 	bl	80008b8 <HAL_InitTick>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d002      	beq.n	80008a8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80008a2:	2301      	movs	r3, #1
 80008a4:	71fb      	strb	r3, [r7, #7]
 80008a6:	e001      	b.n	80008ac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80008a8:	f7ff ff0c 	bl	80006c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80008ac:	79fb      	ldrb	r3, [r7, #7]
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
	...

080008b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b084      	sub	sp, #16
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80008c0:	2300      	movs	r3, #0
 80008c2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80008c4:	4b17      	ldr	r3, [pc, #92]	; (8000924 <HAL_InitTick+0x6c>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d023      	beq.n	8000914 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80008cc:	4b16      	ldr	r3, [pc, #88]	; (8000928 <HAL_InitTick+0x70>)
 80008ce:	681a      	ldr	r2, [r3, #0]
 80008d0:	4b14      	ldr	r3, [pc, #80]	; (8000924 <HAL_InitTick+0x6c>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	4619      	mov	r1, r3
 80008d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008da:	fbb3 f3f1 	udiv	r3, r3, r1
 80008de:	fbb2 f3f3 	udiv	r3, r2, r3
 80008e2:	4618      	mov	r0, r3
 80008e4:	f000 f941 	bl	8000b6a <HAL_SYSTICK_Config>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d10f      	bne.n	800090e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	2b0f      	cmp	r3, #15
 80008f2:	d809      	bhi.n	8000908 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008f4:	2200      	movs	r2, #0
 80008f6:	6879      	ldr	r1, [r7, #4]
 80008f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008fc:	f000 f919 	bl	8000b32 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000900:	4a0a      	ldr	r2, [pc, #40]	; (800092c <HAL_InitTick+0x74>)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	6013      	str	r3, [r2, #0]
 8000906:	e007      	b.n	8000918 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000908:	2301      	movs	r3, #1
 800090a:	73fb      	strb	r3, [r7, #15]
 800090c:	e004      	b.n	8000918 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800090e:	2301      	movs	r3, #1
 8000910:	73fb      	strb	r3, [r7, #15]
 8000912:	e001      	b.n	8000918 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000914:	2301      	movs	r3, #1
 8000916:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000918:	7bfb      	ldrb	r3, [r7, #15]
}
 800091a:	4618      	mov	r0, r3
 800091c:	3710      	adds	r7, #16
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	20000008 	.word	0x20000008
 8000928:	20000000 	.word	0x20000000
 800092c:	20000004 	.word	0x20000004

08000930 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000934:	4b06      	ldr	r3, [pc, #24]	; (8000950 <HAL_IncTick+0x20>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	461a      	mov	r2, r3
 800093a:	4b06      	ldr	r3, [pc, #24]	; (8000954 <HAL_IncTick+0x24>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4413      	add	r3, r2
 8000940:	4a04      	ldr	r2, [pc, #16]	; (8000954 <HAL_IncTick+0x24>)
 8000942:	6013      	str	r3, [r2, #0]
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	20000008 	.word	0x20000008
 8000954:	2000007c 	.word	0x2000007c

08000958 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  return uwTick;
 800095c:	4b03      	ldr	r3, [pc, #12]	; (800096c <HAL_GetTick+0x14>)
 800095e:	681b      	ldr	r3, [r3, #0]
}
 8000960:	4618      	mov	r0, r3
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	2000007c 	.word	0x2000007c

08000970 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000978:	f7ff ffee 	bl	8000958 <HAL_GetTick>
 800097c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000988:	d005      	beq.n	8000996 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800098a:	4b0a      	ldr	r3, [pc, #40]	; (80009b4 <HAL_Delay+0x44>)
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	461a      	mov	r2, r3
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	4413      	add	r3, r2
 8000994:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000996:	bf00      	nop
 8000998:	f7ff ffde 	bl	8000958 <HAL_GetTick>
 800099c:	4602      	mov	r2, r0
 800099e:	68bb      	ldr	r3, [r7, #8]
 80009a0:	1ad3      	subs	r3, r2, r3
 80009a2:	68fa      	ldr	r2, [r7, #12]
 80009a4:	429a      	cmp	r2, r3
 80009a6:	d8f7      	bhi.n	8000998 <HAL_Delay+0x28>
  {
  }
}
 80009a8:	bf00      	nop
 80009aa:	bf00      	nop
 80009ac:	3710      	adds	r7, #16
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	20000008 	.word	0x20000008

080009b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b085      	sub	sp, #20
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	f003 0307 	and.w	r3, r3, #7
 80009c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009c8:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <__NVIC_SetPriorityGrouping+0x44>)
 80009ca:	68db      	ldr	r3, [r3, #12]
 80009cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009ce:	68ba      	ldr	r2, [r7, #8]
 80009d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009d4:	4013      	ands	r3, r2
 80009d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009ea:	4a04      	ldr	r2, [pc, #16]	; (80009fc <__NVIC_SetPriorityGrouping+0x44>)
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	60d3      	str	r3, [r2, #12]
}
 80009f0:	bf00      	nop
 80009f2:	3714      	adds	r7, #20
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr
 80009fc:	e000ed00 	.word	0xe000ed00

08000a00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a04:	4b04      	ldr	r3, [pc, #16]	; (8000a18 <__NVIC_GetPriorityGrouping+0x18>)
 8000a06:	68db      	ldr	r3, [r3, #12]
 8000a08:	0a1b      	lsrs	r3, r3, #8
 8000a0a:	f003 0307 	and.w	r3, r3, #7
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr
 8000a18:	e000ed00 	.word	0xe000ed00

08000a1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	4603      	mov	r3, r0
 8000a24:	6039      	str	r1, [r7, #0]
 8000a26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	db0a      	blt.n	8000a46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	b2da      	uxtb	r2, r3
 8000a34:	490c      	ldr	r1, [pc, #48]	; (8000a68 <__NVIC_SetPriority+0x4c>)
 8000a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3a:	0112      	lsls	r2, r2, #4
 8000a3c:	b2d2      	uxtb	r2, r2
 8000a3e:	440b      	add	r3, r1
 8000a40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a44:	e00a      	b.n	8000a5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	b2da      	uxtb	r2, r3
 8000a4a:	4908      	ldr	r1, [pc, #32]	; (8000a6c <__NVIC_SetPriority+0x50>)
 8000a4c:	79fb      	ldrb	r3, [r7, #7]
 8000a4e:	f003 030f 	and.w	r3, r3, #15
 8000a52:	3b04      	subs	r3, #4
 8000a54:	0112      	lsls	r2, r2, #4
 8000a56:	b2d2      	uxtb	r2, r2
 8000a58:	440b      	add	r3, r1
 8000a5a:	761a      	strb	r2, [r3, #24]
}
 8000a5c:	bf00      	nop
 8000a5e:	370c      	adds	r7, #12
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr
 8000a68:	e000e100 	.word	0xe000e100
 8000a6c:	e000ed00 	.word	0xe000ed00

08000a70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b089      	sub	sp, #36	; 0x24
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	60f8      	str	r0, [r7, #12]
 8000a78:	60b9      	str	r1, [r7, #8]
 8000a7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	f003 0307 	and.w	r3, r3, #7
 8000a82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a84:	69fb      	ldr	r3, [r7, #28]
 8000a86:	f1c3 0307 	rsb	r3, r3, #7
 8000a8a:	2b04      	cmp	r3, #4
 8000a8c:	bf28      	it	cs
 8000a8e:	2304      	movcs	r3, #4
 8000a90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a92:	69fb      	ldr	r3, [r7, #28]
 8000a94:	3304      	adds	r3, #4
 8000a96:	2b06      	cmp	r3, #6
 8000a98:	d902      	bls.n	8000aa0 <NVIC_EncodePriority+0x30>
 8000a9a:	69fb      	ldr	r3, [r7, #28]
 8000a9c:	3b03      	subs	r3, #3
 8000a9e:	e000      	b.n	8000aa2 <NVIC_EncodePriority+0x32>
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aa4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000aa8:	69bb      	ldr	r3, [r7, #24]
 8000aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000aae:	43da      	mvns	r2, r3
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	401a      	ands	r2, r3
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ab8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac2:	43d9      	mvns	r1, r3
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac8:	4313      	orrs	r3, r2
         );
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3724      	adds	r7, #36	; 0x24
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
	...

08000ad8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	3b01      	subs	r3, #1
 8000ae4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ae8:	d301      	bcc.n	8000aee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000aea:	2301      	movs	r3, #1
 8000aec:	e00f      	b.n	8000b0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aee:	4a0a      	ldr	r2, [pc, #40]	; (8000b18 <SysTick_Config+0x40>)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	3b01      	subs	r3, #1
 8000af4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000af6:	210f      	movs	r1, #15
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000afc:	f7ff ff8e 	bl	8000a1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b00:	4b05      	ldr	r3, [pc, #20]	; (8000b18 <SysTick_Config+0x40>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b06:	4b04      	ldr	r3, [pc, #16]	; (8000b18 <SysTick_Config+0x40>)
 8000b08:	2207      	movs	r2, #7
 8000b0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b0c:	2300      	movs	r3, #0
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	e000e010 	.word	0xe000e010

08000b1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b24:	6878      	ldr	r0, [r7, #4]
 8000b26:	f7ff ff47 	bl	80009b8 <__NVIC_SetPriorityGrouping>
}
 8000b2a:	bf00      	nop
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}

08000b32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b32:	b580      	push	{r7, lr}
 8000b34:	b086      	sub	sp, #24
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	4603      	mov	r3, r0
 8000b3a:	60b9      	str	r1, [r7, #8]
 8000b3c:	607a      	str	r2, [r7, #4]
 8000b3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b40:	2300      	movs	r3, #0
 8000b42:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b44:	f7ff ff5c 	bl	8000a00 <__NVIC_GetPriorityGrouping>
 8000b48:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b4a:	687a      	ldr	r2, [r7, #4]
 8000b4c:	68b9      	ldr	r1, [r7, #8]
 8000b4e:	6978      	ldr	r0, [r7, #20]
 8000b50:	f7ff ff8e 	bl	8000a70 <NVIC_EncodePriority>
 8000b54:	4602      	mov	r2, r0
 8000b56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b5a:	4611      	mov	r1, r2
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f7ff ff5d 	bl	8000a1c <__NVIC_SetPriority>
}
 8000b62:	bf00      	nop
 8000b64:	3718      	adds	r7, #24
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}

08000b6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	b082      	sub	sp, #8
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b72:	6878      	ldr	r0, [r7, #4]
 8000b74:	f7ff ffb0 	bl	8000ad8 <SysTick_Config>
 8000b78:	4603      	mov	r3, r0
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
	...

08000b84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b087      	sub	sp, #28
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
 8000b8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b92:	e148      	b.n	8000e26 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	2101      	movs	r1, #1
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	f000 813a 	beq.w	8000e20 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	f003 0303 	and.w	r3, r3, #3
 8000bb4:	2b01      	cmp	r3, #1
 8000bb6:	d005      	beq.n	8000bc4 <HAL_GPIO_Init+0x40>
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	f003 0303 	and.w	r3, r3, #3
 8000bc0:	2b02      	cmp	r3, #2
 8000bc2:	d130      	bne.n	8000c26 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	689b      	ldr	r3, [r3, #8]
 8000bc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	005b      	lsls	r3, r3, #1
 8000bce:	2203      	movs	r2, #3
 8000bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd4:	43db      	mvns	r3, r3
 8000bd6:	693a      	ldr	r2, [r7, #16]
 8000bd8:	4013      	ands	r3, r2
 8000bda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	68da      	ldr	r2, [r3, #12]
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	005b      	lsls	r3, r3, #1
 8000be4:	fa02 f303 	lsl.w	r3, r2, r3
 8000be8:	693a      	ldr	r2, [r7, #16]
 8000bea:	4313      	orrs	r3, r2
 8000bec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	693a      	ldr	r2, [r7, #16]
 8000bf2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000c02:	43db      	mvns	r3, r3
 8000c04:	693a      	ldr	r2, [r7, #16]
 8000c06:	4013      	ands	r3, r2
 8000c08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	091b      	lsrs	r3, r3, #4
 8000c10:	f003 0201 	and.w	r2, r3, #1
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	693a      	ldr	r2, [r7, #16]
 8000c24:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	f003 0303 	and.w	r3, r3, #3
 8000c2e:	2b03      	cmp	r3, #3
 8000c30:	d017      	beq.n	8000c62 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	68db      	ldr	r3, [r3, #12]
 8000c36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	005b      	lsls	r3, r3, #1
 8000c3c:	2203      	movs	r2, #3
 8000c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c42:	43db      	mvns	r3, r3
 8000c44:	693a      	ldr	r2, [r7, #16]
 8000c46:	4013      	ands	r3, r2
 8000c48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	689a      	ldr	r2, [r3, #8]
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	005b      	lsls	r3, r3, #1
 8000c52:	fa02 f303 	lsl.w	r3, r2, r3
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	693a      	ldr	r2, [r7, #16]
 8000c60:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	f003 0303 	and.w	r3, r3, #3
 8000c6a:	2b02      	cmp	r3, #2
 8000c6c:	d123      	bne.n	8000cb6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	08da      	lsrs	r2, r3, #3
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	3208      	adds	r2, #8
 8000c76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	f003 0307 	and.w	r3, r3, #7
 8000c82:	009b      	lsls	r3, r3, #2
 8000c84:	220f      	movs	r2, #15
 8000c86:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8a:	43db      	mvns	r3, r3
 8000c8c:	693a      	ldr	r2, [r7, #16]
 8000c8e:	4013      	ands	r3, r2
 8000c90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	691a      	ldr	r2, [r3, #16]
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	f003 0307 	and.w	r3, r3, #7
 8000c9c:	009b      	lsls	r3, r3, #2
 8000c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	08da      	lsrs	r2, r3, #3
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	3208      	adds	r2, #8
 8000cb0:	6939      	ldr	r1, [r7, #16]
 8000cb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	005b      	lsls	r3, r3, #1
 8000cc0:	2203      	movs	r2, #3
 8000cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc6:	43db      	mvns	r3, r3
 8000cc8:	693a      	ldr	r2, [r7, #16]
 8000cca:	4013      	ands	r3, r2
 8000ccc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	f003 0203 	and.w	r2, r3, #3
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	005b      	lsls	r3, r3, #1
 8000cda:	fa02 f303 	lsl.w	r3, r2, r3
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	693a      	ldr	r2, [r7, #16]
 8000ce8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	f000 8094 	beq.w	8000e20 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cf8:	4b52      	ldr	r3, [pc, #328]	; (8000e44 <HAL_GPIO_Init+0x2c0>)
 8000cfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cfc:	4a51      	ldr	r2, [pc, #324]	; (8000e44 <HAL_GPIO_Init+0x2c0>)
 8000cfe:	f043 0301 	orr.w	r3, r3, #1
 8000d02:	6613      	str	r3, [r2, #96]	; 0x60
 8000d04:	4b4f      	ldr	r3, [pc, #316]	; (8000e44 <HAL_GPIO_Init+0x2c0>)
 8000d06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d08:	f003 0301 	and.w	r3, r3, #1
 8000d0c:	60bb      	str	r3, [r7, #8]
 8000d0e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d10:	4a4d      	ldr	r2, [pc, #308]	; (8000e48 <HAL_GPIO_Init+0x2c4>)
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	089b      	lsrs	r3, r3, #2
 8000d16:	3302      	adds	r3, #2
 8000d18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	f003 0303 	and.w	r3, r3, #3
 8000d24:	009b      	lsls	r3, r3, #2
 8000d26:	220f      	movs	r2, #15
 8000d28:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2c:	43db      	mvns	r3, r3
 8000d2e:	693a      	ldr	r2, [r7, #16]
 8000d30:	4013      	ands	r3, r2
 8000d32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d3a:	d00d      	beq.n	8000d58 <HAL_GPIO_Init+0x1d4>
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	4a43      	ldr	r2, [pc, #268]	; (8000e4c <HAL_GPIO_Init+0x2c8>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d007      	beq.n	8000d54 <HAL_GPIO_Init+0x1d0>
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	4a42      	ldr	r2, [pc, #264]	; (8000e50 <HAL_GPIO_Init+0x2cc>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d101      	bne.n	8000d50 <HAL_GPIO_Init+0x1cc>
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	e004      	b.n	8000d5a <HAL_GPIO_Init+0x1d6>
 8000d50:	2307      	movs	r3, #7
 8000d52:	e002      	b.n	8000d5a <HAL_GPIO_Init+0x1d6>
 8000d54:	2301      	movs	r3, #1
 8000d56:	e000      	b.n	8000d5a <HAL_GPIO_Init+0x1d6>
 8000d58:	2300      	movs	r3, #0
 8000d5a:	697a      	ldr	r2, [r7, #20]
 8000d5c:	f002 0203 	and.w	r2, r2, #3
 8000d60:	0092      	lsls	r2, r2, #2
 8000d62:	4093      	lsls	r3, r2
 8000d64:	693a      	ldr	r2, [r7, #16]
 8000d66:	4313      	orrs	r3, r2
 8000d68:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d6a:	4937      	ldr	r1, [pc, #220]	; (8000e48 <HAL_GPIO_Init+0x2c4>)
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	089b      	lsrs	r3, r3, #2
 8000d70:	3302      	adds	r3, #2
 8000d72:	693a      	ldr	r2, [r7, #16]
 8000d74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000d78:	4b36      	ldr	r3, [pc, #216]	; (8000e54 <HAL_GPIO_Init+0x2d0>)
 8000d7a:	689b      	ldr	r3, [r3, #8]
 8000d7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	43db      	mvns	r3, r3
 8000d82:	693a      	ldr	r2, [r7, #16]
 8000d84:	4013      	ands	r3, r2
 8000d86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d003      	beq.n	8000d9c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000d94:	693a      	ldr	r2, [r7, #16]
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000d9c:	4a2d      	ldr	r2, [pc, #180]	; (8000e54 <HAL_GPIO_Init+0x2d0>)
 8000d9e:	693b      	ldr	r3, [r7, #16]
 8000da0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000da2:	4b2c      	ldr	r3, [pc, #176]	; (8000e54 <HAL_GPIO_Init+0x2d0>)
 8000da4:	68db      	ldr	r3, [r3, #12]
 8000da6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	43db      	mvns	r3, r3
 8000dac:	693a      	ldr	r2, [r7, #16]
 8000dae:	4013      	ands	r3, r2
 8000db0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d003      	beq.n	8000dc6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000dc6:	4a23      	ldr	r2, [pc, #140]	; (8000e54 <HAL_GPIO_Init+0x2d0>)
 8000dc8:	693b      	ldr	r3, [r7, #16]
 8000dca:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000dcc:	4b21      	ldr	r3, [pc, #132]	; (8000e54 <HAL_GPIO_Init+0x2d0>)
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	43db      	mvns	r3, r3
 8000dd6:	693a      	ldr	r2, [r7, #16]
 8000dd8:	4013      	ands	r3, r2
 8000dda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d003      	beq.n	8000df0 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8000de8:	693a      	ldr	r2, [r7, #16]
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	4313      	orrs	r3, r2
 8000dee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000df0:	4a18      	ldr	r2, [pc, #96]	; (8000e54 <HAL_GPIO_Init+0x2d0>)
 8000df2:	693b      	ldr	r3, [r7, #16]
 8000df4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000df6:	4b17      	ldr	r3, [pc, #92]	; (8000e54 <HAL_GPIO_Init+0x2d0>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	43db      	mvns	r3, r3
 8000e00:	693a      	ldr	r2, [r7, #16]
 8000e02:	4013      	ands	r3, r2
 8000e04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d003      	beq.n	8000e1a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	4313      	orrs	r3, r2
 8000e18:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e1a:	4a0e      	ldr	r2, [pc, #56]	; (8000e54 <HAL_GPIO_Init+0x2d0>)
 8000e1c:	693b      	ldr	r3, [r7, #16]
 8000e1e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	3301      	adds	r3, #1
 8000e24:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	f47f aeaf 	bne.w	8000b94 <HAL_GPIO_Init+0x10>
  }
}
 8000e36:	bf00      	nop
 8000e38:	bf00      	nop
 8000e3a:	371c      	adds	r7, #28
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	40021000 	.word	0x40021000
 8000e48:	40010000 	.word	0x40010000
 8000e4c:	48000400 	.word	0x48000400
 8000e50:	48000800 	.word	0x48000800
 8000e54:	40010400 	.word	0x40010400

08000e58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	460b      	mov	r3, r1
 8000e62:	807b      	strh	r3, [r7, #2]
 8000e64:	4613      	mov	r3, r2
 8000e66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e68:	787b      	ldrb	r3, [r7, #1]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d003      	beq.n	8000e76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e6e:	887a      	ldrh	r2, [r7, #2]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e74:	e002      	b.n	8000e7c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e76:	887a      	ldrh	r2, [r7, #2]
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e7c:	bf00      	nop
 8000e7e:	370c      	adds	r7, #12
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr

08000e88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d101      	bne.n	8000e9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
 8000e98:	e081      	b.n	8000f9e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d106      	bne.n	8000eb4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f7ff fc2c 	bl	800070c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2224      	movs	r2, #36	; 0x24
 8000eb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f022 0201 	bic.w	r2, r2, #1
 8000eca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	685a      	ldr	r2, [r3, #4]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000ed8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	689a      	ldr	r2, [r3, #8]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000ee8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	68db      	ldr	r3, [r3, #12]
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d107      	bne.n	8000f02 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	689a      	ldr	r2, [r3, #8]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	e006      	b.n	8000f10 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	689a      	ldr	r2, [r3, #8]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000f0e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	2b02      	cmp	r3, #2
 8000f16:	d104      	bne.n	8000f22 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f20:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	687a      	ldr	r2, [r7, #4]
 8000f2a:	6812      	ldr	r2, [r2, #0]
 8000f2c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f34:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	68da      	ldr	r2, [r3, #12]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000f44:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	691a      	ldr	r2, [r3, #16]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	695b      	ldr	r3, [r3, #20]
 8000f4e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	699b      	ldr	r3, [r3, #24]
 8000f56:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	430a      	orrs	r2, r1
 8000f5e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	69d9      	ldr	r1, [r3, #28]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6a1a      	ldr	r2, [r3, #32]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f042 0201 	orr.w	r2, r2, #1
 8000f7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2200      	movs	r2, #0
 8000f84:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2220      	movs	r2, #32
 8000f8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2200      	movs	r2, #0
 8000f92:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2200      	movs	r2, #0
 8000f98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000f9c:	2300      	movs	r3, #0
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
	...

08000fa8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b088      	sub	sp, #32
 8000fac:	af02      	add	r7, sp, #8
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	607a      	str	r2, [r7, #4]
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	817b      	strh	r3, [r7, #10]
 8000fb8:	4613      	mov	r3, r2
 8000fba:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	2b20      	cmp	r3, #32
 8000fc6:	f040 80da 	bne.w	800117e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d101      	bne.n	8000fd8 <HAL_I2C_Master_Transmit+0x30>
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	e0d3      	b.n	8001180 <HAL_I2C_Master_Transmit+0x1d8>
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	2201      	movs	r2, #1
 8000fdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000fe0:	f7ff fcba 	bl	8000958 <HAL_GetTick>
 8000fe4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	9300      	str	r3, [sp, #0]
 8000fea:	2319      	movs	r3, #25
 8000fec:	2201      	movs	r2, #1
 8000fee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ff2:	68f8      	ldr	r0, [r7, #12]
 8000ff4:	f000 f8f0 	bl	80011d8 <I2C_WaitOnFlagUntilTimeout>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	e0be      	b.n	8001180 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	2221      	movs	r2, #33	; 0x21
 8001006:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	2210      	movs	r2, #16
 800100e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	2200      	movs	r2, #0
 8001016:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	687a      	ldr	r2, [r7, #4]
 800101c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	893a      	ldrh	r2, [r7, #8]
 8001022:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	2200      	movs	r2, #0
 8001028:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800102e:	b29b      	uxth	r3, r3
 8001030:	2bff      	cmp	r3, #255	; 0xff
 8001032:	d90e      	bls.n	8001052 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	22ff      	movs	r2, #255	; 0xff
 8001038:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800103e:	b2da      	uxtb	r2, r3
 8001040:	8979      	ldrh	r1, [r7, #10]
 8001042:	4b51      	ldr	r3, [pc, #324]	; (8001188 <HAL_I2C_Master_Transmit+0x1e0>)
 8001044:	9300      	str	r3, [sp, #0]
 8001046:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800104a:	68f8      	ldr	r0, [r7, #12]
 800104c:	f000 fa6c 	bl	8001528 <I2C_TransferConfig>
 8001050:	e06c      	b.n	800112c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001056:	b29a      	uxth	r2, r3
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001060:	b2da      	uxtb	r2, r3
 8001062:	8979      	ldrh	r1, [r7, #10]
 8001064:	4b48      	ldr	r3, [pc, #288]	; (8001188 <HAL_I2C_Master_Transmit+0x1e0>)
 8001066:	9300      	str	r3, [sp, #0]
 8001068:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800106c:	68f8      	ldr	r0, [r7, #12]
 800106e:	f000 fa5b 	bl	8001528 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001072:	e05b      	b.n	800112c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001074:	697a      	ldr	r2, [r7, #20]
 8001076:	6a39      	ldr	r1, [r7, #32]
 8001078:	68f8      	ldr	r0, [r7, #12]
 800107a:	f000 f8ed 	bl	8001258 <I2C_WaitOnTXISFlagUntilTimeout>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001084:	2301      	movs	r3, #1
 8001086:	e07b      	b.n	8001180 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800108c:	781a      	ldrb	r2, [r3, #0]
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001098:	1c5a      	adds	r2, r3, #1
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010a2:	b29b      	uxth	r3, r3
 80010a4:	3b01      	subs	r3, #1
 80010a6:	b29a      	uxth	r2, r3
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010b0:	3b01      	subs	r3, #1
 80010b2:	b29a      	uxth	r2, r3
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010bc:	b29b      	uxth	r3, r3
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d034      	beq.n	800112c <HAL_I2C_Master_Transmit+0x184>
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d130      	bne.n	800112c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	9300      	str	r3, [sp, #0]
 80010ce:	6a3b      	ldr	r3, [r7, #32]
 80010d0:	2200      	movs	r2, #0
 80010d2:	2180      	movs	r1, #128	; 0x80
 80010d4:	68f8      	ldr	r0, [r7, #12]
 80010d6:	f000 f87f 	bl	80011d8 <I2C_WaitOnFlagUntilTimeout>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80010e0:	2301      	movs	r3, #1
 80010e2:	e04d      	b.n	8001180 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010e8:	b29b      	uxth	r3, r3
 80010ea:	2bff      	cmp	r3, #255	; 0xff
 80010ec:	d90e      	bls.n	800110c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	22ff      	movs	r2, #255	; 0xff
 80010f2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010f8:	b2da      	uxtb	r2, r3
 80010fa:	8979      	ldrh	r1, [r7, #10]
 80010fc:	2300      	movs	r3, #0
 80010fe:	9300      	str	r3, [sp, #0]
 8001100:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001104:	68f8      	ldr	r0, [r7, #12]
 8001106:	f000 fa0f 	bl	8001528 <I2C_TransferConfig>
 800110a:	e00f      	b.n	800112c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001110:	b29a      	uxth	r2, r3
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800111a:	b2da      	uxtb	r2, r3
 800111c:	8979      	ldrh	r1, [r7, #10]
 800111e:	2300      	movs	r3, #0
 8001120:	9300      	str	r3, [sp, #0]
 8001122:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001126:	68f8      	ldr	r0, [r7, #12]
 8001128:	f000 f9fe 	bl	8001528 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001130:	b29b      	uxth	r3, r3
 8001132:	2b00      	cmp	r3, #0
 8001134:	d19e      	bne.n	8001074 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001136:	697a      	ldr	r2, [r7, #20]
 8001138:	6a39      	ldr	r1, [r7, #32]
 800113a:	68f8      	ldr	r0, [r7, #12]
 800113c:	f000 f8cc 	bl	80012d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	e01a      	b.n	8001180 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	2220      	movs	r2, #32
 8001150:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	6859      	ldr	r1, [r3, #4]
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	4b0b      	ldr	r3, [pc, #44]	; (800118c <HAL_I2C_Master_Transmit+0x1e4>)
 800115e:	400b      	ands	r3, r1
 8001160:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	2220      	movs	r2, #32
 8001166:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	2200      	movs	r2, #0
 800116e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	2200      	movs	r2, #0
 8001176:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800117a:	2300      	movs	r3, #0
 800117c:	e000      	b.n	8001180 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800117e:	2302      	movs	r3, #2
  }
}
 8001180:	4618      	mov	r0, r3
 8001182:	3718      	adds	r7, #24
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	80002000 	.word	0x80002000
 800118c:	fe00e800 	.word	0xfe00e800

08001190 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	699b      	ldr	r3, [r3, #24]
 800119e:	f003 0302 	and.w	r3, r3, #2
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	d103      	bne.n	80011ae <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	2200      	movs	r2, #0
 80011ac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	699b      	ldr	r3, [r3, #24]
 80011b4:	f003 0301 	and.w	r3, r3, #1
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d007      	beq.n	80011cc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	699a      	ldr	r2, [r3, #24]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f042 0201 	orr.w	r2, r2, #1
 80011ca:	619a      	str	r2, [r3, #24]
  }
}
 80011cc:	bf00      	nop
 80011ce:	370c      	adds	r7, #12
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr

080011d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	60f8      	str	r0, [r7, #12]
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	603b      	str	r3, [r7, #0]
 80011e4:	4613      	mov	r3, r2
 80011e6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80011e8:	e022      	b.n	8001230 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80011f0:	d01e      	beq.n	8001230 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80011f2:	f7ff fbb1 	bl	8000958 <HAL_GetTick>
 80011f6:	4602      	mov	r2, r0
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	683a      	ldr	r2, [r7, #0]
 80011fe:	429a      	cmp	r2, r3
 8001200:	d302      	bcc.n	8001208 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d113      	bne.n	8001230 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120c:	f043 0220 	orr.w	r2, r3, #32
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	2220      	movs	r2, #32
 8001218:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	2200      	movs	r2, #0
 8001220:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	2200      	movs	r2, #0
 8001228:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	e00f      	b.n	8001250 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	699a      	ldr	r2, [r3, #24]
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	4013      	ands	r3, r2
 800123a:	68ba      	ldr	r2, [r7, #8]
 800123c:	429a      	cmp	r2, r3
 800123e:	bf0c      	ite	eq
 8001240:	2301      	moveq	r3, #1
 8001242:	2300      	movne	r3, #0
 8001244:	b2db      	uxtb	r3, r3
 8001246:	461a      	mov	r2, r3
 8001248:	79fb      	ldrb	r3, [r7, #7]
 800124a:	429a      	cmp	r2, r3
 800124c:	d0cd      	beq.n	80011ea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800124e:	2300      	movs	r3, #0
}
 8001250:	4618      	mov	r0, r3
 8001252:	3710      	adds	r7, #16
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}

08001258 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	60f8      	str	r0, [r7, #12]
 8001260:	60b9      	str	r1, [r7, #8]
 8001262:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001264:	e02c      	b.n	80012c0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001266:	687a      	ldr	r2, [r7, #4]
 8001268:	68b9      	ldr	r1, [r7, #8]
 800126a:	68f8      	ldr	r0, [r7, #12]
 800126c:	f000 f870 	bl	8001350 <I2C_IsErrorOccurred>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e02a      	b.n	80012d0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001280:	d01e      	beq.n	80012c0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001282:	f7ff fb69 	bl	8000958 <HAL_GetTick>
 8001286:	4602      	mov	r2, r0
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	68ba      	ldr	r2, [r7, #8]
 800128e:	429a      	cmp	r2, r3
 8001290:	d302      	bcc.n	8001298 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d113      	bne.n	80012c0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129c:	f043 0220 	orr.w	r2, r3, #32
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	2220      	movs	r2, #32
 80012a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	2200      	movs	r2, #0
 80012b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	2200      	movs	r2, #0
 80012b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80012bc:	2301      	movs	r3, #1
 80012be:	e007      	b.n	80012d0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	699b      	ldr	r3, [r3, #24]
 80012c6:	f003 0302 	and.w	r3, r3, #2
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	d1cb      	bne.n	8001266 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80012ce:	2300      	movs	r3, #0
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3710      	adds	r7, #16
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	60b9      	str	r1, [r7, #8]
 80012e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80012e4:	e028      	b.n	8001338 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80012e6:	687a      	ldr	r2, [r7, #4]
 80012e8:	68b9      	ldr	r1, [r7, #8]
 80012ea:	68f8      	ldr	r0, [r7, #12]
 80012ec:	f000 f830 	bl	8001350 <I2C_IsErrorOccurred>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e026      	b.n	8001348 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80012fa:	f7ff fb2d 	bl	8000958 <HAL_GetTick>
 80012fe:	4602      	mov	r2, r0
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	1ad3      	subs	r3, r2, r3
 8001304:	68ba      	ldr	r2, [r7, #8]
 8001306:	429a      	cmp	r2, r3
 8001308:	d302      	bcc.n	8001310 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d113      	bne.n	8001338 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001314:	f043 0220 	orr.w	r2, r3, #32
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	2220      	movs	r2, #32
 8001320:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	2200      	movs	r2, #0
 8001328:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	2200      	movs	r2, #0
 8001330:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001334:	2301      	movs	r3, #1
 8001336:	e007      	b.n	8001348 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	699b      	ldr	r3, [r3, #24]
 800133e:	f003 0320 	and.w	r3, r3, #32
 8001342:	2b20      	cmp	r3, #32
 8001344:	d1cf      	bne.n	80012e6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001346:	2300      	movs	r3, #0
}
 8001348:	4618      	mov	r0, r3
 800134a:	3710      	adds	r7, #16
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}

08001350 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b08a      	sub	sp, #40	; 0x28
 8001354:	af00      	add	r7, sp, #0
 8001356:	60f8      	str	r0, [r7, #12]
 8001358:	60b9      	str	r1, [r7, #8]
 800135a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800135c:	2300      	movs	r3, #0
 800135e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	699b      	ldr	r3, [r3, #24]
 8001368:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800136a:	2300      	movs	r3, #0
 800136c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	f003 0310 	and.w	r3, r3, #16
 8001378:	2b00      	cmp	r3, #0
 800137a:	d075      	beq.n	8001468 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2210      	movs	r2, #16
 8001382:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001384:	e056      	b.n	8001434 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001386:	68bb      	ldr	r3, [r7, #8]
 8001388:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800138c:	d052      	beq.n	8001434 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800138e:	f7ff fae3 	bl	8000958 <HAL_GetTick>
 8001392:	4602      	mov	r2, r0
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	68ba      	ldr	r2, [r7, #8]
 800139a:	429a      	cmp	r2, r3
 800139c:	d302      	bcc.n	80013a4 <I2C_IsErrorOccurred+0x54>
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d147      	bne.n	8001434 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ae:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80013b6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	699b      	ldr	r3, [r3, #24]
 80013be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80013c6:	d12e      	bne.n	8001426 <I2C_IsErrorOccurred+0xd6>
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80013ce:	d02a      	beq.n	8001426 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80013d0:	7cfb      	ldrb	r3, [r7, #19]
 80013d2:	2b20      	cmp	r3, #32
 80013d4:	d027      	beq.n	8001426 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	685a      	ldr	r2, [r3, #4]
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80013e4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80013e6:	f7ff fab7 	bl	8000958 <HAL_GetTick>
 80013ea:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80013ec:	e01b      	b.n	8001426 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80013ee:	f7ff fab3 	bl	8000958 <HAL_GetTick>
 80013f2:	4602      	mov	r2, r0
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	2b19      	cmp	r3, #25
 80013fa:	d914      	bls.n	8001426 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001400:	f043 0220 	orr.w	r2, r3, #32
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	2220      	movs	r2, #32
 800140c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	2200      	movs	r2, #0
 8001414:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	2200      	movs	r2, #0
 800141c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8001420:	2301      	movs	r3, #1
 8001422:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	699b      	ldr	r3, [r3, #24]
 800142c:	f003 0320 	and.w	r3, r3, #32
 8001430:	2b20      	cmp	r3, #32
 8001432:	d1dc      	bne.n	80013ee <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	699b      	ldr	r3, [r3, #24]
 800143a:	f003 0320 	and.w	r3, r3, #32
 800143e:	2b20      	cmp	r3, #32
 8001440:	d003      	beq.n	800144a <I2C_IsErrorOccurred+0xfa>
 8001442:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001446:	2b00      	cmp	r3, #0
 8001448:	d09d      	beq.n	8001386 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800144a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800144e:	2b00      	cmp	r3, #0
 8001450:	d103      	bne.n	800145a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	2220      	movs	r2, #32
 8001458:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800145a:	6a3b      	ldr	r3, [r7, #32]
 800145c:	f043 0304 	orr.w	r3, r3, #4
 8001460:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	699b      	ldr	r3, [r3, #24]
 800146e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001476:	2b00      	cmp	r3, #0
 8001478:	d00b      	beq.n	8001492 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800147a:	6a3b      	ldr	r3, [r7, #32]
 800147c:	f043 0301 	orr.w	r3, r3, #1
 8001480:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f44f 7280 	mov.w	r2, #256	; 0x100
 800148a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001498:	2b00      	cmp	r3, #0
 800149a:	d00b      	beq.n	80014b4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800149c:	6a3b      	ldr	r3, [r7, #32]
 800149e:	f043 0308 	orr.w	r3, r3, #8
 80014a2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014ac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d00b      	beq.n	80014d6 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80014be:	6a3b      	ldr	r3, [r7, #32]
 80014c0:	f043 0302 	orr.w	r3, r3, #2
 80014c4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014ce:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80014d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d01c      	beq.n	8001518 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80014de:	68f8      	ldr	r0, [r7, #12]
 80014e0:	f7ff fe56 	bl	8001190 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	6859      	ldr	r1, [r3, #4]
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	4b0d      	ldr	r3, [pc, #52]	; (8001524 <I2C_IsErrorOccurred+0x1d4>)
 80014f0:	400b      	ands	r3, r1
 80014f2:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80014f8:	6a3b      	ldr	r3, [r7, #32]
 80014fa:	431a      	orrs	r2, r3
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	2220      	movs	r2, #32
 8001504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	2200      	movs	r2, #0
 800150c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	2200      	movs	r2, #0
 8001514:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001518:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800151c:	4618      	mov	r0, r3
 800151e:	3728      	adds	r7, #40	; 0x28
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	fe00e800 	.word	0xfe00e800

08001528 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001528:	b480      	push	{r7}
 800152a:	b087      	sub	sp, #28
 800152c:	af00      	add	r7, sp, #0
 800152e:	60f8      	str	r0, [r7, #12]
 8001530:	607b      	str	r3, [r7, #4]
 8001532:	460b      	mov	r3, r1
 8001534:	817b      	strh	r3, [r7, #10]
 8001536:	4613      	mov	r3, r2
 8001538:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800153a:	897b      	ldrh	r3, [r7, #10]
 800153c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001540:	7a7b      	ldrb	r3, [r7, #9]
 8001542:	041b      	lsls	r3, r3, #16
 8001544:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001548:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800154e:	6a3b      	ldr	r3, [r7, #32]
 8001550:	4313      	orrs	r3, r2
 8001552:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001556:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	685a      	ldr	r2, [r3, #4]
 800155e:	6a3b      	ldr	r3, [r7, #32]
 8001560:	0d5b      	lsrs	r3, r3, #21
 8001562:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001566:	4b08      	ldr	r3, [pc, #32]	; (8001588 <I2C_TransferConfig+0x60>)
 8001568:	430b      	orrs	r3, r1
 800156a:	43db      	mvns	r3, r3
 800156c:	ea02 0103 	and.w	r1, r2, r3
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	697a      	ldr	r2, [r7, #20]
 8001576:	430a      	orrs	r2, r1
 8001578:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800157a:	bf00      	nop
 800157c:	371c      	adds	r7, #28
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	03ff63ff 	.word	0x03ff63ff

0800158c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800159c:	b2db      	uxtb	r3, r3
 800159e:	2b20      	cmp	r3, #32
 80015a0:	d138      	bne.n	8001614 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d101      	bne.n	80015b0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80015ac:	2302      	movs	r3, #2
 80015ae:	e032      	b.n	8001616 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2201      	movs	r2, #1
 80015b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2224      	movs	r2, #36	; 0x24
 80015bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f022 0201 	bic.w	r2, r2, #1
 80015ce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80015de:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	6819      	ldr	r1, [r3, #0]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	683a      	ldr	r2, [r7, #0]
 80015ec:	430a      	orrs	r2, r1
 80015ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f042 0201 	orr.w	r2, r2, #1
 80015fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2220      	movs	r2, #32
 8001604:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2200      	movs	r2, #0
 800160c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001610:	2300      	movs	r3, #0
 8001612:	e000      	b.n	8001616 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001614:	2302      	movs	r3, #2
  }
}
 8001616:	4618      	mov	r0, r3
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr

08001622 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001622:	b480      	push	{r7}
 8001624:	b085      	sub	sp, #20
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
 800162a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001632:	b2db      	uxtb	r3, r3
 8001634:	2b20      	cmp	r3, #32
 8001636:	d139      	bne.n	80016ac <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800163e:	2b01      	cmp	r3, #1
 8001640:	d101      	bne.n	8001646 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001642:	2302      	movs	r3, #2
 8001644:	e033      	b.n	80016ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2201      	movs	r2, #1
 800164a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2224      	movs	r2, #36	; 0x24
 8001652:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f022 0201 	bic.w	r2, r2, #1
 8001664:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001674:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	021b      	lsls	r3, r3, #8
 800167a:	68fa      	ldr	r2, [r7, #12]
 800167c:	4313      	orrs	r3, r2
 800167e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	68fa      	ldr	r2, [r7, #12]
 8001686:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f042 0201 	orr.w	r2, r2, #1
 8001696:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2220      	movs	r2, #32
 800169c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2200      	movs	r2, #0
 80016a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80016a8:	2300      	movs	r3, #0
 80016aa:	e000      	b.n	80016ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80016ac:	2302      	movs	r3, #2
  }
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3714      	adds	r7, #20
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
	...

080016bc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80016c0:	4b04      	ldr	r3, [pc, #16]	; (80016d4 <HAL_PWREx_GetVoltageRange+0x18>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	40007000 	.word	0x40007000

080016d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80016d8:	b480      	push	{r7}
 80016da:	b085      	sub	sp, #20
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016e6:	d130      	bne.n	800174a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80016e8:	4b23      	ldr	r3, [pc, #140]	; (8001778 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016f4:	d038      	beq.n	8001768 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80016f6:	4b20      	ldr	r3, [pc, #128]	; (8001778 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016fe:	4a1e      	ldr	r2, [pc, #120]	; (8001778 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001700:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001704:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001706:	4b1d      	ldr	r3, [pc, #116]	; (800177c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2232      	movs	r2, #50	; 0x32
 800170c:	fb02 f303 	mul.w	r3, r2, r3
 8001710:	4a1b      	ldr	r2, [pc, #108]	; (8001780 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001712:	fba2 2303 	umull	r2, r3, r2, r3
 8001716:	0c9b      	lsrs	r3, r3, #18
 8001718:	3301      	adds	r3, #1
 800171a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800171c:	e002      	b.n	8001724 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	3b01      	subs	r3, #1
 8001722:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001724:	4b14      	ldr	r3, [pc, #80]	; (8001778 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001726:	695b      	ldr	r3, [r3, #20]
 8001728:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800172c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001730:	d102      	bne.n	8001738 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d1f2      	bne.n	800171e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001738:	4b0f      	ldr	r3, [pc, #60]	; (8001778 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800173a:	695b      	ldr	r3, [r3, #20]
 800173c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001740:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001744:	d110      	bne.n	8001768 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e00f      	b.n	800176a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800174a:	4b0b      	ldr	r3, [pc, #44]	; (8001778 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001752:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001756:	d007      	beq.n	8001768 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001758:	4b07      	ldr	r3, [pc, #28]	; (8001778 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001760:	4a05      	ldr	r2, [pc, #20]	; (8001778 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001762:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001766:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001768:	2300      	movs	r3, #0
}
 800176a:	4618      	mov	r0, r3
 800176c:	3714      	adds	r7, #20
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	40007000 	.word	0x40007000
 800177c:	20000000 	.word	0x20000000
 8001780:	431bde83 	.word	0x431bde83

08001784 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b088      	sub	sp, #32
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d102      	bne.n	8001798 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	f000 bc02 	b.w	8001f9c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001798:	4b96      	ldr	r3, [pc, #600]	; (80019f4 <HAL_RCC_OscConfig+0x270>)
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	f003 030c 	and.w	r3, r3, #12
 80017a0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017a2:	4b94      	ldr	r3, [pc, #592]	; (80019f4 <HAL_RCC_OscConfig+0x270>)
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	f003 0303 	and.w	r3, r3, #3
 80017aa:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0310 	and.w	r3, r3, #16
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	f000 80e4 	beq.w	8001982 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d007      	beq.n	80017d0 <HAL_RCC_OscConfig+0x4c>
 80017c0:	69bb      	ldr	r3, [r7, #24]
 80017c2:	2b0c      	cmp	r3, #12
 80017c4:	f040 808b 	bne.w	80018de <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	f040 8087 	bne.w	80018de <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017d0:	4b88      	ldr	r3, [pc, #544]	; (80019f4 <HAL_RCC_OscConfig+0x270>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 0302 	and.w	r3, r3, #2
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d005      	beq.n	80017e8 <HAL_RCC_OscConfig+0x64>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	699b      	ldr	r3, [r3, #24]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d101      	bne.n	80017e8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e3d9      	b.n	8001f9c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a1a      	ldr	r2, [r3, #32]
 80017ec:	4b81      	ldr	r3, [pc, #516]	; (80019f4 <HAL_RCC_OscConfig+0x270>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0308 	and.w	r3, r3, #8
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d004      	beq.n	8001802 <HAL_RCC_OscConfig+0x7e>
 80017f8:	4b7e      	ldr	r3, [pc, #504]	; (80019f4 <HAL_RCC_OscConfig+0x270>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001800:	e005      	b.n	800180e <HAL_RCC_OscConfig+0x8a>
 8001802:	4b7c      	ldr	r3, [pc, #496]	; (80019f4 <HAL_RCC_OscConfig+0x270>)
 8001804:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001808:	091b      	lsrs	r3, r3, #4
 800180a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800180e:	4293      	cmp	r3, r2
 8001810:	d223      	bcs.n	800185a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6a1b      	ldr	r3, [r3, #32]
 8001816:	4618      	mov	r0, r3
 8001818:	f000 fd54 	bl	80022c4 <RCC_SetFlashLatencyFromMSIRange>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e3ba      	b.n	8001f9c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001826:	4b73      	ldr	r3, [pc, #460]	; (80019f4 <HAL_RCC_OscConfig+0x270>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a72      	ldr	r2, [pc, #456]	; (80019f4 <HAL_RCC_OscConfig+0x270>)
 800182c:	f043 0308 	orr.w	r3, r3, #8
 8001830:	6013      	str	r3, [r2, #0]
 8001832:	4b70      	ldr	r3, [pc, #448]	; (80019f4 <HAL_RCC_OscConfig+0x270>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a1b      	ldr	r3, [r3, #32]
 800183e:	496d      	ldr	r1, [pc, #436]	; (80019f4 <HAL_RCC_OscConfig+0x270>)
 8001840:	4313      	orrs	r3, r2
 8001842:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001844:	4b6b      	ldr	r3, [pc, #428]	; (80019f4 <HAL_RCC_OscConfig+0x270>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	69db      	ldr	r3, [r3, #28]
 8001850:	021b      	lsls	r3, r3, #8
 8001852:	4968      	ldr	r1, [pc, #416]	; (80019f4 <HAL_RCC_OscConfig+0x270>)
 8001854:	4313      	orrs	r3, r2
 8001856:	604b      	str	r3, [r1, #4]
 8001858:	e025      	b.n	80018a6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800185a:	4b66      	ldr	r3, [pc, #408]	; (80019f4 <HAL_RCC_OscConfig+0x270>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a65      	ldr	r2, [pc, #404]	; (80019f4 <HAL_RCC_OscConfig+0x270>)
 8001860:	f043 0308 	orr.w	r3, r3, #8
 8001864:	6013      	str	r3, [r2, #0]
 8001866:	4b63      	ldr	r3, [pc, #396]	; (80019f4 <HAL_RCC_OscConfig+0x270>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6a1b      	ldr	r3, [r3, #32]
 8001872:	4960      	ldr	r1, [pc, #384]	; (80019f4 <HAL_RCC_OscConfig+0x270>)
 8001874:	4313      	orrs	r3, r2
 8001876:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001878:	4b5e      	ldr	r3, [pc, #376]	; (80019f4 <HAL_RCC_OscConfig+0x270>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	69db      	ldr	r3, [r3, #28]
 8001884:	021b      	lsls	r3, r3, #8
 8001886:	495b      	ldr	r1, [pc, #364]	; (80019f4 <HAL_RCC_OscConfig+0x270>)
 8001888:	4313      	orrs	r3, r2
 800188a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800188c:	69bb      	ldr	r3, [r7, #24]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d109      	bne.n	80018a6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6a1b      	ldr	r3, [r3, #32]
 8001896:	4618      	mov	r0, r3
 8001898:	f000 fd14 	bl	80022c4 <RCC_SetFlashLatencyFromMSIRange>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e37a      	b.n	8001f9c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80018a6:	f000 fc81 	bl	80021ac <HAL_RCC_GetSysClockFreq>
 80018aa:	4602      	mov	r2, r0
 80018ac:	4b51      	ldr	r3, [pc, #324]	; (80019f4 <HAL_RCC_OscConfig+0x270>)
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	091b      	lsrs	r3, r3, #4
 80018b2:	f003 030f 	and.w	r3, r3, #15
 80018b6:	4950      	ldr	r1, [pc, #320]	; (80019f8 <HAL_RCC_OscConfig+0x274>)
 80018b8:	5ccb      	ldrb	r3, [r1, r3]
 80018ba:	f003 031f 	and.w	r3, r3, #31
 80018be:	fa22 f303 	lsr.w	r3, r2, r3
 80018c2:	4a4e      	ldr	r2, [pc, #312]	; (80019fc <HAL_RCC_OscConfig+0x278>)
 80018c4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80018c6:	4b4e      	ldr	r3, [pc, #312]	; (8001a00 <HAL_RCC_OscConfig+0x27c>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7fe fff4 	bl	80008b8 <HAL_InitTick>
 80018d0:	4603      	mov	r3, r0
 80018d2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80018d4:	7bfb      	ldrb	r3, [r7, #15]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d052      	beq.n	8001980 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80018da:	7bfb      	ldrb	r3, [r7, #15]
 80018dc:	e35e      	b.n	8001f9c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	699b      	ldr	r3, [r3, #24]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d032      	beq.n	800194c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80018e6:	4b43      	ldr	r3, [pc, #268]	; (80019f4 <HAL_RCC_OscConfig+0x270>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a42      	ldr	r2, [pc, #264]	; (80019f4 <HAL_RCC_OscConfig+0x270>)
 80018ec:	f043 0301 	orr.w	r3, r3, #1
 80018f0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018f2:	f7ff f831 	bl	8000958 <HAL_GetTick>
 80018f6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018f8:	e008      	b.n	800190c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018fa:	f7ff f82d 	bl	8000958 <HAL_GetTick>
 80018fe:	4602      	mov	r2, r0
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	2b02      	cmp	r3, #2
 8001906:	d901      	bls.n	800190c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001908:	2303      	movs	r3, #3
 800190a:	e347      	b.n	8001f9c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800190c:	4b39      	ldr	r3, [pc, #228]	; (80019f4 <HAL_RCC_OscConfig+0x270>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 0302 	and.w	r3, r3, #2
 8001914:	2b00      	cmp	r3, #0
 8001916:	d0f0      	beq.n	80018fa <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001918:	4b36      	ldr	r3, [pc, #216]	; (80019f4 <HAL_RCC_OscConfig+0x270>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a35      	ldr	r2, [pc, #212]	; (80019f4 <HAL_RCC_OscConfig+0x270>)
 800191e:	f043 0308 	orr.w	r3, r3, #8
 8001922:	6013      	str	r3, [r2, #0]
 8001924:	4b33      	ldr	r3, [pc, #204]	; (80019f4 <HAL_RCC_OscConfig+0x270>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6a1b      	ldr	r3, [r3, #32]
 8001930:	4930      	ldr	r1, [pc, #192]	; (80019f4 <HAL_RCC_OscConfig+0x270>)
 8001932:	4313      	orrs	r3, r2
 8001934:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001936:	4b2f      	ldr	r3, [pc, #188]	; (80019f4 <HAL_RCC_OscConfig+0x270>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	69db      	ldr	r3, [r3, #28]
 8001942:	021b      	lsls	r3, r3, #8
 8001944:	492b      	ldr	r1, [pc, #172]	; (80019f4 <HAL_RCC_OscConfig+0x270>)
 8001946:	4313      	orrs	r3, r2
 8001948:	604b      	str	r3, [r1, #4]
 800194a:	e01a      	b.n	8001982 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800194c:	4b29      	ldr	r3, [pc, #164]	; (80019f4 <HAL_RCC_OscConfig+0x270>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a28      	ldr	r2, [pc, #160]	; (80019f4 <HAL_RCC_OscConfig+0x270>)
 8001952:	f023 0301 	bic.w	r3, r3, #1
 8001956:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001958:	f7fe fffe 	bl	8000958 <HAL_GetTick>
 800195c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800195e:	e008      	b.n	8001972 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001960:	f7fe fffa 	bl	8000958 <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	2b02      	cmp	r3, #2
 800196c:	d901      	bls.n	8001972 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e314      	b.n	8001f9c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001972:	4b20      	ldr	r3, [pc, #128]	; (80019f4 <HAL_RCC_OscConfig+0x270>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0302 	and.w	r3, r3, #2
 800197a:	2b00      	cmp	r3, #0
 800197c:	d1f0      	bne.n	8001960 <HAL_RCC_OscConfig+0x1dc>
 800197e:	e000      	b.n	8001982 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001980:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0301 	and.w	r3, r3, #1
 800198a:	2b00      	cmp	r3, #0
 800198c:	d073      	beq.n	8001a76 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800198e:	69bb      	ldr	r3, [r7, #24]
 8001990:	2b08      	cmp	r3, #8
 8001992:	d005      	beq.n	80019a0 <HAL_RCC_OscConfig+0x21c>
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	2b0c      	cmp	r3, #12
 8001998:	d10e      	bne.n	80019b8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	2b03      	cmp	r3, #3
 800199e:	d10b      	bne.n	80019b8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019a0:	4b14      	ldr	r3, [pc, #80]	; (80019f4 <HAL_RCC_OscConfig+0x270>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d063      	beq.n	8001a74 <HAL_RCC_OscConfig+0x2f0>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d15f      	bne.n	8001a74 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e2f1      	b.n	8001f9c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019c0:	d106      	bne.n	80019d0 <HAL_RCC_OscConfig+0x24c>
 80019c2:	4b0c      	ldr	r3, [pc, #48]	; (80019f4 <HAL_RCC_OscConfig+0x270>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a0b      	ldr	r2, [pc, #44]	; (80019f4 <HAL_RCC_OscConfig+0x270>)
 80019c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019cc:	6013      	str	r3, [r2, #0]
 80019ce:	e025      	b.n	8001a1c <HAL_RCC_OscConfig+0x298>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019d8:	d114      	bne.n	8001a04 <HAL_RCC_OscConfig+0x280>
 80019da:	4b06      	ldr	r3, [pc, #24]	; (80019f4 <HAL_RCC_OscConfig+0x270>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a05      	ldr	r2, [pc, #20]	; (80019f4 <HAL_RCC_OscConfig+0x270>)
 80019e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019e4:	6013      	str	r3, [r2, #0]
 80019e6:	4b03      	ldr	r3, [pc, #12]	; (80019f4 <HAL_RCC_OscConfig+0x270>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a02      	ldr	r2, [pc, #8]	; (80019f4 <HAL_RCC_OscConfig+0x270>)
 80019ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019f0:	6013      	str	r3, [r2, #0]
 80019f2:	e013      	b.n	8001a1c <HAL_RCC_OscConfig+0x298>
 80019f4:	40021000 	.word	0x40021000
 80019f8:	080029e0 	.word	0x080029e0
 80019fc:	20000000 	.word	0x20000000
 8001a00:	20000004 	.word	0x20000004
 8001a04:	4ba0      	ldr	r3, [pc, #640]	; (8001c88 <HAL_RCC_OscConfig+0x504>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a9f      	ldr	r2, [pc, #636]	; (8001c88 <HAL_RCC_OscConfig+0x504>)
 8001a0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a0e:	6013      	str	r3, [r2, #0]
 8001a10:	4b9d      	ldr	r3, [pc, #628]	; (8001c88 <HAL_RCC_OscConfig+0x504>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a9c      	ldr	r2, [pc, #624]	; (8001c88 <HAL_RCC_OscConfig+0x504>)
 8001a16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d013      	beq.n	8001a4c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a24:	f7fe ff98 	bl	8000958 <HAL_GetTick>
 8001a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a2a:	e008      	b.n	8001a3e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a2c:	f7fe ff94 	bl	8000958 <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	2b64      	cmp	r3, #100	; 0x64
 8001a38:	d901      	bls.n	8001a3e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e2ae      	b.n	8001f9c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a3e:	4b92      	ldr	r3, [pc, #584]	; (8001c88 <HAL_RCC_OscConfig+0x504>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d0f0      	beq.n	8001a2c <HAL_RCC_OscConfig+0x2a8>
 8001a4a:	e014      	b.n	8001a76 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a4c:	f7fe ff84 	bl	8000958 <HAL_GetTick>
 8001a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a52:	e008      	b.n	8001a66 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a54:	f7fe ff80 	bl	8000958 <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b64      	cmp	r3, #100	; 0x64
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e29a      	b.n	8001f9c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a66:	4b88      	ldr	r3, [pc, #544]	; (8001c88 <HAL_RCC_OscConfig+0x504>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d1f0      	bne.n	8001a54 <HAL_RCC_OscConfig+0x2d0>
 8001a72:	e000      	b.n	8001a76 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d060      	beq.n	8001b44 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	2b04      	cmp	r3, #4
 8001a86:	d005      	beq.n	8001a94 <HAL_RCC_OscConfig+0x310>
 8001a88:	69bb      	ldr	r3, [r7, #24]
 8001a8a:	2b0c      	cmp	r3, #12
 8001a8c:	d119      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d116      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a94:	4b7c      	ldr	r3, [pc, #496]	; (8001c88 <HAL_RCC_OscConfig+0x504>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d005      	beq.n	8001aac <HAL_RCC_OscConfig+0x328>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d101      	bne.n	8001aac <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e277      	b.n	8001f9c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aac:	4b76      	ldr	r3, [pc, #472]	; (8001c88 <HAL_RCC_OscConfig+0x504>)
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	691b      	ldr	r3, [r3, #16]
 8001ab8:	061b      	lsls	r3, r3, #24
 8001aba:	4973      	ldr	r1, [pc, #460]	; (8001c88 <HAL_RCC_OscConfig+0x504>)
 8001abc:	4313      	orrs	r3, r2
 8001abe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ac0:	e040      	b.n	8001b44 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	68db      	ldr	r3, [r3, #12]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d023      	beq.n	8001b12 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001aca:	4b6f      	ldr	r3, [pc, #444]	; (8001c88 <HAL_RCC_OscConfig+0x504>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a6e      	ldr	r2, [pc, #440]	; (8001c88 <HAL_RCC_OscConfig+0x504>)
 8001ad0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ad4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad6:	f7fe ff3f 	bl	8000958 <HAL_GetTick>
 8001ada:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001adc:	e008      	b.n	8001af0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ade:	f7fe ff3b 	bl	8000958 <HAL_GetTick>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d901      	bls.n	8001af0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001aec:	2303      	movs	r3, #3
 8001aee:	e255      	b.n	8001f9c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001af0:	4b65      	ldr	r3, [pc, #404]	; (8001c88 <HAL_RCC_OscConfig+0x504>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d0f0      	beq.n	8001ade <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001afc:	4b62      	ldr	r3, [pc, #392]	; (8001c88 <HAL_RCC_OscConfig+0x504>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	691b      	ldr	r3, [r3, #16]
 8001b08:	061b      	lsls	r3, r3, #24
 8001b0a:	495f      	ldr	r1, [pc, #380]	; (8001c88 <HAL_RCC_OscConfig+0x504>)
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	604b      	str	r3, [r1, #4]
 8001b10:	e018      	b.n	8001b44 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b12:	4b5d      	ldr	r3, [pc, #372]	; (8001c88 <HAL_RCC_OscConfig+0x504>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a5c      	ldr	r2, [pc, #368]	; (8001c88 <HAL_RCC_OscConfig+0x504>)
 8001b18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b1e:	f7fe ff1b 	bl	8000958 <HAL_GetTick>
 8001b22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b24:	e008      	b.n	8001b38 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b26:	f7fe ff17 	bl	8000958 <HAL_GetTick>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d901      	bls.n	8001b38 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	e231      	b.n	8001f9c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b38:	4b53      	ldr	r3, [pc, #332]	; (8001c88 <HAL_RCC_OscConfig+0x504>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d1f0      	bne.n	8001b26 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0308 	and.w	r3, r3, #8
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d03c      	beq.n	8001bca <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	695b      	ldr	r3, [r3, #20]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d01c      	beq.n	8001b92 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b58:	4b4b      	ldr	r3, [pc, #300]	; (8001c88 <HAL_RCC_OscConfig+0x504>)
 8001b5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b5e:	4a4a      	ldr	r2, [pc, #296]	; (8001c88 <HAL_RCC_OscConfig+0x504>)
 8001b60:	f043 0301 	orr.w	r3, r3, #1
 8001b64:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b68:	f7fe fef6 	bl	8000958 <HAL_GetTick>
 8001b6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b6e:	e008      	b.n	8001b82 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b70:	f7fe fef2 	bl	8000958 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e20c      	b.n	8001f9c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b82:	4b41      	ldr	r3, [pc, #260]	; (8001c88 <HAL_RCC_OscConfig+0x504>)
 8001b84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b88:	f003 0302 	and.w	r3, r3, #2
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d0ef      	beq.n	8001b70 <HAL_RCC_OscConfig+0x3ec>
 8001b90:	e01b      	b.n	8001bca <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b92:	4b3d      	ldr	r3, [pc, #244]	; (8001c88 <HAL_RCC_OscConfig+0x504>)
 8001b94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b98:	4a3b      	ldr	r2, [pc, #236]	; (8001c88 <HAL_RCC_OscConfig+0x504>)
 8001b9a:	f023 0301 	bic.w	r3, r3, #1
 8001b9e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ba2:	f7fe fed9 	bl	8000958 <HAL_GetTick>
 8001ba6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ba8:	e008      	b.n	8001bbc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001baa:	f7fe fed5 	bl	8000958 <HAL_GetTick>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d901      	bls.n	8001bbc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e1ef      	b.n	8001f9c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bbc:	4b32      	ldr	r3, [pc, #200]	; (8001c88 <HAL_RCC_OscConfig+0x504>)
 8001bbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d1ef      	bne.n	8001baa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0304 	and.w	r3, r3, #4
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	f000 80a6 	beq.w	8001d24 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001bdc:	4b2a      	ldr	r3, [pc, #168]	; (8001c88 <HAL_RCC_OscConfig+0x504>)
 8001bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001be0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d10d      	bne.n	8001c04 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001be8:	4b27      	ldr	r3, [pc, #156]	; (8001c88 <HAL_RCC_OscConfig+0x504>)
 8001bea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bec:	4a26      	ldr	r2, [pc, #152]	; (8001c88 <HAL_RCC_OscConfig+0x504>)
 8001bee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bf2:	6593      	str	r3, [r2, #88]	; 0x58
 8001bf4:	4b24      	ldr	r3, [pc, #144]	; (8001c88 <HAL_RCC_OscConfig+0x504>)
 8001bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bfc:	60bb      	str	r3, [r7, #8]
 8001bfe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c00:	2301      	movs	r3, #1
 8001c02:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c04:	4b21      	ldr	r3, [pc, #132]	; (8001c8c <HAL_RCC_OscConfig+0x508>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d118      	bne.n	8001c42 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c10:	4b1e      	ldr	r3, [pc, #120]	; (8001c8c <HAL_RCC_OscConfig+0x508>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a1d      	ldr	r2, [pc, #116]	; (8001c8c <HAL_RCC_OscConfig+0x508>)
 8001c16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c1a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c1c:	f7fe fe9c 	bl	8000958 <HAL_GetTick>
 8001c20:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c22:	e008      	b.n	8001c36 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c24:	f7fe fe98 	bl	8000958 <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e1b2      	b.n	8001f9c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c36:	4b15      	ldr	r3, [pc, #84]	; (8001c8c <HAL_RCC_OscConfig+0x508>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d0f0      	beq.n	8001c24 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d108      	bne.n	8001c5c <HAL_RCC_OscConfig+0x4d8>
 8001c4a:	4b0f      	ldr	r3, [pc, #60]	; (8001c88 <HAL_RCC_OscConfig+0x504>)
 8001c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c50:	4a0d      	ldr	r2, [pc, #52]	; (8001c88 <HAL_RCC_OscConfig+0x504>)
 8001c52:	f043 0301 	orr.w	r3, r3, #1
 8001c56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c5a:	e029      	b.n	8001cb0 <HAL_RCC_OscConfig+0x52c>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	2b05      	cmp	r3, #5
 8001c62:	d115      	bne.n	8001c90 <HAL_RCC_OscConfig+0x50c>
 8001c64:	4b08      	ldr	r3, [pc, #32]	; (8001c88 <HAL_RCC_OscConfig+0x504>)
 8001c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c6a:	4a07      	ldr	r2, [pc, #28]	; (8001c88 <HAL_RCC_OscConfig+0x504>)
 8001c6c:	f043 0304 	orr.w	r3, r3, #4
 8001c70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c74:	4b04      	ldr	r3, [pc, #16]	; (8001c88 <HAL_RCC_OscConfig+0x504>)
 8001c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c7a:	4a03      	ldr	r2, [pc, #12]	; (8001c88 <HAL_RCC_OscConfig+0x504>)
 8001c7c:	f043 0301 	orr.w	r3, r3, #1
 8001c80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c84:	e014      	b.n	8001cb0 <HAL_RCC_OscConfig+0x52c>
 8001c86:	bf00      	nop
 8001c88:	40021000 	.word	0x40021000
 8001c8c:	40007000 	.word	0x40007000
 8001c90:	4b9a      	ldr	r3, [pc, #616]	; (8001efc <HAL_RCC_OscConfig+0x778>)
 8001c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c96:	4a99      	ldr	r2, [pc, #612]	; (8001efc <HAL_RCC_OscConfig+0x778>)
 8001c98:	f023 0301 	bic.w	r3, r3, #1
 8001c9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ca0:	4b96      	ldr	r3, [pc, #600]	; (8001efc <HAL_RCC_OscConfig+0x778>)
 8001ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ca6:	4a95      	ldr	r2, [pc, #596]	; (8001efc <HAL_RCC_OscConfig+0x778>)
 8001ca8:	f023 0304 	bic.w	r3, r3, #4
 8001cac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d016      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cb8:	f7fe fe4e 	bl	8000958 <HAL_GetTick>
 8001cbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cbe:	e00a      	b.n	8001cd6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cc0:	f7fe fe4a 	bl	8000958 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e162      	b.n	8001f9c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cd6:	4b89      	ldr	r3, [pc, #548]	; (8001efc <HAL_RCC_OscConfig+0x778>)
 8001cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cdc:	f003 0302 	and.w	r3, r3, #2
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d0ed      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x53c>
 8001ce4:	e015      	b.n	8001d12 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ce6:	f7fe fe37 	bl	8000958 <HAL_GetTick>
 8001cea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cec:	e00a      	b.n	8001d04 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cee:	f7fe fe33 	bl	8000958 <HAL_GetTick>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d901      	bls.n	8001d04 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	e14b      	b.n	8001f9c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d04:	4b7d      	ldr	r3, [pc, #500]	; (8001efc <HAL_RCC_OscConfig+0x778>)
 8001d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d0a:	f003 0302 	and.w	r3, r3, #2
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d1ed      	bne.n	8001cee <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d12:	7ffb      	ldrb	r3, [r7, #31]
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d105      	bne.n	8001d24 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d18:	4b78      	ldr	r3, [pc, #480]	; (8001efc <HAL_RCC_OscConfig+0x778>)
 8001d1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d1c:	4a77      	ldr	r2, [pc, #476]	; (8001efc <HAL_RCC_OscConfig+0x778>)
 8001d1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d22:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0320 	and.w	r3, r3, #32
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d03c      	beq.n	8001daa <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d01c      	beq.n	8001d72 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d38:	4b70      	ldr	r3, [pc, #448]	; (8001efc <HAL_RCC_OscConfig+0x778>)
 8001d3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d3e:	4a6f      	ldr	r2, [pc, #444]	; (8001efc <HAL_RCC_OscConfig+0x778>)
 8001d40:	f043 0301 	orr.w	r3, r3, #1
 8001d44:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d48:	f7fe fe06 	bl	8000958 <HAL_GetTick>
 8001d4c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d4e:	e008      	b.n	8001d62 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d50:	f7fe fe02 	bl	8000958 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d901      	bls.n	8001d62 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e11c      	b.n	8001f9c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d62:	4b66      	ldr	r3, [pc, #408]	; (8001efc <HAL_RCC_OscConfig+0x778>)
 8001d64:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d68:	f003 0302 	and.w	r3, r3, #2
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d0ef      	beq.n	8001d50 <HAL_RCC_OscConfig+0x5cc>
 8001d70:	e01b      	b.n	8001daa <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d72:	4b62      	ldr	r3, [pc, #392]	; (8001efc <HAL_RCC_OscConfig+0x778>)
 8001d74:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d78:	4a60      	ldr	r2, [pc, #384]	; (8001efc <HAL_RCC_OscConfig+0x778>)
 8001d7a:	f023 0301 	bic.w	r3, r3, #1
 8001d7e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d82:	f7fe fde9 	bl	8000958 <HAL_GetTick>
 8001d86:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d88:	e008      	b.n	8001d9c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d8a:	f7fe fde5 	bl	8000958 <HAL_GetTick>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d901      	bls.n	8001d9c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	e0ff      	b.n	8001f9c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d9c:	4b57      	ldr	r3, [pc, #348]	; (8001efc <HAL_RCC_OscConfig+0x778>)
 8001d9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001da2:	f003 0302 	and.w	r3, r3, #2
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d1ef      	bne.n	8001d8a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	f000 80f3 	beq.w	8001f9a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	f040 80c9 	bne.w	8001f50 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001dbe:	4b4f      	ldr	r3, [pc, #316]	; (8001efc <HAL_RCC_OscConfig+0x778>)
 8001dc0:	68db      	ldr	r3, [r3, #12]
 8001dc2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	f003 0203 	and.w	r2, r3, #3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d12c      	bne.n	8001e2c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ddc:	3b01      	subs	r3, #1
 8001dde:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d123      	bne.n	8001e2c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dee:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d11b      	bne.n	8001e2c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dfe:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d113      	bne.n	8001e2c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e0e:	085b      	lsrs	r3, r3, #1
 8001e10:	3b01      	subs	r3, #1
 8001e12:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d109      	bne.n	8001e2c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e22:	085b      	lsrs	r3, r3, #1
 8001e24:	3b01      	subs	r3, #1
 8001e26:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d06b      	beq.n	8001f04 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	2b0c      	cmp	r3, #12
 8001e30:	d062      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001e32:	4b32      	ldr	r3, [pc, #200]	; (8001efc <HAL_RCC_OscConfig+0x778>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e0ac      	b.n	8001f9c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001e42:	4b2e      	ldr	r3, [pc, #184]	; (8001efc <HAL_RCC_OscConfig+0x778>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a2d      	ldr	r2, [pc, #180]	; (8001efc <HAL_RCC_OscConfig+0x778>)
 8001e48:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e4c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e4e:	f7fe fd83 	bl	8000958 <HAL_GetTick>
 8001e52:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e54:	e008      	b.n	8001e68 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e56:	f7fe fd7f 	bl	8000958 <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d901      	bls.n	8001e68 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001e64:	2303      	movs	r3, #3
 8001e66:	e099      	b.n	8001f9c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e68:	4b24      	ldr	r3, [pc, #144]	; (8001efc <HAL_RCC_OscConfig+0x778>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d1f0      	bne.n	8001e56 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e74:	4b21      	ldr	r3, [pc, #132]	; (8001efc <HAL_RCC_OscConfig+0x778>)
 8001e76:	68da      	ldr	r2, [r3, #12]
 8001e78:	4b21      	ldr	r3, [pc, #132]	; (8001f00 <HAL_RCC_OscConfig+0x77c>)
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001e84:	3a01      	subs	r2, #1
 8001e86:	0112      	lsls	r2, r2, #4
 8001e88:	4311      	orrs	r1, r2
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e8e:	0212      	lsls	r2, r2, #8
 8001e90:	4311      	orrs	r1, r2
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001e96:	0852      	lsrs	r2, r2, #1
 8001e98:	3a01      	subs	r2, #1
 8001e9a:	0552      	lsls	r2, r2, #21
 8001e9c:	4311      	orrs	r1, r2
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001ea2:	0852      	lsrs	r2, r2, #1
 8001ea4:	3a01      	subs	r2, #1
 8001ea6:	0652      	lsls	r2, r2, #25
 8001ea8:	4311      	orrs	r1, r2
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001eae:	06d2      	lsls	r2, r2, #27
 8001eb0:	430a      	orrs	r2, r1
 8001eb2:	4912      	ldr	r1, [pc, #72]	; (8001efc <HAL_RCC_OscConfig+0x778>)
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001eb8:	4b10      	ldr	r3, [pc, #64]	; (8001efc <HAL_RCC_OscConfig+0x778>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a0f      	ldr	r2, [pc, #60]	; (8001efc <HAL_RCC_OscConfig+0x778>)
 8001ebe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ec2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ec4:	4b0d      	ldr	r3, [pc, #52]	; (8001efc <HAL_RCC_OscConfig+0x778>)
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	4a0c      	ldr	r2, [pc, #48]	; (8001efc <HAL_RCC_OscConfig+0x778>)
 8001eca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ece:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ed0:	f7fe fd42 	bl	8000958 <HAL_GetTick>
 8001ed4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ed6:	e008      	b.n	8001eea <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ed8:	f7fe fd3e 	bl	8000958 <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d901      	bls.n	8001eea <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e058      	b.n	8001f9c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eea:	4b04      	ldr	r3, [pc, #16]	; (8001efc <HAL_RCC_OscConfig+0x778>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d0f0      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ef6:	e050      	b.n	8001f9a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e04f      	b.n	8001f9c <HAL_RCC_OscConfig+0x818>
 8001efc:	40021000 	.word	0x40021000
 8001f00:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f04:	4b27      	ldr	r3, [pc, #156]	; (8001fa4 <HAL_RCC_OscConfig+0x820>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d144      	bne.n	8001f9a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001f10:	4b24      	ldr	r3, [pc, #144]	; (8001fa4 <HAL_RCC_OscConfig+0x820>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a23      	ldr	r2, [pc, #140]	; (8001fa4 <HAL_RCC_OscConfig+0x820>)
 8001f16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f1a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f1c:	4b21      	ldr	r3, [pc, #132]	; (8001fa4 <HAL_RCC_OscConfig+0x820>)
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	4a20      	ldr	r2, [pc, #128]	; (8001fa4 <HAL_RCC_OscConfig+0x820>)
 8001f22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f26:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f28:	f7fe fd16 	bl	8000958 <HAL_GetTick>
 8001f2c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f2e:	e008      	b.n	8001f42 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f30:	f7fe fd12 	bl	8000958 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e02c      	b.n	8001f9c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f42:	4b18      	ldr	r3, [pc, #96]	; (8001fa4 <HAL_RCC_OscConfig+0x820>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d0f0      	beq.n	8001f30 <HAL_RCC_OscConfig+0x7ac>
 8001f4e:	e024      	b.n	8001f9a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	2b0c      	cmp	r3, #12
 8001f54:	d01f      	beq.n	8001f96 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f56:	4b13      	ldr	r3, [pc, #76]	; (8001fa4 <HAL_RCC_OscConfig+0x820>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a12      	ldr	r2, [pc, #72]	; (8001fa4 <HAL_RCC_OscConfig+0x820>)
 8001f5c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f62:	f7fe fcf9 	bl	8000958 <HAL_GetTick>
 8001f66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f68:	e008      	b.n	8001f7c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f6a:	f7fe fcf5 	bl	8000958 <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d901      	bls.n	8001f7c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e00f      	b.n	8001f9c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f7c:	4b09      	ldr	r3, [pc, #36]	; (8001fa4 <HAL_RCC_OscConfig+0x820>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d1f0      	bne.n	8001f6a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001f88:	4b06      	ldr	r3, [pc, #24]	; (8001fa4 <HAL_RCC_OscConfig+0x820>)
 8001f8a:	68da      	ldr	r2, [r3, #12]
 8001f8c:	4905      	ldr	r1, [pc, #20]	; (8001fa4 <HAL_RCC_OscConfig+0x820>)
 8001f8e:	4b06      	ldr	r3, [pc, #24]	; (8001fa8 <HAL_RCC_OscConfig+0x824>)
 8001f90:	4013      	ands	r3, r2
 8001f92:	60cb      	str	r3, [r1, #12]
 8001f94:	e001      	b.n	8001f9a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e000      	b.n	8001f9c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001f9a:	2300      	movs	r3, #0
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3720      	adds	r7, #32
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	feeefffc 	.word	0xfeeefffc

08001fac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d101      	bne.n	8001fc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e0e7      	b.n	8002190 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fc0:	4b75      	ldr	r3, [pc, #468]	; (8002198 <HAL_RCC_ClockConfig+0x1ec>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0307 	and.w	r3, r3, #7
 8001fc8:	683a      	ldr	r2, [r7, #0]
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d910      	bls.n	8001ff0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fce:	4b72      	ldr	r3, [pc, #456]	; (8002198 <HAL_RCC_ClockConfig+0x1ec>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f023 0207 	bic.w	r2, r3, #7
 8001fd6:	4970      	ldr	r1, [pc, #448]	; (8002198 <HAL_RCC_ClockConfig+0x1ec>)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fde:	4b6e      	ldr	r3, [pc, #440]	; (8002198 <HAL_RCC_ClockConfig+0x1ec>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0307 	and.w	r3, r3, #7
 8001fe6:	683a      	ldr	r2, [r7, #0]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d001      	beq.n	8001ff0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e0cf      	b.n	8002190 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0302 	and.w	r3, r3, #2
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d010      	beq.n	800201e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	689a      	ldr	r2, [r3, #8]
 8002000:	4b66      	ldr	r3, [pc, #408]	; (800219c <HAL_RCC_ClockConfig+0x1f0>)
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002008:	429a      	cmp	r2, r3
 800200a:	d908      	bls.n	800201e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800200c:	4b63      	ldr	r3, [pc, #396]	; (800219c <HAL_RCC_ClockConfig+0x1f0>)
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	4960      	ldr	r1, [pc, #384]	; (800219c <HAL_RCC_ClockConfig+0x1f0>)
 800201a:	4313      	orrs	r3, r2
 800201c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	2b00      	cmp	r3, #0
 8002028:	d04c      	beq.n	80020c4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	2b03      	cmp	r3, #3
 8002030:	d107      	bne.n	8002042 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002032:	4b5a      	ldr	r3, [pc, #360]	; (800219c <HAL_RCC_ClockConfig+0x1f0>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d121      	bne.n	8002082 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e0a6      	b.n	8002190 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	2b02      	cmp	r3, #2
 8002048:	d107      	bne.n	800205a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800204a:	4b54      	ldr	r3, [pc, #336]	; (800219c <HAL_RCC_ClockConfig+0x1f0>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d115      	bne.n	8002082 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e09a      	b.n	8002190 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d107      	bne.n	8002072 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002062:	4b4e      	ldr	r3, [pc, #312]	; (800219c <HAL_RCC_ClockConfig+0x1f0>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0302 	and.w	r3, r3, #2
 800206a:	2b00      	cmp	r3, #0
 800206c:	d109      	bne.n	8002082 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e08e      	b.n	8002190 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002072:	4b4a      	ldr	r3, [pc, #296]	; (800219c <HAL_RCC_ClockConfig+0x1f0>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800207a:	2b00      	cmp	r3, #0
 800207c:	d101      	bne.n	8002082 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e086      	b.n	8002190 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002082:	4b46      	ldr	r3, [pc, #280]	; (800219c <HAL_RCC_ClockConfig+0x1f0>)
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	f023 0203 	bic.w	r2, r3, #3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	4943      	ldr	r1, [pc, #268]	; (800219c <HAL_RCC_ClockConfig+0x1f0>)
 8002090:	4313      	orrs	r3, r2
 8002092:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002094:	f7fe fc60 	bl	8000958 <HAL_GetTick>
 8002098:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800209a:	e00a      	b.n	80020b2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800209c:	f7fe fc5c 	bl	8000958 <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e06e      	b.n	8002190 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020b2:	4b3a      	ldr	r3, [pc, #232]	; (800219c <HAL_RCC_ClockConfig+0x1f0>)
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	f003 020c 	and.w	r2, r3, #12
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d1eb      	bne.n	800209c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0302 	and.w	r3, r3, #2
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d010      	beq.n	80020f2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	689a      	ldr	r2, [r3, #8]
 80020d4:	4b31      	ldr	r3, [pc, #196]	; (800219c <HAL_RCC_ClockConfig+0x1f0>)
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020dc:	429a      	cmp	r2, r3
 80020de:	d208      	bcs.n	80020f2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020e0:	4b2e      	ldr	r3, [pc, #184]	; (800219c <HAL_RCC_ClockConfig+0x1f0>)
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	492b      	ldr	r1, [pc, #172]	; (800219c <HAL_RCC_ClockConfig+0x1f0>)
 80020ee:	4313      	orrs	r3, r2
 80020f0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020f2:	4b29      	ldr	r3, [pc, #164]	; (8002198 <HAL_RCC_ClockConfig+0x1ec>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0307 	and.w	r3, r3, #7
 80020fa:	683a      	ldr	r2, [r7, #0]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d210      	bcs.n	8002122 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002100:	4b25      	ldr	r3, [pc, #148]	; (8002198 <HAL_RCC_ClockConfig+0x1ec>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f023 0207 	bic.w	r2, r3, #7
 8002108:	4923      	ldr	r1, [pc, #140]	; (8002198 <HAL_RCC_ClockConfig+0x1ec>)
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	4313      	orrs	r3, r2
 800210e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002110:	4b21      	ldr	r3, [pc, #132]	; (8002198 <HAL_RCC_ClockConfig+0x1ec>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0307 	and.w	r3, r3, #7
 8002118:	683a      	ldr	r2, [r7, #0]
 800211a:	429a      	cmp	r2, r3
 800211c:	d001      	beq.n	8002122 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e036      	b.n	8002190 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0304 	and.w	r3, r3, #4
 800212a:	2b00      	cmp	r3, #0
 800212c:	d008      	beq.n	8002140 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800212e:	4b1b      	ldr	r3, [pc, #108]	; (800219c <HAL_RCC_ClockConfig+0x1f0>)
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	4918      	ldr	r1, [pc, #96]	; (800219c <HAL_RCC_ClockConfig+0x1f0>)
 800213c:	4313      	orrs	r3, r2
 800213e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0308 	and.w	r3, r3, #8
 8002148:	2b00      	cmp	r3, #0
 800214a:	d009      	beq.n	8002160 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800214c:	4b13      	ldr	r3, [pc, #76]	; (800219c <HAL_RCC_ClockConfig+0x1f0>)
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	691b      	ldr	r3, [r3, #16]
 8002158:	00db      	lsls	r3, r3, #3
 800215a:	4910      	ldr	r1, [pc, #64]	; (800219c <HAL_RCC_ClockConfig+0x1f0>)
 800215c:	4313      	orrs	r3, r2
 800215e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002160:	f000 f824 	bl	80021ac <HAL_RCC_GetSysClockFreq>
 8002164:	4602      	mov	r2, r0
 8002166:	4b0d      	ldr	r3, [pc, #52]	; (800219c <HAL_RCC_ClockConfig+0x1f0>)
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	091b      	lsrs	r3, r3, #4
 800216c:	f003 030f 	and.w	r3, r3, #15
 8002170:	490b      	ldr	r1, [pc, #44]	; (80021a0 <HAL_RCC_ClockConfig+0x1f4>)
 8002172:	5ccb      	ldrb	r3, [r1, r3]
 8002174:	f003 031f 	and.w	r3, r3, #31
 8002178:	fa22 f303 	lsr.w	r3, r2, r3
 800217c:	4a09      	ldr	r2, [pc, #36]	; (80021a4 <HAL_RCC_ClockConfig+0x1f8>)
 800217e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002180:	4b09      	ldr	r3, [pc, #36]	; (80021a8 <HAL_RCC_ClockConfig+0x1fc>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4618      	mov	r0, r3
 8002186:	f7fe fb97 	bl	80008b8 <HAL_InitTick>
 800218a:	4603      	mov	r3, r0
 800218c:	72fb      	strb	r3, [r7, #11]

  return status;
 800218e:	7afb      	ldrb	r3, [r7, #11]
}
 8002190:	4618      	mov	r0, r3
 8002192:	3710      	adds	r7, #16
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	40022000 	.word	0x40022000
 800219c:	40021000 	.word	0x40021000
 80021a0:	080029e0 	.word	0x080029e0
 80021a4:	20000000 	.word	0x20000000
 80021a8:	20000004 	.word	0x20000004

080021ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b089      	sub	sp, #36	; 0x24
 80021b0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80021b2:	2300      	movs	r3, #0
 80021b4:	61fb      	str	r3, [r7, #28]
 80021b6:	2300      	movs	r3, #0
 80021b8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021ba:	4b3e      	ldr	r3, [pc, #248]	; (80022b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	f003 030c 	and.w	r3, r3, #12
 80021c2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021c4:	4b3b      	ldr	r3, [pc, #236]	; (80022b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	f003 0303 	and.w	r3, r3, #3
 80021cc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d005      	beq.n	80021e0 <HAL_RCC_GetSysClockFreq+0x34>
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	2b0c      	cmp	r3, #12
 80021d8:	d121      	bne.n	800221e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d11e      	bne.n	800221e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80021e0:	4b34      	ldr	r3, [pc, #208]	; (80022b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0308 	and.w	r3, r3, #8
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d107      	bne.n	80021fc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80021ec:	4b31      	ldr	r3, [pc, #196]	; (80022b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80021ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021f2:	0a1b      	lsrs	r3, r3, #8
 80021f4:	f003 030f 	and.w	r3, r3, #15
 80021f8:	61fb      	str	r3, [r7, #28]
 80021fa:	e005      	b.n	8002208 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80021fc:	4b2d      	ldr	r3, [pc, #180]	; (80022b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	091b      	lsrs	r3, r3, #4
 8002202:	f003 030f 	and.w	r3, r3, #15
 8002206:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002208:	4a2b      	ldr	r2, [pc, #172]	; (80022b8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002210:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d10d      	bne.n	8002234 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800221c:	e00a      	b.n	8002234 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	2b04      	cmp	r3, #4
 8002222:	d102      	bne.n	800222a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002224:	4b25      	ldr	r3, [pc, #148]	; (80022bc <HAL_RCC_GetSysClockFreq+0x110>)
 8002226:	61bb      	str	r3, [r7, #24]
 8002228:	e004      	b.n	8002234 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	2b08      	cmp	r3, #8
 800222e:	d101      	bne.n	8002234 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002230:	4b23      	ldr	r3, [pc, #140]	; (80022c0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002232:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	2b0c      	cmp	r3, #12
 8002238:	d134      	bne.n	80022a4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800223a:	4b1e      	ldr	r3, [pc, #120]	; (80022b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	f003 0303 	and.w	r3, r3, #3
 8002242:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	2b02      	cmp	r3, #2
 8002248:	d003      	beq.n	8002252 <HAL_RCC_GetSysClockFreq+0xa6>
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	2b03      	cmp	r3, #3
 800224e:	d003      	beq.n	8002258 <HAL_RCC_GetSysClockFreq+0xac>
 8002250:	e005      	b.n	800225e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002252:	4b1a      	ldr	r3, [pc, #104]	; (80022bc <HAL_RCC_GetSysClockFreq+0x110>)
 8002254:	617b      	str	r3, [r7, #20]
      break;
 8002256:	e005      	b.n	8002264 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002258:	4b19      	ldr	r3, [pc, #100]	; (80022c0 <HAL_RCC_GetSysClockFreq+0x114>)
 800225a:	617b      	str	r3, [r7, #20]
      break;
 800225c:	e002      	b.n	8002264 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	617b      	str	r3, [r7, #20]
      break;
 8002262:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002264:	4b13      	ldr	r3, [pc, #76]	; (80022b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	091b      	lsrs	r3, r3, #4
 800226a:	f003 0307 	and.w	r3, r3, #7
 800226e:	3301      	adds	r3, #1
 8002270:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002272:	4b10      	ldr	r3, [pc, #64]	; (80022b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	0a1b      	lsrs	r3, r3, #8
 8002278:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800227c:	697a      	ldr	r2, [r7, #20]
 800227e:	fb03 f202 	mul.w	r2, r3, r2
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	fbb2 f3f3 	udiv	r3, r2, r3
 8002288:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800228a:	4b0a      	ldr	r3, [pc, #40]	; (80022b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	0e5b      	lsrs	r3, r3, #25
 8002290:	f003 0303 	and.w	r3, r3, #3
 8002294:	3301      	adds	r3, #1
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800229a:	697a      	ldr	r2, [r7, #20]
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	fbb2 f3f3 	udiv	r3, r2, r3
 80022a2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80022a4:	69bb      	ldr	r3, [r7, #24]
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3724      	adds	r7, #36	; 0x24
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	40021000 	.word	0x40021000
 80022b8:	080029f0 	.word	0x080029f0
 80022bc:	00f42400 	.word	0x00f42400
 80022c0:	007a1200 	.word	0x007a1200

080022c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b086      	sub	sp, #24
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80022cc:	2300      	movs	r3, #0
 80022ce:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80022d0:	4b2a      	ldr	r3, [pc, #168]	; (800237c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d003      	beq.n	80022e4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80022dc:	f7ff f9ee 	bl	80016bc <HAL_PWREx_GetVoltageRange>
 80022e0:	6178      	str	r0, [r7, #20]
 80022e2:	e014      	b.n	800230e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80022e4:	4b25      	ldr	r3, [pc, #148]	; (800237c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022e8:	4a24      	ldr	r2, [pc, #144]	; (800237c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022ee:	6593      	str	r3, [r2, #88]	; 0x58
 80022f0:	4b22      	ldr	r3, [pc, #136]	; (800237c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f8:	60fb      	str	r3, [r7, #12]
 80022fa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80022fc:	f7ff f9de 	bl	80016bc <HAL_PWREx_GetVoltageRange>
 8002300:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002302:	4b1e      	ldr	r3, [pc, #120]	; (800237c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002306:	4a1d      	ldr	r2, [pc, #116]	; (800237c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002308:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800230c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002314:	d10b      	bne.n	800232e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2b80      	cmp	r3, #128	; 0x80
 800231a:	d919      	bls.n	8002350 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2ba0      	cmp	r3, #160	; 0xa0
 8002320:	d902      	bls.n	8002328 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002322:	2302      	movs	r3, #2
 8002324:	613b      	str	r3, [r7, #16]
 8002326:	e013      	b.n	8002350 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002328:	2301      	movs	r3, #1
 800232a:	613b      	str	r3, [r7, #16]
 800232c:	e010      	b.n	8002350 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2b80      	cmp	r3, #128	; 0x80
 8002332:	d902      	bls.n	800233a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002334:	2303      	movs	r3, #3
 8002336:	613b      	str	r3, [r7, #16]
 8002338:	e00a      	b.n	8002350 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2b80      	cmp	r3, #128	; 0x80
 800233e:	d102      	bne.n	8002346 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002340:	2302      	movs	r3, #2
 8002342:	613b      	str	r3, [r7, #16]
 8002344:	e004      	b.n	8002350 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2b70      	cmp	r3, #112	; 0x70
 800234a:	d101      	bne.n	8002350 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800234c:	2301      	movs	r3, #1
 800234e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002350:	4b0b      	ldr	r3, [pc, #44]	; (8002380 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f023 0207 	bic.w	r2, r3, #7
 8002358:	4909      	ldr	r1, [pc, #36]	; (8002380 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	4313      	orrs	r3, r2
 800235e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002360:	4b07      	ldr	r3, [pc, #28]	; (8002380 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0307 	and.w	r3, r3, #7
 8002368:	693a      	ldr	r2, [r7, #16]
 800236a:	429a      	cmp	r2, r3
 800236c:	d001      	beq.n	8002372 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e000      	b.n	8002374 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002372:	2300      	movs	r3, #0
}
 8002374:	4618      	mov	r0, r3
 8002376:	3718      	adds	r7, #24
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	40021000 	.word	0x40021000
 8002380:	40022000 	.word	0x40022000

08002384 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b086      	sub	sp, #24
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800238c:	2300      	movs	r3, #0
 800238e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002390:	2300      	movs	r3, #0
 8002392:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800239c:	2b00      	cmp	r3, #0
 800239e:	d031      	beq.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023a4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80023a8:	d01a      	beq.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80023aa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80023ae:	d814      	bhi.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x56>
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d009      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80023b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80023b8:	d10f      	bne.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80023ba:	4b5d      	ldr	r3, [pc, #372]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	4a5c      	ldr	r2, [pc, #368]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023c4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023c6:	e00c      	b.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	3304      	adds	r3, #4
 80023cc:	2100      	movs	r1, #0
 80023ce:	4618      	mov	r0, r3
 80023d0:	f000 f9ce 	bl	8002770 <RCCEx_PLLSAI1_Config>
 80023d4:	4603      	mov	r3, r0
 80023d6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023d8:	e003      	b.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	74fb      	strb	r3, [r7, #19]
      break;
 80023de:	e000      	b.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80023e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80023e2:	7cfb      	ldrb	r3, [r7, #19]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d10b      	bne.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80023e8:	4b51      	ldr	r3, [pc, #324]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023f6:	494e      	ldr	r1, [pc, #312]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023f8:	4313      	orrs	r3, r2
 80023fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80023fe:	e001      	b.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002400:	7cfb      	ldrb	r3, [r7, #19]
 8002402:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800240c:	2b00      	cmp	r3, #0
 800240e:	f000 809e 	beq.w	800254e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002412:	2300      	movs	r3, #0
 8002414:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002416:	4b46      	ldr	r3, [pc, #280]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800241a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d101      	bne.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002422:	2301      	movs	r3, #1
 8002424:	e000      	b.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002426:	2300      	movs	r3, #0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d00d      	beq.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800242c:	4b40      	ldr	r3, [pc, #256]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800242e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002430:	4a3f      	ldr	r2, [pc, #252]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002432:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002436:	6593      	str	r3, [r2, #88]	; 0x58
 8002438:	4b3d      	ldr	r3, [pc, #244]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800243a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800243c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002440:	60bb      	str	r3, [r7, #8]
 8002442:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002444:	2301      	movs	r3, #1
 8002446:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002448:	4b3a      	ldr	r3, [pc, #232]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a39      	ldr	r2, [pc, #228]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800244e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002452:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002454:	f7fe fa80 	bl	8000958 <HAL_GetTick>
 8002458:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800245a:	e009      	b.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800245c:	f7fe fa7c 	bl	8000958 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	2b02      	cmp	r3, #2
 8002468:	d902      	bls.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	74fb      	strb	r3, [r7, #19]
        break;
 800246e:	e005      	b.n	800247c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002470:	4b30      	ldr	r3, [pc, #192]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002478:	2b00      	cmp	r3, #0
 800247a:	d0ef      	beq.n	800245c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800247c:	7cfb      	ldrb	r3, [r7, #19]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d15a      	bne.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002482:	4b2b      	ldr	r3, [pc, #172]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002488:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800248c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d01e      	beq.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002498:	697a      	ldr	r2, [r7, #20]
 800249a:	429a      	cmp	r2, r3
 800249c:	d019      	beq.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800249e:	4b24      	ldr	r3, [pc, #144]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024a8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80024aa:	4b21      	ldr	r3, [pc, #132]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024b0:	4a1f      	ldr	r2, [pc, #124]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80024ba:	4b1d      	ldr	r3, [pc, #116]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024c0:	4a1b      	ldr	r2, [pc, #108]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80024ca:	4a19      	ldr	r2, [pc, #100]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	f003 0301 	and.w	r3, r3, #1
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d016      	beq.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024dc:	f7fe fa3c 	bl	8000958 <HAL_GetTick>
 80024e0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024e2:	e00b      	b.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024e4:	f7fe fa38 	bl	8000958 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d902      	bls.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	74fb      	strb	r3, [r7, #19]
            break;
 80024fa:	e006      	b.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024fc:	4b0c      	ldr	r3, [pc, #48]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002502:	f003 0302 	and.w	r3, r3, #2
 8002506:	2b00      	cmp	r3, #0
 8002508:	d0ec      	beq.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800250a:	7cfb      	ldrb	r3, [r7, #19]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d10b      	bne.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002510:	4b07      	ldr	r3, [pc, #28]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002512:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002516:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800251e:	4904      	ldr	r1, [pc, #16]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002520:	4313      	orrs	r3, r2
 8002522:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002526:	e009      	b.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002528:	7cfb      	ldrb	r3, [r7, #19]
 800252a:	74bb      	strb	r3, [r7, #18]
 800252c:	e006      	b.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800252e:	bf00      	nop
 8002530:	40021000 	.word	0x40021000
 8002534:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002538:	7cfb      	ldrb	r3, [r7, #19]
 800253a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800253c:	7c7b      	ldrb	r3, [r7, #17]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d105      	bne.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002542:	4b8a      	ldr	r3, [pc, #552]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002546:	4a89      	ldr	r2, [pc, #548]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002548:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800254c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	2b00      	cmp	r3, #0
 8002558:	d00a      	beq.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800255a:	4b84      	ldr	r3, [pc, #528]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800255c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002560:	f023 0203 	bic.w	r2, r3, #3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a1b      	ldr	r3, [r3, #32]
 8002568:	4980      	ldr	r1, [pc, #512]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800256a:	4313      	orrs	r3, r2
 800256c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0302 	and.w	r3, r3, #2
 8002578:	2b00      	cmp	r3, #0
 800257a:	d00a      	beq.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800257c:	4b7b      	ldr	r3, [pc, #492]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800257e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002582:	f023 020c 	bic.w	r2, r3, #12
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258a:	4978      	ldr	r1, [pc, #480]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800258c:	4313      	orrs	r3, r2
 800258e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0320 	and.w	r3, r3, #32
 800259a:	2b00      	cmp	r3, #0
 800259c:	d00a      	beq.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800259e:	4b73      	ldr	r3, [pc, #460]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025a4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ac:	496f      	ldr	r1, [pc, #444]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d00a      	beq.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80025c0:	4b6a      	ldr	r3, [pc, #424]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025c6:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025ce:	4967      	ldr	r1, [pc, #412]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d00a      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80025e2:	4b62      	ldr	r3, [pc, #392]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025f0:	495e      	ldr	r1, [pc, #376]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025f2:	4313      	orrs	r3, r2
 80025f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002600:	2b00      	cmp	r3, #0
 8002602:	d00a      	beq.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002604:	4b59      	ldr	r3, [pc, #356]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800260a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002612:	4956      	ldr	r1, [pc, #344]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002614:	4313      	orrs	r3, r2
 8002616:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002622:	2b00      	cmp	r3, #0
 8002624:	d00a      	beq.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002626:	4b51      	ldr	r3, [pc, #324]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002628:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800262c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002634:	494d      	ldr	r1, [pc, #308]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002636:	4313      	orrs	r3, r2
 8002638:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d028      	beq.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002648:	4b48      	ldr	r3, [pc, #288]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800264a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800264e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002656:	4945      	ldr	r1, [pc, #276]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002658:	4313      	orrs	r3, r2
 800265a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002662:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002666:	d106      	bne.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002668:	4b40      	ldr	r3, [pc, #256]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	4a3f      	ldr	r2, [pc, #252]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800266e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002672:	60d3      	str	r3, [r2, #12]
 8002674:	e011      	b.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800267e:	d10c      	bne.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	3304      	adds	r3, #4
 8002684:	2101      	movs	r1, #1
 8002686:	4618      	mov	r0, r3
 8002688:	f000 f872 	bl	8002770 <RCCEx_PLLSAI1_Config>
 800268c:	4603      	mov	r3, r0
 800268e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002690:	7cfb      	ldrb	r3, [r7, #19]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002696:	7cfb      	ldrb	r3, [r7, #19]
 8002698:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d028      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80026a6:	4b31      	ldr	r3, [pc, #196]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ac:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b4:	492d      	ldr	r1, [pc, #180]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026c4:	d106      	bne.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026c6:	4b29      	ldr	r3, [pc, #164]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	4a28      	ldr	r2, [pc, #160]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026d0:	60d3      	str	r3, [r2, #12]
 80026d2:	e011      	b.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026dc:	d10c      	bne.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	3304      	adds	r3, #4
 80026e2:	2101      	movs	r1, #1
 80026e4:	4618      	mov	r0, r3
 80026e6:	f000 f843 	bl	8002770 <RCCEx_PLLSAI1_Config>
 80026ea:	4603      	mov	r3, r0
 80026ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026ee:	7cfb      	ldrb	r3, [r7, #19]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d001      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80026f4:	7cfb      	ldrb	r3, [r7, #19]
 80026f6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d01c      	beq.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002704:	4b19      	ldr	r3, [pc, #100]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800270a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002712:	4916      	ldr	r1, [pc, #88]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002714:	4313      	orrs	r3, r2
 8002716:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800271e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002722:	d10c      	bne.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	3304      	adds	r3, #4
 8002728:	2102      	movs	r1, #2
 800272a:	4618      	mov	r0, r3
 800272c:	f000 f820 	bl	8002770 <RCCEx_PLLSAI1_Config>
 8002730:	4603      	mov	r3, r0
 8002732:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002734:	7cfb      	ldrb	r3, [r7, #19]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800273a:	7cfb      	ldrb	r3, [r7, #19]
 800273c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d00a      	beq.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800274a:	4b08      	ldr	r3, [pc, #32]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800274c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002750:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002758:	4904      	ldr	r1, [pc, #16]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800275a:	4313      	orrs	r3, r2
 800275c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002760:	7cbb      	ldrb	r3, [r7, #18]
}
 8002762:	4618      	mov	r0, r3
 8002764:	3718      	adds	r7, #24
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	40021000 	.word	0x40021000

08002770 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800277a:	2300      	movs	r3, #0
 800277c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800277e:	4b74      	ldr	r3, [pc, #464]	; (8002950 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	f003 0303 	and.w	r3, r3, #3
 8002786:	2b00      	cmp	r3, #0
 8002788:	d018      	beq.n	80027bc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800278a:	4b71      	ldr	r3, [pc, #452]	; (8002950 <RCCEx_PLLSAI1_Config+0x1e0>)
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	f003 0203 	and.w	r2, r3, #3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	429a      	cmp	r2, r3
 8002798:	d10d      	bne.n	80027b6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
       ||
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d009      	beq.n	80027b6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80027a2:	4b6b      	ldr	r3, [pc, #428]	; (8002950 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	091b      	lsrs	r3, r3, #4
 80027a8:	f003 0307 	and.w	r3, r3, #7
 80027ac:	1c5a      	adds	r2, r3, #1
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
       ||
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d047      	beq.n	8002846 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	73fb      	strb	r3, [r7, #15]
 80027ba:	e044      	b.n	8002846 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2b03      	cmp	r3, #3
 80027c2:	d018      	beq.n	80027f6 <RCCEx_PLLSAI1_Config+0x86>
 80027c4:	2b03      	cmp	r3, #3
 80027c6:	d825      	bhi.n	8002814 <RCCEx_PLLSAI1_Config+0xa4>
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d002      	beq.n	80027d2 <RCCEx_PLLSAI1_Config+0x62>
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d009      	beq.n	80027e4 <RCCEx_PLLSAI1_Config+0x74>
 80027d0:	e020      	b.n	8002814 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80027d2:	4b5f      	ldr	r3, [pc, #380]	; (8002950 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0302 	and.w	r3, r3, #2
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d11d      	bne.n	800281a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027e2:	e01a      	b.n	800281a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80027e4:	4b5a      	ldr	r3, [pc, #360]	; (8002950 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d116      	bne.n	800281e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027f4:	e013      	b.n	800281e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80027f6:	4b56      	ldr	r3, [pc, #344]	; (8002950 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d10f      	bne.n	8002822 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002802:	4b53      	ldr	r3, [pc, #332]	; (8002950 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d109      	bne.n	8002822 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002812:	e006      	b.n	8002822 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	73fb      	strb	r3, [r7, #15]
      break;
 8002818:	e004      	b.n	8002824 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800281a:	bf00      	nop
 800281c:	e002      	b.n	8002824 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800281e:	bf00      	nop
 8002820:	e000      	b.n	8002824 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002822:	bf00      	nop
    }

    if(status == HAL_OK)
 8002824:	7bfb      	ldrb	r3, [r7, #15]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d10d      	bne.n	8002846 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800282a:	4b49      	ldr	r3, [pc, #292]	; (8002950 <RCCEx_PLLSAI1_Config+0x1e0>)
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6819      	ldr	r1, [r3, #0]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	3b01      	subs	r3, #1
 800283c:	011b      	lsls	r3, r3, #4
 800283e:	430b      	orrs	r3, r1
 8002840:	4943      	ldr	r1, [pc, #268]	; (8002950 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002842:	4313      	orrs	r3, r2
 8002844:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002846:	7bfb      	ldrb	r3, [r7, #15]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d17c      	bne.n	8002946 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800284c:	4b40      	ldr	r3, [pc, #256]	; (8002950 <RCCEx_PLLSAI1_Config+0x1e0>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a3f      	ldr	r2, [pc, #252]	; (8002950 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002852:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002856:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002858:	f7fe f87e 	bl	8000958 <HAL_GetTick>
 800285c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800285e:	e009      	b.n	8002874 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002860:	f7fe f87a 	bl	8000958 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b02      	cmp	r3, #2
 800286c:	d902      	bls.n	8002874 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	73fb      	strb	r3, [r7, #15]
        break;
 8002872:	e005      	b.n	8002880 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002874:	4b36      	ldr	r3, [pc, #216]	; (8002950 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d1ef      	bne.n	8002860 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002880:	7bfb      	ldrb	r3, [r7, #15]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d15f      	bne.n	8002946 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d110      	bne.n	80028ae <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800288c:	4b30      	ldr	r3, [pc, #192]	; (8002950 <RCCEx_PLLSAI1_Config+0x1e0>)
 800288e:	691b      	ldr	r3, [r3, #16]
 8002890:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002894:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	6892      	ldr	r2, [r2, #8]
 800289c:	0211      	lsls	r1, r2, #8
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	68d2      	ldr	r2, [r2, #12]
 80028a2:	06d2      	lsls	r2, r2, #27
 80028a4:	430a      	orrs	r2, r1
 80028a6:	492a      	ldr	r1, [pc, #168]	; (8002950 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028a8:	4313      	orrs	r3, r2
 80028aa:	610b      	str	r3, [r1, #16]
 80028ac:	e027      	b.n	80028fe <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d112      	bne.n	80028da <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028b4:	4b26      	ldr	r3, [pc, #152]	; (8002950 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028b6:	691b      	ldr	r3, [r3, #16]
 80028b8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80028bc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	6892      	ldr	r2, [r2, #8]
 80028c4:	0211      	lsls	r1, r2, #8
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	6912      	ldr	r2, [r2, #16]
 80028ca:	0852      	lsrs	r2, r2, #1
 80028cc:	3a01      	subs	r2, #1
 80028ce:	0552      	lsls	r2, r2, #21
 80028d0:	430a      	orrs	r2, r1
 80028d2:	491f      	ldr	r1, [pc, #124]	; (8002950 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	610b      	str	r3, [r1, #16]
 80028d8:	e011      	b.n	80028fe <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028da:	4b1d      	ldr	r3, [pc, #116]	; (8002950 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028dc:	691b      	ldr	r3, [r3, #16]
 80028de:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80028e2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	6892      	ldr	r2, [r2, #8]
 80028ea:	0211      	lsls	r1, r2, #8
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	6952      	ldr	r2, [r2, #20]
 80028f0:	0852      	lsrs	r2, r2, #1
 80028f2:	3a01      	subs	r2, #1
 80028f4:	0652      	lsls	r2, r2, #25
 80028f6:	430a      	orrs	r2, r1
 80028f8:	4915      	ldr	r1, [pc, #84]	; (8002950 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028fa:	4313      	orrs	r3, r2
 80028fc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80028fe:	4b14      	ldr	r3, [pc, #80]	; (8002950 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a13      	ldr	r2, [pc, #76]	; (8002950 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002904:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002908:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800290a:	f7fe f825 	bl	8000958 <HAL_GetTick>
 800290e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002910:	e009      	b.n	8002926 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002912:	f7fe f821 	bl	8000958 <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	2b02      	cmp	r3, #2
 800291e:	d902      	bls.n	8002926 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	73fb      	strb	r3, [r7, #15]
          break;
 8002924:	e005      	b.n	8002932 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002926:	4b0a      	ldr	r3, [pc, #40]	; (8002950 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d0ef      	beq.n	8002912 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002932:	7bfb      	ldrb	r3, [r7, #15]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d106      	bne.n	8002946 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002938:	4b05      	ldr	r3, [pc, #20]	; (8002950 <RCCEx_PLLSAI1_Config+0x1e0>)
 800293a:	691a      	ldr	r2, [r3, #16]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	4903      	ldr	r1, [pc, #12]	; (8002950 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002942:	4313      	orrs	r3, r2
 8002944:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002946:	7bfb      	ldrb	r3, [r7, #15]
}
 8002948:	4618      	mov	r0, r3
 800294a:	3710      	adds	r7, #16
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	40021000 	.word	0x40021000

08002954 <__libc_init_array>:
 8002954:	b570      	push	{r4, r5, r6, lr}
 8002956:	4d0d      	ldr	r5, [pc, #52]	; (800298c <__libc_init_array+0x38>)
 8002958:	4c0d      	ldr	r4, [pc, #52]	; (8002990 <__libc_init_array+0x3c>)
 800295a:	1b64      	subs	r4, r4, r5
 800295c:	10a4      	asrs	r4, r4, #2
 800295e:	2600      	movs	r6, #0
 8002960:	42a6      	cmp	r6, r4
 8002962:	d109      	bne.n	8002978 <__libc_init_array+0x24>
 8002964:	4d0b      	ldr	r5, [pc, #44]	; (8002994 <__libc_init_array+0x40>)
 8002966:	4c0c      	ldr	r4, [pc, #48]	; (8002998 <__libc_init_array+0x44>)
 8002968:	f000 f82e 	bl	80029c8 <_init>
 800296c:	1b64      	subs	r4, r4, r5
 800296e:	10a4      	asrs	r4, r4, #2
 8002970:	2600      	movs	r6, #0
 8002972:	42a6      	cmp	r6, r4
 8002974:	d105      	bne.n	8002982 <__libc_init_array+0x2e>
 8002976:	bd70      	pop	{r4, r5, r6, pc}
 8002978:	f855 3b04 	ldr.w	r3, [r5], #4
 800297c:	4798      	blx	r3
 800297e:	3601      	adds	r6, #1
 8002980:	e7ee      	b.n	8002960 <__libc_init_array+0xc>
 8002982:	f855 3b04 	ldr.w	r3, [r5], #4
 8002986:	4798      	blx	r3
 8002988:	3601      	adds	r6, #1
 800298a:	e7f2      	b.n	8002972 <__libc_init_array+0x1e>
 800298c:	08002a20 	.word	0x08002a20
 8002990:	08002a20 	.word	0x08002a20
 8002994:	08002a20 	.word	0x08002a20
 8002998:	08002a24 	.word	0x08002a24

0800299c <memcpy>:
 800299c:	440a      	add	r2, r1
 800299e:	4291      	cmp	r1, r2
 80029a0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80029a4:	d100      	bne.n	80029a8 <memcpy+0xc>
 80029a6:	4770      	bx	lr
 80029a8:	b510      	push	{r4, lr}
 80029aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80029ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80029b2:	4291      	cmp	r1, r2
 80029b4:	d1f9      	bne.n	80029aa <memcpy+0xe>
 80029b6:	bd10      	pop	{r4, pc}

080029b8 <memset>:
 80029b8:	4402      	add	r2, r0
 80029ba:	4603      	mov	r3, r0
 80029bc:	4293      	cmp	r3, r2
 80029be:	d100      	bne.n	80029c2 <memset+0xa>
 80029c0:	4770      	bx	lr
 80029c2:	f803 1b01 	strb.w	r1, [r3], #1
 80029c6:	e7f9      	b.n	80029bc <memset+0x4>

080029c8 <_init>:
 80029c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029ca:	bf00      	nop
 80029cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029ce:	bc08      	pop	{r3}
 80029d0:	469e      	mov	lr, r3
 80029d2:	4770      	bx	lr

080029d4 <_fini>:
 80029d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029d6:	bf00      	nop
 80029d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029da:	bc08      	pop	{r3}
 80029dc:	469e      	mov	lr, r3
 80029de:	4770      	bx	lr
